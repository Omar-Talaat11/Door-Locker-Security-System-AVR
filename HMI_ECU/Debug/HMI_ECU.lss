
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003c9c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001b2  00800060  00003c9c  00003d30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800212  00800212  00003ee2  2**0
                  ALLOC
  3 .stab         000031d4  00000000  00000000  00003ee4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001356  00000000  00000000  000070b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000840e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  000085ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  0000879e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  0000abaa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  0000bf21  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000d0fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  0000d2bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  0000d5af  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000df7d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 c7 1b 	jmp	0x378e	; 0x378e <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 fa 1b 	jmp	0x37f4	; 0x37f4 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e9       	ldi	r30, 0x9C	; 156
      68:	fc e3       	ldi	r31, 0x3C	; 60
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 31       	cpi	r26, 0x12	; 18
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a2 e1       	ldi	r26, 0x12	; 18
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 31       	cpi	r26, 0x1C	; 28
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <main>
      8a:	0c 94 4c 1e 	jmp	0x3c98	; 0x3c98 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d0 1d 	jmp	0x3ba0	; 0x3ba0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 ef       	ldi	r26, 0xF6	; 246
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ec 1d 	jmp	0x3bd8	; 0x3bd8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 dc 1d 	jmp	0x3bb8	; 0x3bb8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f8 1d 	jmp	0x3bf0	; 0x3bf0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 dc 1d 	jmp	0x3bb8	; 0x3bb8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f8 1d 	jmp	0x3bf0	; 0x3bf0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d0 1d 	jmp	0x3ba0	; 0x3ba0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 ef       	ldi	r24, 0xF6	; 246
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ec 1d 	jmp	0x3bd8	; 0x3bd8 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d8 1d 	jmp	0x3bb0	; 0x3bb0 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	66 ef       	ldi	r22, 0xF6	; 246
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 f4 1d 	jmp	0x3be8	; 0x3be8 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 dc 1d 	jmp	0x3bb8	; 0x3bb8 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 f8 1d 	jmp	0x3bf0	; 0x3bf0 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 dc 1d 	jmp	0x3bb8	; 0x3bb8 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 f8 1d 	jmp	0x3bf0	; 0x3bf0 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 dc 1d 	jmp	0x3bb8	; 0x3bb8 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 f8 1d 	jmp	0x3bf0	; 0x3bf0 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 d9 1d 	jmp	0x3bb2	; 0x3bb2 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 07 05 	call	0xa0e	; 0xa0e <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 f5 1d 	jmp	0x3bea	; 0x3bea <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 e0 1d 	jmp	0x3bc0	; 0x3bc0 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 fc 1d 	jmp	0x3bf8	; 0x3bf8 <__epilogue_restores__+0x20>

00000a0e <__clzsi2>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	7b 01       	movw	r14, r22
     a18:	8c 01       	movw	r16, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	e8 16       	cp	r14, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	f8 06       	cpc	r15, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 07       	cpc	r16, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	18 07       	cpc	r17, r24
     a2a:	88 f4       	brcc	.+34     	; 0xa4e <__clzsi2+0x40>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	e8 16       	cp	r14, r24
     a30:	f1 04       	cpc	r15, r1
     a32:	01 05       	cpc	r16, r1
     a34:	11 05       	cpc	r17, r1
     a36:	31 f0       	breq	.+12     	; 0xa44 <__clzsi2+0x36>
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__clzsi2+0x36>
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	17 c0       	rjmp	.+46     	; 0xa72 <__clzsi2+0x64>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <__clzsi2+0x64>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	e8 16       	cp	r14, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	f8 06       	cpc	r15, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 07       	cpc	r16, r24
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	18 07       	cpc	r17, r24
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x5c>
     a60:	88 e1       	ldi	r24, 0x18	; 24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__clzsi2+0x64>
     a6a:	80 e1       	ldi	r24, 0x10	; 16
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	20 e2       	ldi	r18, 0x20	; 32
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	28 1b       	sub	r18, r24
     a7c:	39 0b       	sbc	r19, r25
     a7e:	4a 0b       	sbc	r20, r26
     a80:	5b 0b       	sbc	r21, r27
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__clzsi2+0x7e>
     a84:	16 95       	lsr	r17
     a86:	07 95       	ror	r16
     a88:	f7 94       	ror	r15
     a8a:	e7 94       	ror	r14
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <__clzsi2+0x76>
     a90:	f7 01       	movw	r30, r14
     a92:	e2 50       	subi	r30, 0x02	; 2
     a94:	ff 4f       	sbci	r31, 0xFF	; 255
     a96:	80 81       	ld	r24, Z
     a98:	28 1b       	sub	r18, r24
     a9a:	31 09       	sbc	r19, r1
     a9c:	41 09       	sbc	r20, r1
     a9e:	51 09       	sbc	r21, r1
     aa0:	c9 01       	movw	r24, r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <__pack_f>:
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	fc 01       	movw	r30, r24
     ab8:	e4 80       	ldd	r14, Z+4	; 0x04
     aba:	f5 80       	ldd	r15, Z+5	; 0x05
     abc:	06 81       	ldd	r16, Z+6	; 0x06
     abe:	17 81       	ldd	r17, Z+7	; 0x07
     ac0:	d1 80       	ldd	r13, Z+1	; 0x01
     ac2:	80 81       	ld	r24, Z
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	48 f4       	brcc	.+18     	; 0xada <__pack_f+0x2e>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e1       	ldi	r26, 0x10	; 16
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e8 2a       	or	r14, r24
     ad2:	f9 2a       	or	r15, r25
     ad4:	0a 2b       	or	r16, r26
     ad6:	1b 2b       	or	r17, r27
     ad8:	a5 c0       	rjmp	.+330    	; 0xc24 <__pack_f+0x178>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	09 f4       	brne	.+2      	; 0xae0 <__pack_f+0x34>
     ade:	9f c0       	rjmp	.+318    	; 0xc1e <__pack_f+0x172>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	21 f4       	brne	.+8      	; 0xaec <__pack_f+0x40>
     ae4:	ee 24       	eor	r14, r14
     ae6:	ff 24       	eor	r15, r15
     ae8:	87 01       	movw	r16, r14
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x4a>
     aec:	e1 14       	cp	r14, r1
     aee:	f1 04       	cpc	r15, r1
     af0:	01 05       	cpc	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	19 f4       	brne	.+6      	; 0xafc <__pack_f+0x50>
     af6:	e0 e0       	ldi	r30, 0x00	; 0
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	96 c0       	rjmp	.+300    	; 0xc28 <__pack_f+0x17c>
     afc:	62 81       	ldd	r22, Z+2	; 0x02
     afe:	73 81       	ldd	r23, Z+3	; 0x03
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	62 38       	cpi	r22, 0x82	; 130
     b04:	79 07       	cpc	r23, r25
     b06:	0c f0       	brlt	.+2      	; 0xb0a <__pack_f+0x5e>
     b08:	5b c0       	rjmp	.+182    	; 0xbc0 <__pack_f+0x114>
     b0a:	22 e8       	ldi	r18, 0x82	; 130
     b0c:	3f ef       	ldi	r19, 0xFF	; 255
     b0e:	26 1b       	sub	r18, r22
     b10:	37 0b       	sbc	r19, r23
     b12:	2a 31       	cpi	r18, 0x1A	; 26
     b14:	31 05       	cpc	r19, r1
     b16:	2c f0       	brlt	.+10     	; 0xb22 <__pack_f+0x76>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <__pack_f+0xca>
     b22:	b8 01       	movw	r22, r16
     b24:	a7 01       	movw	r20, r14
     b26:	02 2e       	mov	r0, r18
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x86>
     b2a:	76 95       	lsr	r23
     b2c:	67 95       	ror	r22
     b2e:	57 95       	ror	r21
     b30:	47 95       	ror	r20
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x7e>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__pack_f+0x9c>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	aa 1f       	adc	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	2a 95       	dec	r18
     b4a:	d2 f7       	brpl	.-12     	; 0xb40 <__pack_f+0x94>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	a1 09       	sbc	r26, r1
     b50:	b1 09       	sbc	r27, r1
     b52:	8e 21       	and	r24, r14
     b54:	9f 21       	and	r25, r15
     b56:	a0 23       	and	r26, r16
     b58:	b1 23       	and	r27, r17
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	21 f0       	breq	.+8      	; 0xb6a <__pack_f+0xbe>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	9a 01       	movw	r18, r20
     b6c:	ab 01       	movw	r20, r22
     b6e:	28 2b       	or	r18, r24
     b70:	39 2b       	or	r19, r25
     b72:	4a 2b       	or	r20, r26
     b74:	5b 2b       	or	r21, r27
     b76:	da 01       	movw	r26, r20
     b78:	c9 01       	movw	r24, r18
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	a0 70       	andi	r26, 0x00	; 0
     b80:	b0 70       	andi	r27, 0x00	; 0
     b82:	80 34       	cpi	r24, 0x40	; 64
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	39 f4       	brne	.+14     	; 0xb9a <__pack_f+0xee>
     b8c:	27 ff       	sbrs	r18, 7
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__pack_f+0xf6>
     b90:	20 5c       	subi	r18, 0xC0	; 192
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	4f 4f       	sbci	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__pack_f+0xf6>
     b9a:	21 5c       	subi	r18, 0xC1	; 193
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	20 30       	cpi	r18, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	3a 07       	cpc	r19, r26
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	4a 07       	cpc	r20, r26
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	5a 07       	cpc	r21, r26
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__pack_f+0x10e>
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	79 01       	movw	r14, r18
     bbc:	8a 01       	movw	r16, r20
     bbe:	27 c0       	rjmp	.+78     	; 0xc0e <__pack_f+0x162>
     bc0:	60 38       	cpi	r22, 0x80	; 128
     bc2:	71 05       	cpc	r23, r1
     bc4:	64 f5       	brge	.+88     	; 0xc1e <__pack_f+0x172>
     bc6:	fb 01       	movw	r30, r22
     bc8:	e1 58       	subi	r30, 0x81	; 129
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	d8 01       	movw	r26, r16
     bce:	c7 01       	movw	r24, r14
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	80 34       	cpi	r24, 0x40	; 64
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 05       	cpc	r26, r1
     bde:	b1 05       	cpc	r27, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__pack_f+0x144>
     be2:	e7 fe       	sbrs	r14, 7
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <__pack_f+0x154>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__pack_f+0x14c>
     bf0:	8f e3       	ldi	r24, 0x3F	; 63
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e8 0e       	add	r14, r24
     bfa:	f9 1e       	adc	r15, r25
     bfc:	0a 1f       	adc	r16, r26
     bfe:	1b 1f       	adc	r17, r27
     c00:	17 ff       	sbrs	r17, 7
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__pack_f+0x162>
     c04:	16 95       	lsr	r17
     c06:	07 95       	ror	r16
     c08:	f7 94       	ror	r15
     c0a:	e7 94       	ror	r14
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	16 95       	lsr	r17
     c12:	07 95       	ror	r16
     c14:	f7 94       	ror	r15
     c16:	e7 94       	ror	r14
     c18:	8a 95       	dec	r24
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <__pack_f+0x164>
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__pack_f+0x17c>
     c1e:	ee 24       	eor	r14, r14
     c20:	ff 24       	eor	r15, r15
     c22:	87 01       	movw	r16, r14
     c24:	ef ef       	ldi	r30, 0xFF	; 255
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	6e 2f       	mov	r22, r30
     c2a:	67 95       	ror	r22
     c2c:	66 27       	eor	r22, r22
     c2e:	67 95       	ror	r22
     c30:	90 2f       	mov	r25, r16
     c32:	9f 77       	andi	r25, 0x7F	; 127
     c34:	d7 94       	ror	r13
     c36:	dd 24       	eor	r13, r13
     c38:	d7 94       	ror	r13
     c3a:	8e 2f       	mov	r24, r30
     c3c:	86 95       	lsr	r24
     c3e:	49 2f       	mov	r20, r25
     c40:	46 2b       	or	r20, r22
     c42:	58 2f       	mov	r21, r24
     c44:	5d 29       	or	r21, r13
     c46:	b7 01       	movw	r22, r14
     c48:	ca 01       	movw	r24, r20
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <__unpack_f>:
     c56:	fc 01       	movw	r30, r24
     c58:	db 01       	movw	r26, r22
     c5a:	40 81       	ld	r20, Z
     c5c:	51 81       	ldd	r21, Z+1	; 0x01
     c5e:	22 81       	ldd	r18, Z+2	; 0x02
     c60:	62 2f       	mov	r22, r18
     c62:	6f 77       	andi	r22, 0x7F	; 127
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	22 1f       	adc	r18, r18
     c68:	22 27       	eor	r18, r18
     c6a:	22 1f       	adc	r18, r18
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	89 2f       	mov	r24, r25
     c70:	88 0f       	add	r24, r24
     c72:	82 2b       	or	r24, r18
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	99 1f       	adc	r25, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	99 1f       	adc	r25, r25
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	21 15       	cp	r18, r1
     c86:	31 05       	cpc	r19, r1
     c88:	a9 f5       	brne	.+106    	; 0xcf4 <__unpack_f+0x9e>
     c8a:	41 15       	cp	r20, r1
     c8c:	51 05       	cpc	r21, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <__unpack_f+0x42>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	37 c0       	rjmp	.+110    	; 0xd06 <__unpack_f+0xb0>
     c98:	82 e8       	ldi	r24, 0x82	; 130
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	9c 93       	st	X, r25
     ca0:	8e 93       	st	-X, r24
     ca2:	12 97       	sbiw	r26, 0x02	; 2
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	6a 95       	dec	r22
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <__unpack_f+0x54>
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__unpack_f+0x80>
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	44 1f       	adc	r20, r20
     cc2:	55 1f       	adc	r21, r21
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	38 07       	cpc	r19, r24
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	48 07       	cpc	r20, r24
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	58 07       	cpc	r21, r24
     ce4:	58 f3       	brcs	.-42     	; 0xcbc <__unpack_f+0x66>
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	2d 93       	st	X+, r18
     cea:	3d 93       	st	X+, r19
     cec:	4d 93       	st	X+, r20
     cee:	5c 93       	st	X, r21
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	08 95       	ret
     cf4:	2f 3f       	cpi	r18, 0xFF	; 255
     cf6:	31 05       	cpc	r19, r1
     cf8:	79 f4       	brne	.+30     	; 0xd18 <__unpack_f+0xc2>
     cfa:	41 15       	cp	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	61 05       	cpc	r22, r1
     d00:	71 05       	cpc	r23, r1
     d02:	19 f4       	brne	.+6      	; 0xd0a <__unpack_f+0xb4>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	08 95       	ret
     d0a:	64 ff       	sbrs	r22, 4
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <__unpack_f+0xbe>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <__unpack_f+0xe2>
     d14:	1c 92       	st	X, r1
     d16:	10 c0       	rjmp	.+32     	; 0xd38 <__unpack_f+0xe2>
     d18:	2f 57       	subi	r18, 0x7F	; 127
     d1a:	30 40       	sbci	r19, 0x00	; 0
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	3c 93       	st	X, r19
     d20:	2e 93       	st	-X, r18
     d22:	12 97       	sbiw	r26, 0x02	; 2
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8c 93       	st	X, r24
     d28:	87 e0       	ldi	r24, 0x07	; 7
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	d1 f7       	brne	.-12     	; 0xd2a <__unpack_f+0xd4>
     d36:	70 64       	ori	r23, 0x40	; 64
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	4d 93       	st	X+, r20
     d3c:	5d 93       	st	X+, r21
     d3e:	6d 93       	st	X+, r22
     d40:	7c 93       	st	X, r23
     d42:	17 97       	sbiw	r26, 0x07	; 7
     d44:	08 95       	ret

00000d46 <__fpcmp_parts_f>:
     d46:	1f 93       	push	r17
     d48:	dc 01       	movw	r26, r24
     d4a:	fb 01       	movw	r30, r22
     d4c:	9c 91       	ld	r25, X
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__fpcmp_parts_f+0xe>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d54:	80 81       	ld	r24, Z
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	08 f4       	brcc	.+2      	; 0xd5c <__fpcmp_parts_f+0x16>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d5c:	94 30       	cpi	r25, 0x04	; 4
     d5e:	51 f4       	brne	.+20     	; 0xd74 <__fpcmp_parts_f+0x2e>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	99 f5       	brne	.+102    	; 0xdce <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	68 2f       	mov	r22, r24
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	61 1b       	sub	r22, r17
     d70:	71 09       	sbc	r23, r1
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <__fpcmp_parts_f+0xac>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	21 f0       	breq	.+8      	; 0xd80 <__fpcmp_parts_f+0x3a>
     d78:	92 30       	cpi	r25, 0x02	; 2
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__fpcmp_parts_f+0x42>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	b9 f1       	breq	.+110    	; 0xdee <__fpcmp_parts_f+0xa8>
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	89 f1       	breq	.+98     	; 0xde8 <__fpcmp_parts_f+0xa2>
     d86:	2d c0       	rjmp	.+90     	; 0xde2 <__fpcmp_parts_f+0x9c>
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	1c 91       	ld	r17, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	f1 f0       	breq	.+60     	; 0xdce <__fpcmp_parts_f+0x88>
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	18 17       	cp	r17, r24
     d96:	d9 f4       	brne	.+54     	; 0xdce <__fpcmp_parts_f+0x88>
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	2d 91       	ld	r18, X+
     d9c:	3c 91       	ld	r19, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	94 f0       	brlt	.+36     	; 0xdce <__fpcmp_parts_f+0x88>
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	bc f0       	brlt	.+46     	; 0xdde <__fpcmp_parts_f+0x98>
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8d 91       	ld	r24, X+
     db4:	9d 91       	ld	r25, X+
     db6:	0d 90       	ld	r0, X+
     db8:	bc 91       	ld	r27, X
     dba:	a0 2d       	mov	r26, r0
     dbc:	24 81       	ldd	r18, Z+4	; 0x04
     dbe:	35 81       	ldd	r19, Z+5	; 0x05
     dc0:	46 81       	ldd	r20, Z+6	; 0x06
     dc2:	57 81       	ldd	r21, Z+7	; 0x07
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	4a 07       	cpc	r20, r26
     dca:	5b 07       	cpc	r21, r27
     dcc:	18 f4       	brcc	.+6      	; 0xdd4 <__fpcmp_parts_f+0x8e>
     dce:	11 23       	and	r17, r17
     dd0:	41 f0       	breq	.+16     	; 0xde2 <__fpcmp_parts_f+0x9c>
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <__fpcmp_parts_f+0xa2>
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	a4 07       	cpc	r26, r20
     dda:	b5 07       	cpc	r27, r21
     ddc:	40 f4       	brcc	.+16     	; 0xdee <__fpcmp_parts_f+0xa8>
     dde:	11 23       	and	r17, r17
     de0:	19 f0       	breq	.+6      	; 0xde8 <__fpcmp_parts_f+0xa2>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__fpcmp_parts_f+0xac>
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <__fpcmp_parts_f+0xac>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	cb 01       	movw	r24, r22
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <main>:
uint8 APP_gateOpening(void);
void APP_alarm(void);


int main(void)
{
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
     e00:	2f 97       	sbiw	r28, 0x0f	; 15
     e02:	0f b6       	in	r0, 0x3f	; 63
     e04:	f8 94       	cli
     e06:	de bf       	out	0x3e, r29	; 62
     e08:	0f be       	out	0x3f, r0	; 63
     e0a:	cd bf       	out	0x3d, r28	; 61
	UART_ConfigType UART_Config={UART_8_Bit,No_Partiy,Stop_OneBit,UART_Rate_9600};
     e0c:	9e 01       	movw	r18, r28
     e0e:	2e 5f       	subi	r18, 0xFE	; 254
     e10:	3f 4f       	sbci	r19, 0xFF	; 255
     e12:	3c 87       	std	Y+12, r19	; 0x0c
     e14:	2b 87       	std	Y+11, r18	; 0x0b
     e16:	8e ef       	ldi	r24, 0xFE	; 254
     e18:	91 e0       	ldi	r25, 0x01	; 1
     e1a:	9e 87       	std	Y+14, r25	; 0x0e
     e1c:	8d 87       	std	Y+13, r24	; 0x0d
     e1e:	97 e0       	ldi	r25, 0x07	; 7
     e20:	9f 87       	std	Y+15, r25	; 0x0f
     e22:	ed 85       	ldd	r30, Y+13	; 0x0d
     e24:	fe 85       	ldd	r31, Y+14	; 0x0e
     e26:	00 80       	ld	r0, Z
     e28:	2d 85       	ldd	r18, Y+13	; 0x0d
     e2a:	3e 85       	ldd	r19, Y+14	; 0x0e
     e2c:	2f 5f       	subi	r18, 0xFF	; 255
     e2e:	3f 4f       	sbci	r19, 0xFF	; 255
     e30:	3e 87       	std	Y+14, r19	; 0x0e
     e32:	2d 87       	std	Y+13, r18	; 0x0d
     e34:	eb 85       	ldd	r30, Y+11	; 0x0b
     e36:	fc 85       	ldd	r31, Y+12	; 0x0c
     e38:	00 82       	st	Z, r0
     e3a:	2b 85       	ldd	r18, Y+11	; 0x0b
     e3c:	3c 85       	ldd	r19, Y+12	; 0x0c
     e3e:	2f 5f       	subi	r18, 0xFF	; 255
     e40:	3f 4f       	sbci	r19, 0xFF	; 255
     e42:	3c 87       	std	Y+12, r19	; 0x0c
     e44:	2b 87       	std	Y+11, r18	; 0x0b
     e46:	3f 85       	ldd	r19, Y+15	; 0x0f
     e48:	31 50       	subi	r19, 0x01	; 1
     e4a:	3f 87       	std	Y+15, r19	; 0x0f
     e4c:	8f 85       	ldd	r24, Y+15	; 0x0f
     e4e:	88 23       	and	r24, r24
     e50:	41 f7       	brne	.-48     	; 0xe22 <main+0x2a>
	UART_init(&UART_Config);
     e52:	ce 01       	movw	r24, r28
     e54:	02 96       	adiw	r24, 0x02	; 2
     e56:	0e 94 b3 1c 	call	0x3966	; 0x3966 <UART_init>
	LCD_init();
     e5a:	0e 94 6e 11 	call	0x22dc	; 0x22dc <LCD_init>
	uint8 step='0';
     e5e:	80 e3       	ldi	r24, 0x30	; 48
     e60:	89 83       	std	Y+1, r24	; 0x01

	while(1)
	{

		switch (step)
     e62:	89 81       	ldd	r24, Y+1	; 0x01
     e64:	e8 2f       	mov	r30, r24
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	fa 87       	std	Y+10, r31	; 0x0a
     e6a:	e9 87       	std	Y+9, r30	; 0x09
     e6c:	29 85       	ldd	r18, Y+9	; 0x09
     e6e:	3a 85       	ldd	r19, Y+10	; 0x0a
     e70:	23 33       	cpi	r18, 0x33	; 51
     e72:	31 05       	cpc	r19, r1
     e74:	99 f1       	breq	.+102    	; 0xedc <main+0xe4>
     e76:	89 85       	ldd	r24, Y+9	; 0x09
     e78:	9a 85       	ldd	r25, Y+10	; 0x0a
     e7a:	84 33       	cpi	r24, 0x34	; 52
     e7c:	91 05       	cpc	r25, r1
     e7e:	84 f4       	brge	.+32     	; 0xea0 <main+0xa8>
     e80:	e9 85       	ldd	r30, Y+9	; 0x09
     e82:	fa 85       	ldd	r31, Y+10	; 0x0a
     e84:	e1 33       	cpi	r30, 0x31	; 49
     e86:	f1 05       	cpc	r31, r1
     e88:	f9 f0       	breq	.+62     	; 0xec8 <main+0xd0>
     e8a:	29 85       	ldd	r18, Y+9	; 0x09
     e8c:	3a 85       	ldd	r19, Y+10	; 0x0a
     e8e:	22 33       	cpi	r18, 0x32	; 50
     e90:	31 05       	cpc	r19, r1
     e92:	f4 f4       	brge	.+60     	; 0xed0 <main+0xd8>
     e94:	89 85       	ldd	r24, Y+9	; 0x09
     e96:	9a 85       	ldd	r25, Y+10	; 0x0a
     e98:	80 33       	cpi	r24, 0x30	; 48
     e9a:	91 05       	cpc	r25, r1
     e9c:	89 f0       	breq	.+34     	; 0xec0 <main+0xc8>
     e9e:	e1 cf       	rjmp	.-62     	; 0xe62 <main+0x6a>
     ea0:	e9 85       	ldd	r30, Y+9	; 0x09
     ea2:	fa 85       	ldd	r31, Y+10	; 0x0a
     ea4:	e5 33       	cpi	r30, 0x35	; 53
     ea6:	f1 05       	cpc	r31, r1
     ea8:	09 f1       	breq	.+66     	; 0xeec <main+0xf4>
     eaa:	29 85       	ldd	r18, Y+9	; 0x09
     eac:	3a 85       	ldd	r19, Y+10	; 0x0a
     eae:	25 33       	cpi	r18, 0x35	; 53
     eb0:	31 05       	cpc	r19, r1
     eb2:	c4 f0       	brlt	.+48     	; 0xee4 <main+0xec>
     eb4:	89 85       	ldd	r24, Y+9	; 0x09
     eb6:	9a 85       	ldd	r25, Y+10	; 0x0a
     eb8:	87 34       	cpi	r24, 0x47	; 71
     eba:	91 05       	cpc	r25, r1
     ebc:	d9 f0       	breq	.+54     	; 0xef4 <main+0xfc>
     ebe:	d1 cf       	rjmp	.-94     	; 0xe62 <main+0x6a>
		{
		case '0': /* Step 1 take first password */
		{
			step=APP_enterFirstPass();
     ec0:	0e 94 38 08 	call	0x1070	; 0x1070 <APP_enterFirstPass>
     ec4:	89 83       	std	Y+1, r24	; 0x01
     ec6:	cd cf       	rjmp	.-102    	; 0xe62 <main+0x6a>
			break;
		}
		case '1': /* Step 1 take second password */
		{
			step=APP_enterSecondPass();
     ec8:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <APP_enterSecondPass>
     ecc:	89 83       	std	Y+1, r24	; 0x01
     ece:	c9 cf       	rjmp	.-110    	; 0xe62 <main+0x6a>
			break;
		}
		case '2': /* Step 2 main options menu */
		{
			g_count=0;
     ed0:	10 92 16 02 	sts	0x0216, r1
			step=APP_mainOptions();
     ed4:	0e 94 8f 09 	call	0x131e	; 0x131e <APP_mainOptions>
     ed8:	89 83       	std	Y+1, r24	; 0x01
     eda:	c3 cf       	rjmp	.-122    	; 0xe62 <main+0x6a>
			break;
		}
		case '3': /* Gate Open */
		{
			step=APP_passVerify();
     edc:	0e 94 3a 0a 	call	0x1474	; 0x1474 <APP_passVerify>
     ee0:	89 83       	std	Y+1, r24	; 0x01
     ee2:	bf cf       	rjmp	.-130    	; 0xe62 <main+0x6a>
			break;
		}
		case '4':/* Change Pass */
		{
			step=APP_passVerify();
     ee4:	0e 94 3a 0a 	call	0x1474	; 0x1474 <APP_passVerify>
     ee8:	89 83       	std	Y+1, r24	; 0x01
     eea:	bb cf       	rjmp	.-138    	; 0xe62 <main+0x6a>
			break;
		}
		case '5':
		{
			step=APP_wrongInput();
     eec:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <APP_wrongInput>
     ef0:	89 83       	std	Y+1, r24	; 0x01
     ef2:	b7 cf       	rjmp	.-146    	; 0xe62 <main+0x6a>
			break;
		}
		case 'G':
		{
			step=APP_gateOpening();
     ef4:	0e 94 ab 0b 	call	0x1756	; 0x1756 <APP_gateOpening>
     ef8:	89 83       	std	Y+1, r24	; 0x01
     efa:	b3 cf       	rjmp	.-154    	; 0xe62 <main+0x6a>

00000efc <APP_timer1TickProccessing1>:
	}
}


void APP_timer1TickProccessing1(void)
{
     efc:	df 93       	push	r29
     efe:	cf 93       	push	r28
     f00:	cd b7       	in	r28, 0x3d	; 61
     f02:	de b7       	in	r29, 0x3e	; 62
	static uint8 count=0;
	if(count==29)
     f04:	80 91 17 02 	lds	r24, 0x0217
     f08:	8d 31       	cpi	r24, 0x1D	; 29
     f0a:	79 f4       	brne	.+30     	; 0xf2a <APP_timer1TickProccessing1+0x2e>
	{
		g_time=1;
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	a0 e0       	ldi	r26, 0x00	; 0
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	80 93 12 02 	sts	0x0212, r24
     f18:	90 93 13 02 	sts	0x0213, r25
     f1c:	a0 93 14 02 	sts	0x0214, r26
     f20:	b0 93 15 02 	sts	0x0215, r27
		count=0;
     f24:	10 92 17 02 	sts	0x0217, r1
     f28:	05 c0       	rjmp	.+10     	; 0xf34 <APP_timer1TickProccessing1+0x38>
		return;
	}
	count++;
     f2a:	80 91 17 02 	lds	r24, 0x0217
     f2e:	8f 5f       	subi	r24, 0xFF	; 255
     f30:	80 93 17 02 	sts	0x0217, r24
}
     f34:	cf 91       	pop	r28
     f36:	df 91       	pop	r29
     f38:	08 95       	ret

00000f3a <APP_timer1TickProccessing2>:

void APP_timer1TickProccessing2(void)
{
     f3a:	df 93       	push	r29
     f3c:	cf 93       	push	r28
     f3e:	cd b7       	in	r28, 0x3d	; 61
     f40:	de b7       	in	r29, 0x3e	; 62
	static uint8 count=0;
	if(count==6)
     f42:	80 91 18 02 	lds	r24, 0x0218
     f46:	86 30       	cpi	r24, 0x06	; 6
     f48:	79 f4       	brne	.+30     	; 0xf68 <APP_timer1TickProccessing2+0x2e>
	{
		g_time=1;
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	a0 e0       	ldi	r26, 0x00	; 0
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	80 93 12 02 	sts	0x0212, r24
     f56:	90 93 13 02 	sts	0x0213, r25
     f5a:	a0 93 14 02 	sts	0x0214, r26
     f5e:	b0 93 15 02 	sts	0x0215, r27
		count=0;
     f62:	10 92 18 02 	sts	0x0218, r1
     f66:	05 c0       	rjmp	.+10     	; 0xf72 <APP_timer1TickProccessing2+0x38>
		return;
	}
	count++;
     f68:	80 91 18 02 	lds	r24, 0x0218
     f6c:	8f 5f       	subi	r24, 0xFF	; 255
     f6e:	80 93 18 02 	sts	0x0218, r24
}
     f72:	cf 91       	pop	r28
     f74:	df 91       	pop	r29
     f76:	08 95       	ret

00000f78 <APP_timer1TickProccessing3>:

void APP_timer1TickProccessing3(void)
{
     f78:	df 93       	push	r29
     f7a:	cf 93       	push	r28
     f7c:	cd b7       	in	r28, 0x3d	; 61
     f7e:	de b7       	in	r29, 0x3e	; 62
	static uint8 count=0;
	LCD_moveCursor(1,14);
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	6e e0       	ldi	r22, 0x0E	; 14
     f84:	0e 94 3f 1b 	call	0x367e	; 0x367e <LCD_moveCursor>
	if((uint8)(60-(count/1.9))<10)
     f88:	80 91 19 02 	lds	r24, 0x0219
     f8c:	88 2f       	mov	r24, r24
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	aa 27       	eor	r26, r26
     f92:	97 fd       	sbrc	r25, 7
     f94:	a0 95       	com	r26
     f96:	ba 2f       	mov	r27, r26
     f98:	bc 01       	movw	r22, r24
     f9a:	cd 01       	movw	r24, r26
     f9c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
     fa0:	dc 01       	movw	r26, r24
     fa2:	cb 01       	movw	r24, r22
     fa4:	bc 01       	movw	r22, r24
     fa6:	cd 01       	movw	r24, r26
     fa8:	23 e3       	ldi	r18, 0x33	; 51
     faa:	33 e3       	ldi	r19, 0x33	; 51
     fac:	43 ef       	ldi	r20, 0xF3	; 243
     fae:	5f eb       	ldi	r21, 0xBF	; 191
     fb0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     fb4:	dc 01       	movw	r26, r24
     fb6:	cb 01       	movw	r24, r22
     fb8:	bc 01       	movw	r22, r24
     fba:	cd 01       	movw	r24, r26
     fbc:	20 e0       	ldi	r18, 0x00	; 0
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	40 e7       	ldi	r20, 0x70	; 112
     fc2:	52 e4       	ldi	r21, 0x42	; 66
     fc4:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
     fc8:	dc 01       	movw	r26, r24
     fca:	cb 01       	movw	r24, r22
     fcc:	bc 01       	movw	r22, r24
     fce:	cd 01       	movw	r24, r26
     fd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fd4:	dc 01       	movw	r26, r24
     fd6:	cb 01       	movw	r24, r22
     fd8:	8a 30       	cpi	r24, 0x0A	; 10
     fda:	18 f4       	brcc	.+6      	; 0xfe2 <APP_timer1TickProccessing3+0x6a>
	{
		LCD_displayCharacter('0');
     fdc:	80 e3       	ldi	r24, 0x30	; 48
     fde:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <LCD_displayCharacter>
	}
	LCD_intgerToString((uint8)(60-(count/1.9)));
     fe2:	80 91 19 02 	lds	r24, 0x0219
     fe6:	88 2f       	mov	r24, r24
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	aa 27       	eor	r26, r26
     fec:	97 fd       	sbrc	r25, 7
     fee:	a0 95       	com	r26
     ff0:	ba 2f       	mov	r27, r26
     ff2:	bc 01       	movw	r22, r24
     ff4:	cd 01       	movw	r24, r26
     ff6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
     ffa:	dc 01       	movw	r26, r24
     ffc:	cb 01       	movw	r24, r22
     ffe:	bc 01       	movw	r22, r24
    1000:	cd 01       	movw	r24, r26
    1002:	23 e3       	ldi	r18, 0x33	; 51
    1004:	33 e3       	ldi	r19, 0x33	; 51
    1006:	43 ef       	ldi	r20, 0xF3	; 243
    1008:	5f eb       	ldi	r21, 0xBF	; 191
    100a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    100e:	dc 01       	movw	r26, r24
    1010:	cb 01       	movw	r24, r22
    1012:	bc 01       	movw	r22, r24
    1014:	cd 01       	movw	r24, r26
    1016:	20 e0       	ldi	r18, 0x00	; 0
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	40 e7       	ldi	r20, 0x70	; 112
    101c:	52 e4       	ldi	r21, 0x42	; 66
    101e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1022:	dc 01       	movw	r26, r24
    1024:	cb 01       	movw	r24, r22
    1026:	bc 01       	movw	r22, r24
    1028:	cd 01       	movw	r24, r26
    102a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    102e:	dc 01       	movw	r26, r24
    1030:	cb 01       	movw	r24, r22
    1032:	88 2f       	mov	r24, r24
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	0e 94 9a 1b 	call	0x3734	; 0x3734 <LCD_intgerToString>
	if(count==115)
    103a:	80 91 19 02 	lds	r24, 0x0219
    103e:	83 37       	cpi	r24, 0x73	; 115
    1040:	79 f4       	brne	.+30     	; 0x1060 <APP_timer1TickProccessing3+0xe8>
	{
		g_time=1;
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	a0 e0       	ldi	r26, 0x00	; 0
    1048:	b0 e0       	ldi	r27, 0x00	; 0
    104a:	80 93 12 02 	sts	0x0212, r24
    104e:	90 93 13 02 	sts	0x0213, r25
    1052:	a0 93 14 02 	sts	0x0214, r26
    1056:	b0 93 15 02 	sts	0x0215, r27
		count=0;
    105a:	10 92 19 02 	sts	0x0219, r1
    105e:	05 c0       	rjmp	.+10     	; 0x106a <APP_timer1TickProccessing3+0xf2>
		return;
	}
	count++;
    1060:	80 91 19 02 	lds	r24, 0x0219
    1064:	8f 5f       	subi	r24, 0xFF	; 255
    1066:	80 93 19 02 	sts	0x0219, r24
}
    106a:	cf 91       	pop	r28
    106c:	df 91       	pop	r29
    106e:	08 95       	ret

00001070 <APP_enterFirstPass>:

uint8 APP_enterFirstPass(void)
{
    1070:	df 93       	push	r29
    1072:	cf 93       	push	r28
    1074:	cd b7       	in	r28, 0x3d	; 61
    1076:	de b7       	in	r29, 0x3e	; 62
    1078:	60 97       	sbiw	r28, 0x10	; 16
    107a:	0f b6       	in	r0, 0x3f	; 63
    107c:	f8 94       	cli
    107e:	de bf       	out	0x3e, r29	; 62
    1080:	0f be       	out	0x3f, r0	; 63
    1082:	cd bf       	out	0x3d, r28	; 61
	uint8 key,i=0;
    1084:	1f 86       	std	Y+15, r1	; 0x0f
	LCD_clearScreen();
    1086:	0e 94 bd 1b 	call	0x377a	; 0x377a <LCD_clearScreen>
	LCD_displayString("Plz Enter Pass:");
    108a:	80 e6       	ldi	r24, 0x60	; 96
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	0e 94 16 1b 	call	0x362c	; 0x362c <LCD_displayString>
	LCD_moveCursor(1,0);
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	60 e0       	ldi	r22, 0x00	; 0
    1096:	0e 94 3f 1b 	call	0x367e	; 0x367e <LCD_moveCursor>
	while(1)
	{
		key=KEYPAD_getPressedKey();
    109a:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <KEYPAD_getPressedKey>
    109e:	88 8b       	std	Y+16, r24	; 0x10
		LCD_displayCharacter('*');
    10a0:	8a e2       	ldi	r24, 0x2A	; 42
    10a2:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <LCD_displayCharacter>
		if(i==4)
    10a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    10a8:	84 30       	cpi	r24, 0x04	; 4
    10aa:	91 f4       	brne	.+36     	; 0x10d0 <APP_enterFirstPass+0x60>
		{
			while(KEYPAD_getPressedKey()!='=');
    10ac:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <KEYPAD_getPressedKey>
    10b0:	8d 33       	cpi	r24, 0x3D	; 61
    10b2:	91 05       	cpc	r25, r1
    10b4:	d9 f7       	brne	.-10     	; 0x10ac <APP_enterFirstPass+0x3c>
			UART_sendByte(key);
    10b6:	88 89       	ldd	r24, Y+16	; 0x10
    10b8:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <UART_sendByte>
			return '1';
    10bc:	81 e3       	ldi	r24, 0x31	; 49
		UART_sendByte(key);
		_delay_ms(500);
		i++;
	}

}
    10be:	60 96       	adiw	r28, 0x10	; 16
    10c0:	0f b6       	in	r0, 0x3f	; 63
    10c2:	f8 94       	cli
    10c4:	de bf       	out	0x3e, r29	; 62
    10c6:	0f be       	out	0x3f, r0	; 63
    10c8:	cd bf       	out	0x3d, r28	; 61
    10ca:	cf 91       	pop	r28
    10cc:	df 91       	pop	r29
    10ce:	08 95       	ret
			while(KEYPAD_getPressedKey()!='=');
			UART_sendByte(key);
			return '1';
		}

		UART_sendByte(key);
    10d0:	88 89       	ldd	r24, Y+16	; 0x10
    10d2:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <UART_sendByte>
    10d6:	80 e0       	ldi	r24, 0x00	; 0
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	aa ef       	ldi	r26, 0xFA	; 250
    10dc:	b3 e4       	ldi	r27, 0x43	; 67
    10de:	8b 87       	std	Y+11, r24	; 0x0b
    10e0:	9c 87       	std	Y+12, r25	; 0x0c
    10e2:	ad 87       	std	Y+13, r26	; 0x0d
    10e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    10e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    10ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    10ee:	20 e0       	ldi	r18, 0x00	; 0
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	4a ef       	ldi	r20, 0xFA	; 250
    10f4:	54 e4       	ldi	r21, 0x44	; 68
    10f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10fa:	dc 01       	movw	r26, r24
    10fc:	cb 01       	movw	r24, r22
    10fe:	8f 83       	std	Y+7, r24	; 0x07
    1100:	98 87       	std	Y+8, r25	; 0x08
    1102:	a9 87       	std	Y+9, r26	; 0x09
    1104:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1106:	6f 81       	ldd	r22, Y+7	; 0x07
    1108:	78 85       	ldd	r23, Y+8	; 0x08
    110a:	89 85       	ldd	r24, Y+9	; 0x09
    110c:	9a 85       	ldd	r25, Y+10	; 0x0a
    110e:	20 e0       	ldi	r18, 0x00	; 0
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	40 e8       	ldi	r20, 0x80	; 128
    1114:	5f e3       	ldi	r21, 0x3F	; 63
    1116:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    111a:	88 23       	and	r24, r24
    111c:	2c f4       	brge	.+10     	; 0x1128 <APP_enterFirstPass+0xb8>
		__ticks = 1;
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	9e 83       	std	Y+6, r25	; 0x06
    1124:	8d 83       	std	Y+5, r24	; 0x05
    1126:	3f c0       	rjmp	.+126    	; 0x11a6 <APP_enterFirstPass+0x136>
	else if (__tmp > 65535)
    1128:	6f 81       	ldd	r22, Y+7	; 0x07
    112a:	78 85       	ldd	r23, Y+8	; 0x08
    112c:	89 85       	ldd	r24, Y+9	; 0x09
    112e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1130:	20 e0       	ldi	r18, 0x00	; 0
    1132:	3f ef       	ldi	r19, 0xFF	; 255
    1134:	4f e7       	ldi	r20, 0x7F	; 127
    1136:	57 e4       	ldi	r21, 0x47	; 71
    1138:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    113c:	18 16       	cp	r1, r24
    113e:	4c f5       	brge	.+82     	; 0x1192 <APP_enterFirstPass+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1140:	6b 85       	ldd	r22, Y+11	; 0x0b
    1142:	7c 85       	ldd	r23, Y+12	; 0x0c
    1144:	8d 85       	ldd	r24, Y+13	; 0x0d
    1146:	9e 85       	ldd	r25, Y+14	; 0x0e
    1148:	20 e0       	ldi	r18, 0x00	; 0
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	40 e2       	ldi	r20, 0x20	; 32
    114e:	51 e4       	ldi	r21, 0x41	; 65
    1150:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1154:	dc 01       	movw	r26, r24
    1156:	cb 01       	movw	r24, r22
    1158:	bc 01       	movw	r22, r24
    115a:	cd 01       	movw	r24, r26
    115c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1160:	dc 01       	movw	r26, r24
    1162:	cb 01       	movw	r24, r22
    1164:	9e 83       	std	Y+6, r25	; 0x06
    1166:	8d 83       	std	Y+5, r24	; 0x05
    1168:	0f c0       	rjmp	.+30     	; 0x1188 <APP_enterFirstPass+0x118>
    116a:	88 ec       	ldi	r24, 0xC8	; 200
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	9c 83       	std	Y+4, r25	; 0x04
    1170:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1172:	8b 81       	ldd	r24, Y+3	; 0x03
    1174:	9c 81       	ldd	r25, Y+4	; 0x04
    1176:	01 97       	sbiw	r24, 0x01	; 1
    1178:	f1 f7       	brne	.-4      	; 0x1176 <APP_enterFirstPass+0x106>
    117a:	9c 83       	std	Y+4, r25	; 0x04
    117c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    117e:	8d 81       	ldd	r24, Y+5	; 0x05
    1180:	9e 81       	ldd	r25, Y+6	; 0x06
    1182:	01 97       	sbiw	r24, 0x01	; 1
    1184:	9e 83       	std	Y+6, r25	; 0x06
    1186:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1188:	8d 81       	ldd	r24, Y+5	; 0x05
    118a:	9e 81       	ldd	r25, Y+6	; 0x06
    118c:	00 97       	sbiw	r24, 0x00	; 0
    118e:	69 f7       	brne	.-38     	; 0x116a <APP_enterFirstPass+0xfa>
    1190:	14 c0       	rjmp	.+40     	; 0x11ba <APP_enterFirstPass+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1192:	6f 81       	ldd	r22, Y+7	; 0x07
    1194:	78 85       	ldd	r23, Y+8	; 0x08
    1196:	89 85       	ldd	r24, Y+9	; 0x09
    1198:	9a 85       	ldd	r25, Y+10	; 0x0a
    119a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    119e:	dc 01       	movw	r26, r24
    11a0:	cb 01       	movw	r24, r22
    11a2:	9e 83       	std	Y+6, r25	; 0x06
    11a4:	8d 83       	std	Y+5, r24	; 0x05
    11a6:	8d 81       	ldd	r24, Y+5	; 0x05
    11a8:	9e 81       	ldd	r25, Y+6	; 0x06
    11aa:	9a 83       	std	Y+2, r25	; 0x02
    11ac:	89 83       	std	Y+1, r24	; 0x01
    11ae:	89 81       	ldd	r24, Y+1	; 0x01
    11b0:	9a 81       	ldd	r25, Y+2	; 0x02
    11b2:	01 97       	sbiw	r24, 0x01	; 1
    11b4:	f1 f7       	brne	.-4      	; 0x11b2 <APP_enterFirstPass+0x142>
    11b6:	9a 83       	std	Y+2, r25	; 0x02
    11b8:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		i++;
    11ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    11bc:	8f 5f       	subi	r24, 0xFF	; 255
    11be:	8f 87       	std	Y+15, r24	; 0x0f
    11c0:	6c cf       	rjmp	.-296    	; 0x109a <APP_enterFirstPass+0x2a>

000011c2 <APP_enterSecondPass>:
	}

}

uint8 APP_enterSecondPass(void)
{
    11c2:	df 93       	push	r29
    11c4:	cf 93       	push	r28
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62
    11ca:	60 97       	sbiw	r28, 0x10	; 16
    11cc:	0f b6       	in	r0, 0x3f	; 63
    11ce:	f8 94       	cli
    11d0:	de bf       	out	0x3e, r29	; 62
    11d2:	0f be       	out	0x3f, r0	; 63
    11d4:	cd bf       	out	0x3d, r28	; 61
	uint8 key,i=0;
    11d6:	1f 86       	std	Y+15, r1	; 0x0f
	LCD_clearScreen();
    11d8:	0e 94 bd 1b 	call	0x377a	; 0x377a <LCD_clearScreen>
	LCD_displayString("Plz Re-Enter the");
    11dc:	80 e7       	ldi	r24, 0x70	; 112
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	0e 94 16 1b 	call	0x362c	; 0x362c <LCD_displayString>
	LCD_moveCursor(1,0);
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	60 e0       	ldi	r22, 0x00	; 0
    11e8:	0e 94 3f 1b 	call	0x367e	; 0x367e <LCD_moveCursor>
	LCD_displayString("same pass: ");
    11ec:	81 e8       	ldi	r24, 0x81	; 129
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	0e 94 16 1b 	call	0x362c	; 0x362c <LCD_displayString>
	while(1)
	{
		key=KEYPAD_getPressedKey();
    11f4:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <KEYPAD_getPressedKey>
    11f8:	88 8b       	std	Y+16, r24	; 0x10
		LCD_displayCharacter('*');
    11fa:	8a e2       	ldi	r24, 0x2A	; 42
    11fc:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <LCD_displayCharacter>
		if(i==4)
    1200:	8f 85       	ldd	r24, Y+15	; 0x0f
    1202:	84 30       	cpi	r24, 0x04	; 4
    1204:	99 f4       	brne	.+38     	; 0x122c <APP_enterSecondPass+0x6a>
		{
			while(KEYPAD_getPressedKey()!='=');
    1206:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <KEYPAD_getPressedKey>
    120a:	8d 33       	cpi	r24, 0x3D	; 61
    120c:	91 05       	cpc	r25, r1
    120e:	d9 f7       	brne	.-10     	; 0x1206 <APP_enterSecondPass+0x44>
			UART_sendByte(key);
    1210:	88 89       	ldd	r24, Y+16	; 0x10
    1212:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <UART_sendByte>
			return UART_recieveByte();
    1216:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <UART_recieveByte>
		UART_sendByte(key);
		_delay_ms(500);
		i++;
	}

}
    121a:	60 96       	adiw	r28, 0x10	; 16
    121c:	0f b6       	in	r0, 0x3f	; 63
    121e:	f8 94       	cli
    1220:	de bf       	out	0x3e, r29	; 62
    1222:	0f be       	out	0x3f, r0	; 63
    1224:	cd bf       	out	0x3d, r28	; 61
    1226:	cf 91       	pop	r28
    1228:	df 91       	pop	r29
    122a:	08 95       	ret
			while(KEYPAD_getPressedKey()!='=');
			UART_sendByte(key);
			return UART_recieveByte();
		}

		UART_sendByte(key);
    122c:	88 89       	ldd	r24, Y+16	; 0x10
    122e:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <UART_sendByte>
    1232:	80 e0       	ldi	r24, 0x00	; 0
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	aa ef       	ldi	r26, 0xFA	; 250
    1238:	b3 e4       	ldi	r27, 0x43	; 67
    123a:	8b 87       	std	Y+11, r24	; 0x0b
    123c:	9c 87       	std	Y+12, r25	; 0x0c
    123e:	ad 87       	std	Y+13, r26	; 0x0d
    1240:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1242:	6b 85       	ldd	r22, Y+11	; 0x0b
    1244:	7c 85       	ldd	r23, Y+12	; 0x0c
    1246:	8d 85       	ldd	r24, Y+13	; 0x0d
    1248:	9e 85       	ldd	r25, Y+14	; 0x0e
    124a:	20 e0       	ldi	r18, 0x00	; 0
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	4a ef       	ldi	r20, 0xFA	; 250
    1250:	54 e4       	ldi	r21, 0x44	; 68
    1252:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1256:	dc 01       	movw	r26, r24
    1258:	cb 01       	movw	r24, r22
    125a:	8f 83       	std	Y+7, r24	; 0x07
    125c:	98 87       	std	Y+8, r25	; 0x08
    125e:	a9 87       	std	Y+9, r26	; 0x09
    1260:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1262:	6f 81       	ldd	r22, Y+7	; 0x07
    1264:	78 85       	ldd	r23, Y+8	; 0x08
    1266:	89 85       	ldd	r24, Y+9	; 0x09
    1268:	9a 85       	ldd	r25, Y+10	; 0x0a
    126a:	20 e0       	ldi	r18, 0x00	; 0
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	40 e8       	ldi	r20, 0x80	; 128
    1270:	5f e3       	ldi	r21, 0x3F	; 63
    1272:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1276:	88 23       	and	r24, r24
    1278:	2c f4       	brge	.+10     	; 0x1284 <APP_enterSecondPass+0xc2>
		__ticks = 1;
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	9e 83       	std	Y+6, r25	; 0x06
    1280:	8d 83       	std	Y+5, r24	; 0x05
    1282:	3f c0       	rjmp	.+126    	; 0x1302 <APP_enterSecondPass+0x140>
	else if (__tmp > 65535)
    1284:	6f 81       	ldd	r22, Y+7	; 0x07
    1286:	78 85       	ldd	r23, Y+8	; 0x08
    1288:	89 85       	ldd	r24, Y+9	; 0x09
    128a:	9a 85       	ldd	r25, Y+10	; 0x0a
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	3f ef       	ldi	r19, 0xFF	; 255
    1290:	4f e7       	ldi	r20, 0x7F	; 127
    1292:	57 e4       	ldi	r21, 0x47	; 71
    1294:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1298:	18 16       	cp	r1, r24
    129a:	4c f5       	brge	.+82     	; 0x12ee <APP_enterSecondPass+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    129c:	6b 85       	ldd	r22, Y+11	; 0x0b
    129e:	7c 85       	ldd	r23, Y+12	; 0x0c
    12a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    12a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    12a4:	20 e0       	ldi	r18, 0x00	; 0
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	40 e2       	ldi	r20, 0x20	; 32
    12aa:	51 e4       	ldi	r21, 0x41	; 65
    12ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12b0:	dc 01       	movw	r26, r24
    12b2:	cb 01       	movw	r24, r22
    12b4:	bc 01       	movw	r22, r24
    12b6:	cd 01       	movw	r24, r26
    12b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12bc:	dc 01       	movw	r26, r24
    12be:	cb 01       	movw	r24, r22
    12c0:	9e 83       	std	Y+6, r25	; 0x06
    12c2:	8d 83       	std	Y+5, r24	; 0x05
    12c4:	0f c0       	rjmp	.+30     	; 0x12e4 <APP_enterSecondPass+0x122>
    12c6:	88 ec       	ldi	r24, 0xC8	; 200
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	9c 83       	std	Y+4, r25	; 0x04
    12cc:	8b 83       	std	Y+3, r24	; 0x03
    12ce:	8b 81       	ldd	r24, Y+3	; 0x03
    12d0:	9c 81       	ldd	r25, Y+4	; 0x04
    12d2:	01 97       	sbiw	r24, 0x01	; 1
    12d4:	f1 f7       	brne	.-4      	; 0x12d2 <APP_enterSecondPass+0x110>
    12d6:	9c 83       	std	Y+4, r25	; 0x04
    12d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12da:	8d 81       	ldd	r24, Y+5	; 0x05
    12dc:	9e 81       	ldd	r25, Y+6	; 0x06
    12de:	01 97       	sbiw	r24, 0x01	; 1
    12e0:	9e 83       	std	Y+6, r25	; 0x06
    12e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12e4:	8d 81       	ldd	r24, Y+5	; 0x05
    12e6:	9e 81       	ldd	r25, Y+6	; 0x06
    12e8:	00 97       	sbiw	r24, 0x00	; 0
    12ea:	69 f7       	brne	.-38     	; 0x12c6 <APP_enterSecondPass+0x104>
    12ec:	14 c0       	rjmp	.+40     	; 0x1316 <APP_enterSecondPass+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12ee:	6f 81       	ldd	r22, Y+7	; 0x07
    12f0:	78 85       	ldd	r23, Y+8	; 0x08
    12f2:	89 85       	ldd	r24, Y+9	; 0x09
    12f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    12f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12fa:	dc 01       	movw	r26, r24
    12fc:	cb 01       	movw	r24, r22
    12fe:	9e 83       	std	Y+6, r25	; 0x06
    1300:	8d 83       	std	Y+5, r24	; 0x05
    1302:	8d 81       	ldd	r24, Y+5	; 0x05
    1304:	9e 81       	ldd	r25, Y+6	; 0x06
    1306:	9a 83       	std	Y+2, r25	; 0x02
    1308:	89 83       	std	Y+1, r24	; 0x01
    130a:	89 81       	ldd	r24, Y+1	; 0x01
    130c:	9a 81       	ldd	r25, Y+2	; 0x02
    130e:	01 97       	sbiw	r24, 0x01	; 1
    1310:	f1 f7       	brne	.-4      	; 0x130e <APP_enterSecondPass+0x14c>
    1312:	9a 83       	std	Y+2, r25	; 0x02
    1314:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		i++;
    1316:	8f 85       	ldd	r24, Y+15	; 0x0f
    1318:	8f 5f       	subi	r24, 0xFF	; 255
    131a:	8f 87       	std	Y+15, r24	; 0x0f
    131c:	6b cf       	rjmp	.-298    	; 0x11f4 <APP_enterSecondPass+0x32>

0000131e <APP_mainOptions>:
	}

}

uint8 APP_mainOptions(void)
{
    131e:	df 93       	push	r29
    1320:	cf 93       	push	r28
    1322:	cd b7       	in	r28, 0x3d	; 61
    1324:	de b7       	in	r29, 0x3e	; 62
    1326:	60 97       	sbiw	r28, 0x10	; 16
    1328:	0f b6       	in	r0, 0x3f	; 63
    132a:	f8 94       	cli
    132c:	de bf       	out	0x3e, r29	; 62
    132e:	0f be       	out	0x3f, r0	; 63
    1330:	cd bf       	out	0x3d, r28	; 61
	uint8 key;
	LCD_clearScreen();
    1332:	0e 94 bd 1b 	call	0x377a	; 0x377a <LCD_clearScreen>
	LCD_displayString("+ : Open Door");
    1336:	8d e8       	ldi	r24, 0x8D	; 141
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	0e 94 16 1b 	call	0x362c	; 0x362c <LCD_displayString>
	LCD_moveCursor(1,0);
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	60 e0       	ldi	r22, 0x00	; 0
    1342:	0e 94 3f 1b 	call	0x367e	; 0x367e <LCD_moveCursor>
	LCD_displayString("- : Change Pass");
    1346:	8b e9       	ldi	r24, 0x9B	; 155
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	0e 94 16 1b 	call	0x362c	; 0x362c <LCD_displayString>
	key=KEYPAD_getPressedKey();
    134e:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <KEYPAD_getPressedKey>
    1352:	8f 87       	std	Y+15, r24	; 0x0f
    1354:	80 e0       	ldi	r24, 0x00	; 0
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	aa ef       	ldi	r26, 0xFA	; 250
    135a:	b3 e4       	ldi	r27, 0x43	; 67
    135c:	8b 87       	std	Y+11, r24	; 0x0b
    135e:	9c 87       	std	Y+12, r25	; 0x0c
    1360:	ad 87       	std	Y+13, r26	; 0x0d
    1362:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1364:	6b 85       	ldd	r22, Y+11	; 0x0b
    1366:	7c 85       	ldd	r23, Y+12	; 0x0c
    1368:	8d 85       	ldd	r24, Y+13	; 0x0d
    136a:	9e 85       	ldd	r25, Y+14	; 0x0e
    136c:	20 e0       	ldi	r18, 0x00	; 0
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	4a ef       	ldi	r20, 0xFA	; 250
    1372:	54 e4       	ldi	r21, 0x44	; 68
    1374:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1378:	dc 01       	movw	r26, r24
    137a:	cb 01       	movw	r24, r22
    137c:	8f 83       	std	Y+7, r24	; 0x07
    137e:	98 87       	std	Y+8, r25	; 0x08
    1380:	a9 87       	std	Y+9, r26	; 0x09
    1382:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1384:	6f 81       	ldd	r22, Y+7	; 0x07
    1386:	78 85       	ldd	r23, Y+8	; 0x08
    1388:	89 85       	ldd	r24, Y+9	; 0x09
    138a:	9a 85       	ldd	r25, Y+10	; 0x0a
    138c:	20 e0       	ldi	r18, 0x00	; 0
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	40 e8       	ldi	r20, 0x80	; 128
    1392:	5f e3       	ldi	r21, 0x3F	; 63
    1394:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1398:	88 23       	and	r24, r24
    139a:	2c f4       	brge	.+10     	; 0x13a6 <APP_mainOptions+0x88>
		__ticks = 1;
    139c:	81 e0       	ldi	r24, 0x01	; 1
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	9e 83       	std	Y+6, r25	; 0x06
    13a2:	8d 83       	std	Y+5, r24	; 0x05
    13a4:	3f c0       	rjmp	.+126    	; 0x1424 <APP_mainOptions+0x106>
	else if (__tmp > 65535)
    13a6:	6f 81       	ldd	r22, Y+7	; 0x07
    13a8:	78 85       	ldd	r23, Y+8	; 0x08
    13aa:	89 85       	ldd	r24, Y+9	; 0x09
    13ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ae:	20 e0       	ldi	r18, 0x00	; 0
    13b0:	3f ef       	ldi	r19, 0xFF	; 255
    13b2:	4f e7       	ldi	r20, 0x7F	; 127
    13b4:	57 e4       	ldi	r21, 0x47	; 71
    13b6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    13ba:	18 16       	cp	r1, r24
    13bc:	4c f5       	brge	.+82     	; 0x1410 <APP_mainOptions+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13be:	6b 85       	ldd	r22, Y+11	; 0x0b
    13c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    13c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    13c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    13c6:	20 e0       	ldi	r18, 0x00	; 0
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	40 e2       	ldi	r20, 0x20	; 32
    13cc:	51 e4       	ldi	r21, 0x41	; 65
    13ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13d2:	dc 01       	movw	r26, r24
    13d4:	cb 01       	movw	r24, r22
    13d6:	bc 01       	movw	r22, r24
    13d8:	cd 01       	movw	r24, r26
    13da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13de:	dc 01       	movw	r26, r24
    13e0:	cb 01       	movw	r24, r22
    13e2:	9e 83       	std	Y+6, r25	; 0x06
    13e4:	8d 83       	std	Y+5, r24	; 0x05
    13e6:	0f c0       	rjmp	.+30     	; 0x1406 <APP_mainOptions+0xe8>
    13e8:	88 ec       	ldi	r24, 0xC8	; 200
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	9c 83       	std	Y+4, r25	; 0x04
    13ee:	8b 83       	std	Y+3, r24	; 0x03
    13f0:	8b 81       	ldd	r24, Y+3	; 0x03
    13f2:	9c 81       	ldd	r25, Y+4	; 0x04
    13f4:	01 97       	sbiw	r24, 0x01	; 1
    13f6:	f1 f7       	brne	.-4      	; 0x13f4 <APP_mainOptions+0xd6>
    13f8:	9c 83       	std	Y+4, r25	; 0x04
    13fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13fc:	8d 81       	ldd	r24, Y+5	; 0x05
    13fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1400:	01 97       	sbiw	r24, 0x01	; 1
    1402:	9e 83       	std	Y+6, r25	; 0x06
    1404:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1406:	8d 81       	ldd	r24, Y+5	; 0x05
    1408:	9e 81       	ldd	r25, Y+6	; 0x06
    140a:	00 97       	sbiw	r24, 0x00	; 0
    140c:	69 f7       	brne	.-38     	; 0x13e8 <APP_mainOptions+0xca>
    140e:	14 c0       	rjmp	.+40     	; 0x1438 <APP_mainOptions+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1410:	6f 81       	ldd	r22, Y+7	; 0x07
    1412:	78 85       	ldd	r23, Y+8	; 0x08
    1414:	89 85       	ldd	r24, Y+9	; 0x09
    1416:	9a 85       	ldd	r25, Y+10	; 0x0a
    1418:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    141c:	dc 01       	movw	r26, r24
    141e:	cb 01       	movw	r24, r22
    1420:	9e 83       	std	Y+6, r25	; 0x06
    1422:	8d 83       	std	Y+5, r24	; 0x05
    1424:	8d 81       	ldd	r24, Y+5	; 0x05
    1426:	9e 81       	ldd	r25, Y+6	; 0x06
    1428:	9a 83       	std	Y+2, r25	; 0x02
    142a:	89 83       	std	Y+1, r24	; 0x01
    142c:	89 81       	ldd	r24, Y+1	; 0x01
    142e:	9a 81       	ldd	r25, Y+2	; 0x02
    1430:	01 97       	sbiw	r24, 0x01	; 1
    1432:	f1 f7       	brne	.-4      	; 0x1430 <APP_mainOptions+0x112>
    1434:	9a 83       	std	Y+2, r25	; 0x02
    1436:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);

	if(key=='+'){
    1438:	8f 85       	ldd	r24, Y+15	; 0x0f
    143a:	8b 32       	cpi	r24, 0x2B	; 43
    143c:	31 f4       	brne	.+12     	; 0x144a <APP_mainOptions+0x12c>
		UART_sendByte('g');
    143e:	87 e6       	ldi	r24, 0x67	; 103
    1440:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <UART_sendByte>
		return '3';
    1444:	83 e3       	ldi	r24, 0x33	; 51
    1446:	88 8b       	std	Y+16, r24	; 0x10
    1448:	0b c0       	rjmp	.+22     	; 0x1460 <APP_mainOptions+0x142>
	}
	else if(key=='-')
    144a:	8f 85       	ldd	r24, Y+15	; 0x0f
    144c:	8d 32       	cpi	r24, 0x2D	; 45
    144e:	31 f4       	brne	.+12     	; 0x145c <APP_mainOptions+0x13e>
	{
		UART_sendByte('p');
    1450:	80 e7       	ldi	r24, 0x70	; 112
    1452:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <UART_sendByte>
		return '4';
    1456:	84 e3       	ldi	r24, 0x34	; 52
    1458:	88 8b       	std	Y+16, r24	; 0x10
    145a:	02 c0       	rjmp	.+4      	; 0x1460 <APP_mainOptions+0x142>
	}
	else return '2';
    145c:	82 e3       	ldi	r24, 0x32	; 50
    145e:	88 8b       	std	Y+16, r24	; 0x10
    1460:	88 89       	ldd	r24, Y+16	; 0x10

}
    1462:	60 96       	adiw	r28, 0x10	; 16
    1464:	0f b6       	in	r0, 0x3f	; 63
    1466:	f8 94       	cli
    1468:	de bf       	out	0x3e, r29	; 62
    146a:	0f be       	out	0x3f, r0	; 63
    146c:	cd bf       	out	0x3d, r28	; 61
    146e:	cf 91       	pop	r28
    1470:	df 91       	pop	r29
    1472:	08 95       	ret

00001474 <APP_passVerify>:

uint8 APP_passVerify(void)
{
    1474:	df 93       	push	r29
    1476:	cf 93       	push	r28
    1478:	cd b7       	in	r28, 0x3d	; 61
    147a:	de b7       	in	r29, 0x3e	; 62
    147c:	60 97       	sbiw	r28, 0x10	; 16
    147e:	0f b6       	in	r0, 0x3f	; 63
    1480:	f8 94       	cli
    1482:	de bf       	out	0x3e, r29	; 62
    1484:	0f be       	out	0x3f, r0	; 63
    1486:	cd bf       	out	0x3d, r28	; 61
	uint8 key,i=0;
    1488:	1f 86       	std	Y+15, r1	; 0x0f

	LCD_clearScreen();
    148a:	0e 94 bd 1b 	call	0x377a	; 0x377a <LCD_clearScreen>
	LCD_displayString("Plz Enter Pass:");
    148e:	80 e6       	ldi	r24, 0x60	; 96
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	0e 94 16 1b 	call	0x362c	; 0x362c <LCD_displayString>
	LCD_moveCursor(1,0);
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	60 e0       	ldi	r22, 0x00	; 0
    149a:	0e 94 3f 1b 	call	0x367e	; 0x367e <LCD_moveCursor>
	while(1)
	{
		key=KEYPAD_getPressedKey();
    149e:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <KEYPAD_getPressedKey>
    14a2:	88 8b       	std	Y+16, r24	; 0x10
		LCD_displayCharacter('*');
    14a4:	8a e2       	ldi	r24, 0x2A	; 42
    14a6:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <LCD_displayCharacter>
		if(i==4)
    14aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    14ac:	84 30       	cpi	r24, 0x04	; 4
    14ae:	99 f4       	brne	.+38     	; 0x14d6 <APP_passVerify+0x62>
		{
			while(KEYPAD_getPressedKey()!='=');
    14b0:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <KEYPAD_getPressedKey>
    14b4:	8d 33       	cpi	r24, 0x3D	; 61
    14b6:	91 05       	cpc	r25, r1
    14b8:	d9 f7       	brne	.-10     	; 0x14b0 <APP_passVerify+0x3c>
			UART_sendByte(key);
    14ba:	88 89       	ldd	r24, Y+16	; 0x10
    14bc:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <UART_sendByte>
			return UART_recieveByte();
    14c0:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <UART_recieveByte>

		UART_sendByte(key);
		_delay_ms(500);
		i++;
	}
}
    14c4:	60 96       	adiw	r28, 0x10	; 16
    14c6:	0f b6       	in	r0, 0x3f	; 63
    14c8:	f8 94       	cli
    14ca:	de bf       	out	0x3e, r29	; 62
    14cc:	0f be       	out	0x3f, r0	; 63
    14ce:	cd bf       	out	0x3d, r28	; 61
    14d0:	cf 91       	pop	r28
    14d2:	df 91       	pop	r29
    14d4:	08 95       	ret
			while(KEYPAD_getPressedKey()!='=');
			UART_sendByte(key);
			return UART_recieveByte();
		}

		UART_sendByte(key);
    14d6:	88 89       	ldd	r24, Y+16	; 0x10
    14d8:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <UART_sendByte>
    14dc:	80 e0       	ldi	r24, 0x00	; 0
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	aa ef       	ldi	r26, 0xFA	; 250
    14e2:	b3 e4       	ldi	r27, 0x43	; 67
    14e4:	8b 87       	std	Y+11, r24	; 0x0b
    14e6:	9c 87       	std	Y+12, r25	; 0x0c
    14e8:	ad 87       	std	Y+13, r26	; 0x0d
    14ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    14ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    14f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    14f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    14f4:	20 e0       	ldi	r18, 0x00	; 0
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	4a ef       	ldi	r20, 0xFA	; 250
    14fa:	54 e4       	ldi	r21, 0x44	; 68
    14fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1500:	dc 01       	movw	r26, r24
    1502:	cb 01       	movw	r24, r22
    1504:	8f 83       	std	Y+7, r24	; 0x07
    1506:	98 87       	std	Y+8, r25	; 0x08
    1508:	a9 87       	std	Y+9, r26	; 0x09
    150a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    150c:	6f 81       	ldd	r22, Y+7	; 0x07
    150e:	78 85       	ldd	r23, Y+8	; 0x08
    1510:	89 85       	ldd	r24, Y+9	; 0x09
    1512:	9a 85       	ldd	r25, Y+10	; 0x0a
    1514:	20 e0       	ldi	r18, 0x00	; 0
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	40 e8       	ldi	r20, 0x80	; 128
    151a:	5f e3       	ldi	r21, 0x3F	; 63
    151c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1520:	88 23       	and	r24, r24
    1522:	2c f4       	brge	.+10     	; 0x152e <APP_passVerify+0xba>
		__ticks = 1;
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	9e 83       	std	Y+6, r25	; 0x06
    152a:	8d 83       	std	Y+5, r24	; 0x05
    152c:	3f c0       	rjmp	.+126    	; 0x15ac <APP_passVerify+0x138>
	else if (__tmp > 65535)
    152e:	6f 81       	ldd	r22, Y+7	; 0x07
    1530:	78 85       	ldd	r23, Y+8	; 0x08
    1532:	89 85       	ldd	r24, Y+9	; 0x09
    1534:	9a 85       	ldd	r25, Y+10	; 0x0a
    1536:	20 e0       	ldi	r18, 0x00	; 0
    1538:	3f ef       	ldi	r19, 0xFF	; 255
    153a:	4f e7       	ldi	r20, 0x7F	; 127
    153c:	57 e4       	ldi	r21, 0x47	; 71
    153e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1542:	18 16       	cp	r1, r24
    1544:	4c f5       	brge	.+82     	; 0x1598 <APP_passVerify+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1546:	6b 85       	ldd	r22, Y+11	; 0x0b
    1548:	7c 85       	ldd	r23, Y+12	; 0x0c
    154a:	8d 85       	ldd	r24, Y+13	; 0x0d
    154c:	9e 85       	ldd	r25, Y+14	; 0x0e
    154e:	20 e0       	ldi	r18, 0x00	; 0
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	40 e2       	ldi	r20, 0x20	; 32
    1554:	51 e4       	ldi	r21, 0x41	; 65
    1556:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    155a:	dc 01       	movw	r26, r24
    155c:	cb 01       	movw	r24, r22
    155e:	bc 01       	movw	r22, r24
    1560:	cd 01       	movw	r24, r26
    1562:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1566:	dc 01       	movw	r26, r24
    1568:	cb 01       	movw	r24, r22
    156a:	9e 83       	std	Y+6, r25	; 0x06
    156c:	8d 83       	std	Y+5, r24	; 0x05
    156e:	0f c0       	rjmp	.+30     	; 0x158e <APP_passVerify+0x11a>
    1570:	88 ec       	ldi	r24, 0xC8	; 200
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	9c 83       	std	Y+4, r25	; 0x04
    1576:	8b 83       	std	Y+3, r24	; 0x03
    1578:	8b 81       	ldd	r24, Y+3	; 0x03
    157a:	9c 81       	ldd	r25, Y+4	; 0x04
    157c:	01 97       	sbiw	r24, 0x01	; 1
    157e:	f1 f7       	brne	.-4      	; 0x157c <APP_passVerify+0x108>
    1580:	9c 83       	std	Y+4, r25	; 0x04
    1582:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1584:	8d 81       	ldd	r24, Y+5	; 0x05
    1586:	9e 81       	ldd	r25, Y+6	; 0x06
    1588:	01 97       	sbiw	r24, 0x01	; 1
    158a:	9e 83       	std	Y+6, r25	; 0x06
    158c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    158e:	8d 81       	ldd	r24, Y+5	; 0x05
    1590:	9e 81       	ldd	r25, Y+6	; 0x06
    1592:	00 97       	sbiw	r24, 0x00	; 0
    1594:	69 f7       	brne	.-38     	; 0x1570 <APP_passVerify+0xfc>
    1596:	14 c0       	rjmp	.+40     	; 0x15c0 <APP_passVerify+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1598:	6f 81       	ldd	r22, Y+7	; 0x07
    159a:	78 85       	ldd	r23, Y+8	; 0x08
    159c:	89 85       	ldd	r24, Y+9	; 0x09
    159e:	9a 85       	ldd	r25, Y+10	; 0x0a
    15a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15a4:	dc 01       	movw	r26, r24
    15a6:	cb 01       	movw	r24, r22
    15a8:	9e 83       	std	Y+6, r25	; 0x06
    15aa:	8d 83       	std	Y+5, r24	; 0x05
    15ac:	8d 81       	ldd	r24, Y+5	; 0x05
    15ae:	9e 81       	ldd	r25, Y+6	; 0x06
    15b0:	9a 83       	std	Y+2, r25	; 0x02
    15b2:	89 83       	std	Y+1, r24	; 0x01
    15b4:	89 81       	ldd	r24, Y+1	; 0x01
    15b6:	9a 81       	ldd	r25, Y+2	; 0x02
    15b8:	01 97       	sbiw	r24, 0x01	; 1
    15ba:	f1 f7       	brne	.-4      	; 0x15b8 <APP_passVerify+0x144>
    15bc:	9a 83       	std	Y+2, r25	; 0x02
    15be:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		i++;
    15c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    15c2:	8f 5f       	subi	r24, 0xFF	; 255
    15c4:	8f 87       	std	Y+15, r24	; 0x0f
    15c6:	6b cf       	rjmp	.-298    	; 0x149e <APP_passVerify+0x2a>

000015c8 <APP_wrongInput>:
	}
}

uint8 APP_wrongInput(void)
{
    15c8:	df 93       	push	r29
    15ca:	cf 93       	push	r28
    15cc:	cd b7       	in	r28, 0x3d	; 61
    15ce:	de b7       	in	r29, 0x3e	; 62
    15d0:	61 97       	sbiw	r28, 0x11	; 17
    15d2:	0f b6       	in	r0, 0x3f	; 63
    15d4:	f8 94       	cli
    15d6:	de bf       	out	0x3e, r29	; 62
    15d8:	0f be       	out	0x3f, r0	; 63
    15da:	cd bf       	out	0x3d, r28	; 61
	if (g_count==2)
    15dc:	80 91 16 02 	lds	r24, 0x0216
    15e0:	82 30       	cpi	r24, 0x02	; 2
    15e2:	71 f4       	brne	.+28     	; 0x1600 <APP_wrongInput+0x38>
	{
		UART_sendByte('e');
    15e4:	85 e6       	ldi	r24, 0x65	; 101
    15e6:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <UART_sendByte>
		APP_alarm();
    15ea:	0e 94 3f 0c 	call	0x187e	; 0x187e <APP_alarm>
		while(UART_recieveByte()!='o');
    15ee:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <UART_recieveByte>
    15f2:	8f 36       	cpi	r24, 0x6F	; 111
    15f4:	e1 f7       	brne	.-8      	; 0x15ee <APP_wrongInput+0x26>
		g_count=0;
    15f6:	10 92 16 02 	sts	0x0216, r1
		return '2';
    15fa:	82 e3       	ldi	r24, 0x32	; 50
    15fc:	89 8b       	std	Y+17, r24	; 0x11
    15fe:	a1 c0       	rjmp	.+322    	; 0x1742 <APP_wrongInput+0x17a>
	}
	g_count++;
    1600:	80 91 16 02 	lds	r24, 0x0216
    1604:	8f 5f       	subi	r24, 0xFF	; 255
    1606:	80 93 16 02 	sts	0x0216, r24
	uint8 key,i=0;
    160a:	1f 86       	std	Y+15, r1	; 0x0f
	UART_sendByte('r');
    160c:	82 e7       	ldi	r24, 0x72	; 114
    160e:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <UART_sendByte>
	LCD_clearScreen();
    1612:	0e 94 bd 1b 	call	0x377a	; 0x377a <LCD_clearScreen>
	LCD_displayString("Plz Enter Pass:");
    1616:	80 e6       	ldi	r24, 0x60	; 96
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	0e 94 16 1b 	call	0x362c	; 0x362c <LCD_displayString>
	LCD_moveCursor(1,0);
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	60 e0       	ldi	r22, 0x00	; 0
    1622:	0e 94 3f 1b 	call	0x367e	; 0x367e <LCD_moveCursor>
	while(1)
	{
		key=KEYPAD_getPressedKey();
    1626:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <KEYPAD_getPressedKey>
    162a:	88 8b       	std	Y+16, r24	; 0x10
		LCD_displayCharacter('*');
    162c:	8a e2       	ldi	r24, 0x2A	; 42
    162e:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <LCD_displayCharacter>
		if(i==4)
    1632:	8f 85       	ldd	r24, Y+15	; 0x0f
    1634:	84 30       	cpi	r24, 0x04	; 4
    1636:	61 f4       	brne	.+24     	; 0x1650 <APP_wrongInput+0x88>
		{
			while(KEYPAD_getPressedKey()!='=');
    1638:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <KEYPAD_getPressedKey>
    163c:	8d 33       	cpi	r24, 0x3D	; 61
    163e:	91 05       	cpc	r25, r1
    1640:	d9 f7       	brne	.-10     	; 0x1638 <APP_wrongInput+0x70>
			UART_sendByte(key);
    1642:	88 89       	ldd	r24, Y+16	; 0x10
    1644:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <UART_sendByte>
			return UART_recieveByte();
    1648:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <UART_recieveByte>
    164c:	89 8b       	std	Y+17, r24	; 0x11
    164e:	79 c0       	rjmp	.+242    	; 0x1742 <APP_wrongInput+0x17a>
		}

		UART_sendByte(key);
    1650:	88 89       	ldd	r24, Y+16	; 0x10
    1652:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <UART_sendByte>
    1656:	80 e0       	ldi	r24, 0x00	; 0
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	aa ef       	ldi	r26, 0xFA	; 250
    165c:	b3 e4       	ldi	r27, 0x43	; 67
    165e:	8b 87       	std	Y+11, r24	; 0x0b
    1660:	9c 87       	std	Y+12, r25	; 0x0c
    1662:	ad 87       	std	Y+13, r26	; 0x0d
    1664:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1666:	6b 85       	ldd	r22, Y+11	; 0x0b
    1668:	7c 85       	ldd	r23, Y+12	; 0x0c
    166a:	8d 85       	ldd	r24, Y+13	; 0x0d
    166c:	9e 85       	ldd	r25, Y+14	; 0x0e
    166e:	20 e0       	ldi	r18, 0x00	; 0
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	4a ef       	ldi	r20, 0xFA	; 250
    1674:	54 e4       	ldi	r21, 0x44	; 68
    1676:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    167a:	dc 01       	movw	r26, r24
    167c:	cb 01       	movw	r24, r22
    167e:	8f 83       	std	Y+7, r24	; 0x07
    1680:	98 87       	std	Y+8, r25	; 0x08
    1682:	a9 87       	std	Y+9, r26	; 0x09
    1684:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1686:	6f 81       	ldd	r22, Y+7	; 0x07
    1688:	78 85       	ldd	r23, Y+8	; 0x08
    168a:	89 85       	ldd	r24, Y+9	; 0x09
    168c:	9a 85       	ldd	r25, Y+10	; 0x0a
    168e:	20 e0       	ldi	r18, 0x00	; 0
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	40 e8       	ldi	r20, 0x80	; 128
    1694:	5f e3       	ldi	r21, 0x3F	; 63
    1696:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    169a:	88 23       	and	r24, r24
    169c:	2c f4       	brge	.+10     	; 0x16a8 <APP_wrongInput+0xe0>
		__ticks = 1;
    169e:	81 e0       	ldi	r24, 0x01	; 1
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	9e 83       	std	Y+6, r25	; 0x06
    16a4:	8d 83       	std	Y+5, r24	; 0x05
    16a6:	3f c0       	rjmp	.+126    	; 0x1726 <APP_wrongInput+0x15e>
	else if (__tmp > 65535)
    16a8:	6f 81       	ldd	r22, Y+7	; 0x07
    16aa:	78 85       	ldd	r23, Y+8	; 0x08
    16ac:	89 85       	ldd	r24, Y+9	; 0x09
    16ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	3f ef       	ldi	r19, 0xFF	; 255
    16b4:	4f e7       	ldi	r20, 0x7F	; 127
    16b6:	57 e4       	ldi	r21, 0x47	; 71
    16b8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16bc:	18 16       	cp	r1, r24
    16be:	4c f5       	brge	.+82     	; 0x1712 <APP_wrongInput+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    16c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    16c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    16c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    16c8:	20 e0       	ldi	r18, 0x00	; 0
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	40 e2       	ldi	r20, 0x20	; 32
    16ce:	51 e4       	ldi	r21, 0x41	; 65
    16d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16d4:	dc 01       	movw	r26, r24
    16d6:	cb 01       	movw	r24, r22
    16d8:	bc 01       	movw	r22, r24
    16da:	cd 01       	movw	r24, r26
    16dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16e0:	dc 01       	movw	r26, r24
    16e2:	cb 01       	movw	r24, r22
    16e4:	9e 83       	std	Y+6, r25	; 0x06
    16e6:	8d 83       	std	Y+5, r24	; 0x05
    16e8:	0f c0       	rjmp	.+30     	; 0x1708 <APP_wrongInput+0x140>
    16ea:	88 ec       	ldi	r24, 0xC8	; 200
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	9c 83       	std	Y+4, r25	; 0x04
    16f0:	8b 83       	std	Y+3, r24	; 0x03
    16f2:	8b 81       	ldd	r24, Y+3	; 0x03
    16f4:	9c 81       	ldd	r25, Y+4	; 0x04
    16f6:	01 97       	sbiw	r24, 0x01	; 1
    16f8:	f1 f7       	brne	.-4      	; 0x16f6 <APP_wrongInput+0x12e>
    16fa:	9c 83       	std	Y+4, r25	; 0x04
    16fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1700:	9e 81       	ldd	r25, Y+6	; 0x06
    1702:	01 97       	sbiw	r24, 0x01	; 1
    1704:	9e 83       	std	Y+6, r25	; 0x06
    1706:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1708:	8d 81       	ldd	r24, Y+5	; 0x05
    170a:	9e 81       	ldd	r25, Y+6	; 0x06
    170c:	00 97       	sbiw	r24, 0x00	; 0
    170e:	69 f7       	brne	.-38     	; 0x16ea <APP_wrongInput+0x122>
    1710:	14 c0       	rjmp	.+40     	; 0x173a <APP_wrongInput+0x172>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1712:	6f 81       	ldd	r22, Y+7	; 0x07
    1714:	78 85       	ldd	r23, Y+8	; 0x08
    1716:	89 85       	ldd	r24, Y+9	; 0x09
    1718:	9a 85       	ldd	r25, Y+10	; 0x0a
    171a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    171e:	dc 01       	movw	r26, r24
    1720:	cb 01       	movw	r24, r22
    1722:	9e 83       	std	Y+6, r25	; 0x06
    1724:	8d 83       	std	Y+5, r24	; 0x05
    1726:	8d 81       	ldd	r24, Y+5	; 0x05
    1728:	9e 81       	ldd	r25, Y+6	; 0x06
    172a:	9a 83       	std	Y+2, r25	; 0x02
    172c:	89 83       	std	Y+1, r24	; 0x01
    172e:	89 81       	ldd	r24, Y+1	; 0x01
    1730:	9a 81       	ldd	r25, Y+2	; 0x02
    1732:	01 97       	sbiw	r24, 0x01	; 1
    1734:	f1 f7       	brne	.-4      	; 0x1732 <APP_wrongInput+0x16a>
    1736:	9a 83       	std	Y+2, r25	; 0x02
    1738:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		i++;
    173a:	8f 85       	ldd	r24, Y+15	; 0x0f
    173c:	8f 5f       	subi	r24, 0xFF	; 255
    173e:	8f 87       	std	Y+15, r24	; 0x0f
    1740:	72 cf       	rjmp	.-284    	; 0x1626 <APP_wrongInput+0x5e>
	}
    1742:	89 89       	ldd	r24, Y+17	; 0x11

	return UART_recieveByte();
}
    1744:	61 96       	adiw	r28, 0x11	; 17
    1746:	0f b6       	in	r0, 0x3f	; 63
    1748:	f8 94       	cli
    174a:	de bf       	out	0x3e, r29	; 62
    174c:	0f be       	out	0x3f, r0	; 63
    174e:	cd bf       	out	0x3d, r28	; 61
    1750:	cf 91       	pop	r28
    1752:	df 91       	pop	r29
    1754:	08 95       	ret

00001756 <APP_gateOpening>:


uint8 APP_gateOpening(void)
{
    1756:	df 93       	push	r29
    1758:	cf 93       	push	r28
    175a:	cd b7       	in	r28, 0x3d	; 61
    175c:	de b7       	in	r29, 0x3e	; 62
    175e:	2b 97       	sbiw	r28, 0x0b	; 11
    1760:	0f b6       	in	r0, 0x3f	; 63
    1762:	f8 94       	cli
    1764:	de bf       	out	0x3e, r29	; 62
    1766:	0f be       	out	0x3f, r0	; 63
    1768:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    176a:	0e 94 bd 1b 	call	0x377a	; 0x377a <LCD_clearScreen>
	LCD_displayString("Door is Opening");
    176e:	8b ea       	ldi	r24, 0xAB	; 171
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	0e 94 16 1b 	call	0x362c	; 0x362c <LCD_displayString>
	Timer1_setCallBack(&APP_timer1TickProccessing1);
    1776:	8e e7       	ldi	r24, 0x7E	; 126
    1778:	97 e0       	ldi	r25, 0x07	; 7
    177a:	0e 94 a1 1c 	call	0x3942	; 0x3942 <Timer1_setCallBack>
	Timer1_ConfigType Timer1_Config={TIMER1_DEFAULT_INITIAL,TIMER1_NOT_COMPARE,Prescaler_64,Timer1_Normal_Mode};
    177e:	ce 01       	movw	r24, r28
    1780:	01 96       	adiw	r24, 0x01	; 1
    1782:	98 87       	std	Y+8, r25	; 0x08
    1784:	8f 83       	std	Y+7, r24	; 0x07
    1786:	e5 e0       	ldi	r30, 0x05	; 5
    1788:	f2 e0       	ldi	r31, 0x02	; 2
    178a:	fa 87       	std	Y+10, r31	; 0x0a
    178c:	e9 87       	std	Y+9, r30	; 0x09
    178e:	f6 e0       	ldi	r31, 0x06	; 6
    1790:	fb 87       	std	Y+11, r31	; 0x0b
    1792:	e9 85       	ldd	r30, Y+9	; 0x09
    1794:	fa 85       	ldd	r31, Y+10	; 0x0a
    1796:	00 80       	ld	r0, Z
    1798:	89 85       	ldd	r24, Y+9	; 0x09
    179a:	9a 85       	ldd	r25, Y+10	; 0x0a
    179c:	01 96       	adiw	r24, 0x01	; 1
    179e:	9a 87       	std	Y+10, r25	; 0x0a
    17a0:	89 87       	std	Y+9, r24	; 0x09
    17a2:	ef 81       	ldd	r30, Y+7	; 0x07
    17a4:	f8 85       	ldd	r31, Y+8	; 0x08
    17a6:	00 82       	st	Z, r0
    17a8:	8f 81       	ldd	r24, Y+7	; 0x07
    17aa:	98 85       	ldd	r25, Y+8	; 0x08
    17ac:	01 96       	adiw	r24, 0x01	; 1
    17ae:	98 87       	std	Y+8, r25	; 0x08
    17b0:	8f 83       	std	Y+7, r24	; 0x07
    17b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    17b4:	91 50       	subi	r25, 0x01	; 1
    17b6:	9b 87       	std	Y+11, r25	; 0x0b
    17b8:	eb 85       	ldd	r30, Y+11	; 0x0b
    17ba:	ee 23       	and	r30, r30
    17bc:	51 f7       	brne	.-44     	; 0x1792 <APP_gateOpening+0x3c>
	Timer1_init(&Timer1_Config);
    17be:	ce 01       	movw	r24, r28
    17c0:	01 96       	adiw	r24, 0x01	; 1
    17c2:	0e 94 2d 1c 	call	0x385a	; 0x385a <Timer1_init>
	while(!g_time);
    17c6:	80 91 12 02 	lds	r24, 0x0212
    17ca:	90 91 13 02 	lds	r25, 0x0213
    17ce:	a0 91 14 02 	lds	r26, 0x0214
    17d2:	b0 91 15 02 	lds	r27, 0x0215
    17d6:	00 97       	sbiw	r24, 0x00	; 0
    17d8:	a1 05       	cpc	r26, r1
    17da:	b1 05       	cpc	r27, r1
    17dc:	a1 f3       	breq	.-24     	; 0x17c6 <APP_gateOpening+0x70>
	g_time=0;
    17de:	10 92 12 02 	sts	0x0212, r1
    17e2:	10 92 13 02 	sts	0x0213, r1
    17e6:	10 92 14 02 	sts	0x0214, r1
    17ea:	10 92 15 02 	sts	0x0215, r1
	Timer1_setCallBack(&APP_timer1TickProccessing2);
    17ee:	8d e9       	ldi	r24, 0x9D	; 157
    17f0:	97 e0       	ldi	r25, 0x07	; 7
    17f2:	0e 94 a1 1c 	call	0x3942	; 0x3942 <Timer1_setCallBack>
	LCD_clearScreen();
    17f6:	0e 94 bd 1b 	call	0x377a	; 0x377a <LCD_clearScreen>
	LCD_displayString("Door is Open");
    17fa:	8b eb       	ldi	r24, 0xBB	; 187
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	0e 94 16 1b 	call	0x362c	; 0x362c <LCD_displayString>
	while(!g_time);
    1802:	80 91 12 02 	lds	r24, 0x0212
    1806:	90 91 13 02 	lds	r25, 0x0213
    180a:	a0 91 14 02 	lds	r26, 0x0214
    180e:	b0 91 15 02 	lds	r27, 0x0215
    1812:	00 97       	sbiw	r24, 0x00	; 0
    1814:	a1 05       	cpc	r26, r1
    1816:	b1 05       	cpc	r27, r1
    1818:	a1 f3       	breq	.-24     	; 0x1802 <APP_gateOpening+0xac>
	g_time=0;
    181a:	10 92 12 02 	sts	0x0212, r1
    181e:	10 92 13 02 	sts	0x0213, r1
    1822:	10 92 14 02 	sts	0x0214, r1
    1826:	10 92 15 02 	sts	0x0215, r1
	Timer1_setCallBack(&APP_timer1TickProccessing1);
    182a:	8e e7       	ldi	r24, 0x7E	; 126
    182c:	97 e0       	ldi	r25, 0x07	; 7
    182e:	0e 94 a1 1c 	call	0x3942	; 0x3942 <Timer1_setCallBack>
	LCD_clearScreen();
    1832:	0e 94 bd 1b 	call	0x377a	; 0x377a <LCD_clearScreen>
	LCD_displayString("Door is Closing");
    1836:	88 ec       	ldi	r24, 0xC8	; 200
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	0e 94 16 1b 	call	0x362c	; 0x362c <LCD_displayString>
	while(!g_time);
    183e:	80 91 12 02 	lds	r24, 0x0212
    1842:	90 91 13 02 	lds	r25, 0x0213
    1846:	a0 91 14 02 	lds	r26, 0x0214
    184a:	b0 91 15 02 	lds	r27, 0x0215
    184e:	00 97       	sbiw	r24, 0x00	; 0
    1850:	a1 05       	cpc	r26, r1
    1852:	b1 05       	cpc	r27, r1
    1854:	a1 f3       	breq	.-24     	; 0x183e <APP_gateOpening+0xe8>
	g_time=0;
    1856:	10 92 12 02 	sts	0x0212, r1
    185a:	10 92 13 02 	sts	0x0213, r1
    185e:	10 92 14 02 	sts	0x0214, r1
    1862:	10 92 15 02 	sts	0x0215, r1
	Timer1_deInit();
    1866:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <Timer1_deInit>
	return '2';
    186a:	82 e3       	ldi	r24, 0x32	; 50
}
    186c:	2b 96       	adiw	r28, 0x0b	; 11
    186e:	0f b6       	in	r0, 0x3f	; 63
    1870:	f8 94       	cli
    1872:	de bf       	out	0x3e, r29	; 62
    1874:	0f be       	out	0x3f, r0	; 63
    1876:	cd bf       	out	0x3d, r28	; 61
    1878:	cf 91       	pop	r28
    187a:	df 91       	pop	r29
    187c:	08 95       	ret

0000187e <APP_alarm>:

void APP_alarm(void)
{
    187e:	df 93       	push	r29
    1880:	cf 93       	push	r28
    1882:	cd b7       	in	r28, 0x3d	; 61
    1884:	de b7       	in	r29, 0x3e	; 62
    1886:	2b 97       	sbiw	r28, 0x0b	; 11
    1888:	0f b6       	in	r0, 0x3f	; 63
    188a:	f8 94       	cli
    188c:	de bf       	out	0x3e, r29	; 62
    188e:	0f be       	out	0x3f, r0	; 63
    1890:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    1892:	0e 94 bd 1b 	call	0x377a	; 0x377a <LCD_clearScreen>
	LCD_displayString("WRONG PASSWORD");
    1896:	88 ed       	ldi	r24, 0xD8	; 216
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	0e 94 16 1b 	call	0x362c	; 0x362c <LCD_displayString>
	LCD_moveCursor(1,0);
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	60 e0       	ldi	r22, 0x00	; 0
    18a2:	0e 94 3f 1b 	call	0x367e	; 0x367e <LCD_moveCursor>
	LCD_displayString("SYSTEM LOCKED ");
    18a6:	87 ee       	ldi	r24, 0xE7	; 231
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	0e 94 16 1b 	call	0x362c	; 0x362c <LCD_displayString>
	Timer1_setCallBack(&APP_timer1TickProccessing3);
    18ae:	8c eb       	ldi	r24, 0xBC	; 188
    18b0:	97 e0       	ldi	r25, 0x07	; 7
    18b2:	0e 94 a1 1c 	call	0x3942	; 0x3942 <Timer1_setCallBack>
	Timer1_ConfigType Timer1_Config={TIMER1_DEFAULT_INITIAL,TIMER1_NOT_COMPARE,Prescaler_64,Timer1_Normal_Mode};
    18b6:	ce 01       	movw	r24, r28
    18b8:	01 96       	adiw	r24, 0x01	; 1
    18ba:	98 87       	std	Y+8, r25	; 0x08
    18bc:	8f 83       	std	Y+7, r24	; 0x07
    18be:	eb e0       	ldi	r30, 0x0B	; 11
    18c0:	f2 e0       	ldi	r31, 0x02	; 2
    18c2:	fa 87       	std	Y+10, r31	; 0x0a
    18c4:	e9 87       	std	Y+9, r30	; 0x09
    18c6:	f6 e0       	ldi	r31, 0x06	; 6
    18c8:	fb 87       	std	Y+11, r31	; 0x0b
    18ca:	e9 85       	ldd	r30, Y+9	; 0x09
    18cc:	fa 85       	ldd	r31, Y+10	; 0x0a
    18ce:	00 80       	ld	r0, Z
    18d0:	89 85       	ldd	r24, Y+9	; 0x09
    18d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    18d4:	01 96       	adiw	r24, 0x01	; 1
    18d6:	9a 87       	std	Y+10, r25	; 0x0a
    18d8:	89 87       	std	Y+9, r24	; 0x09
    18da:	ef 81       	ldd	r30, Y+7	; 0x07
    18dc:	f8 85       	ldd	r31, Y+8	; 0x08
    18de:	00 82       	st	Z, r0
    18e0:	8f 81       	ldd	r24, Y+7	; 0x07
    18e2:	98 85       	ldd	r25, Y+8	; 0x08
    18e4:	01 96       	adiw	r24, 0x01	; 1
    18e6:	98 87       	std	Y+8, r25	; 0x08
    18e8:	8f 83       	std	Y+7, r24	; 0x07
    18ea:	9b 85       	ldd	r25, Y+11	; 0x0b
    18ec:	91 50       	subi	r25, 0x01	; 1
    18ee:	9b 87       	std	Y+11, r25	; 0x0b
    18f0:	eb 85       	ldd	r30, Y+11	; 0x0b
    18f2:	ee 23       	and	r30, r30
    18f4:	51 f7       	brne	.-44     	; 0x18ca <APP_alarm+0x4c>
	Timer1_init(&Timer1_Config);
    18f6:	ce 01       	movw	r24, r28
    18f8:	01 96       	adiw	r24, 0x01	; 1
    18fa:	0e 94 2d 1c 	call	0x385a	; 0x385a <Timer1_init>
	while(!g_time);
    18fe:	80 91 12 02 	lds	r24, 0x0212
    1902:	90 91 13 02 	lds	r25, 0x0213
    1906:	a0 91 14 02 	lds	r26, 0x0214
    190a:	b0 91 15 02 	lds	r27, 0x0215
    190e:	00 97       	sbiw	r24, 0x00	; 0
    1910:	a1 05       	cpc	r26, r1
    1912:	b1 05       	cpc	r27, r1
    1914:	a1 f3       	breq	.-24     	; 0x18fe <APP_alarm+0x80>
	Timer1_deInit();
    1916:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <Timer1_deInit>
	g_time=0;
    191a:	10 92 12 02 	sts	0x0212, r1
    191e:	10 92 13 02 	sts	0x0213, r1
    1922:	10 92 14 02 	sts	0x0214, r1
    1926:	10 92 15 02 	sts	0x0215, r1
}
    192a:	2b 96       	adiw	r28, 0x0b	; 11
    192c:	0f b6       	in	r0, 0x3f	; 63
    192e:	f8 94       	cli
    1930:	de bf       	out	0x3e, r29	; 62
    1932:	0f be       	out	0x3f, r0	; 63
    1934:	cd bf       	out	0x3d, r28	; 61
    1936:	cf 91       	pop	r28
    1938:	df 91       	pop	r29
    193a:	08 95       	ret

0000193c <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    193c:	df 93       	push	r29
    193e:	cf 93       	push	r28
    1940:	00 d0       	rcall	.+0      	; 0x1942 <GPIO_setupPinDirection+0x6>
    1942:	00 d0       	rcall	.+0      	; 0x1944 <GPIO_setupPinDirection+0x8>
    1944:	0f 92       	push	r0
    1946:	cd b7       	in	r28, 0x3d	; 61
    1948:	de b7       	in	r29, 0x3e	; 62
    194a:	89 83       	std	Y+1, r24	; 0x01
    194c:	6a 83       	std	Y+2, r22	; 0x02
    194e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1950:	8a 81       	ldd	r24, Y+2	; 0x02
    1952:	88 30       	cpi	r24, 0x08	; 8
    1954:	08 f0       	brcs	.+2      	; 0x1958 <GPIO_setupPinDirection+0x1c>
    1956:	d5 c0       	rjmp	.+426    	; 0x1b02 <GPIO_setupPinDirection+0x1c6>
    1958:	89 81       	ldd	r24, Y+1	; 0x01
    195a:	84 30       	cpi	r24, 0x04	; 4
    195c:	08 f0       	brcs	.+2      	; 0x1960 <GPIO_setupPinDirection+0x24>
    195e:	d1 c0       	rjmp	.+418    	; 0x1b02 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1960:	89 81       	ldd	r24, Y+1	; 0x01
    1962:	28 2f       	mov	r18, r24
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	3d 83       	std	Y+5, r19	; 0x05
    1968:	2c 83       	std	Y+4, r18	; 0x04
    196a:	8c 81       	ldd	r24, Y+4	; 0x04
    196c:	9d 81       	ldd	r25, Y+5	; 0x05
    196e:	81 30       	cpi	r24, 0x01	; 1
    1970:	91 05       	cpc	r25, r1
    1972:	09 f4       	brne	.+2      	; 0x1976 <GPIO_setupPinDirection+0x3a>
    1974:	43 c0       	rjmp	.+134    	; 0x19fc <GPIO_setupPinDirection+0xc0>
    1976:	2c 81       	ldd	r18, Y+4	; 0x04
    1978:	3d 81       	ldd	r19, Y+5	; 0x05
    197a:	22 30       	cpi	r18, 0x02	; 2
    197c:	31 05       	cpc	r19, r1
    197e:	2c f4       	brge	.+10     	; 0x198a <GPIO_setupPinDirection+0x4e>
    1980:	8c 81       	ldd	r24, Y+4	; 0x04
    1982:	9d 81       	ldd	r25, Y+5	; 0x05
    1984:	00 97       	sbiw	r24, 0x00	; 0
    1986:	71 f0       	breq	.+28     	; 0x19a4 <GPIO_setupPinDirection+0x68>
    1988:	bc c0       	rjmp	.+376    	; 0x1b02 <GPIO_setupPinDirection+0x1c6>
    198a:	2c 81       	ldd	r18, Y+4	; 0x04
    198c:	3d 81       	ldd	r19, Y+5	; 0x05
    198e:	22 30       	cpi	r18, 0x02	; 2
    1990:	31 05       	cpc	r19, r1
    1992:	09 f4       	brne	.+2      	; 0x1996 <GPIO_setupPinDirection+0x5a>
    1994:	5f c0       	rjmp	.+190    	; 0x1a54 <GPIO_setupPinDirection+0x118>
    1996:	8c 81       	ldd	r24, Y+4	; 0x04
    1998:	9d 81       	ldd	r25, Y+5	; 0x05
    199a:	83 30       	cpi	r24, 0x03	; 3
    199c:	91 05       	cpc	r25, r1
    199e:	09 f4       	brne	.+2      	; 0x19a2 <GPIO_setupPinDirection+0x66>
    19a0:	85 c0       	rjmp	.+266    	; 0x1aac <GPIO_setupPinDirection+0x170>
    19a2:	af c0       	rjmp	.+350    	; 0x1b02 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    19a4:	8b 81       	ldd	r24, Y+3	; 0x03
    19a6:	81 30       	cpi	r24, 0x01	; 1
    19a8:	a1 f4       	brne	.+40     	; 0x19d2 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    19aa:	aa e3       	ldi	r26, 0x3A	; 58
    19ac:	b0 e0       	ldi	r27, 0x00	; 0
    19ae:	ea e3       	ldi	r30, 0x3A	; 58
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	80 81       	ld	r24, Z
    19b4:	48 2f       	mov	r20, r24
    19b6:	8a 81       	ldd	r24, Y+2	; 0x02
    19b8:	28 2f       	mov	r18, r24
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	02 2e       	mov	r0, r18
    19c2:	02 c0       	rjmp	.+4      	; 0x19c8 <GPIO_setupPinDirection+0x8c>
    19c4:	88 0f       	add	r24, r24
    19c6:	99 1f       	adc	r25, r25
    19c8:	0a 94       	dec	r0
    19ca:	e2 f7       	brpl	.-8      	; 0x19c4 <GPIO_setupPinDirection+0x88>
    19cc:	84 2b       	or	r24, r20
    19ce:	8c 93       	st	X, r24
    19d0:	98 c0       	rjmp	.+304    	; 0x1b02 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    19d2:	aa e3       	ldi	r26, 0x3A	; 58
    19d4:	b0 e0       	ldi	r27, 0x00	; 0
    19d6:	ea e3       	ldi	r30, 0x3A	; 58
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	80 81       	ld	r24, Z
    19dc:	48 2f       	mov	r20, r24
    19de:	8a 81       	ldd	r24, Y+2	; 0x02
    19e0:	28 2f       	mov	r18, r24
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	02 2e       	mov	r0, r18
    19ea:	02 c0       	rjmp	.+4      	; 0x19f0 <GPIO_setupPinDirection+0xb4>
    19ec:	88 0f       	add	r24, r24
    19ee:	99 1f       	adc	r25, r25
    19f0:	0a 94       	dec	r0
    19f2:	e2 f7       	brpl	.-8      	; 0x19ec <GPIO_setupPinDirection+0xb0>
    19f4:	80 95       	com	r24
    19f6:	84 23       	and	r24, r20
    19f8:	8c 93       	st	X, r24
    19fa:	83 c0       	rjmp	.+262    	; 0x1b02 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    19fc:	8b 81       	ldd	r24, Y+3	; 0x03
    19fe:	81 30       	cpi	r24, 0x01	; 1
    1a00:	a1 f4       	brne	.+40     	; 0x1a2a <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1a02:	a7 e3       	ldi	r26, 0x37	; 55
    1a04:	b0 e0       	ldi	r27, 0x00	; 0
    1a06:	e7 e3       	ldi	r30, 0x37	; 55
    1a08:	f0 e0       	ldi	r31, 0x00	; 0
    1a0a:	80 81       	ld	r24, Z
    1a0c:	48 2f       	mov	r20, r24
    1a0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a10:	28 2f       	mov	r18, r24
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	81 e0       	ldi	r24, 0x01	; 1
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	02 2e       	mov	r0, r18
    1a1a:	02 c0       	rjmp	.+4      	; 0x1a20 <GPIO_setupPinDirection+0xe4>
    1a1c:	88 0f       	add	r24, r24
    1a1e:	99 1f       	adc	r25, r25
    1a20:	0a 94       	dec	r0
    1a22:	e2 f7       	brpl	.-8      	; 0x1a1c <GPIO_setupPinDirection+0xe0>
    1a24:	84 2b       	or	r24, r20
    1a26:	8c 93       	st	X, r24
    1a28:	6c c0       	rjmp	.+216    	; 0x1b02 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1a2a:	a7 e3       	ldi	r26, 0x37	; 55
    1a2c:	b0 e0       	ldi	r27, 0x00	; 0
    1a2e:	e7 e3       	ldi	r30, 0x37	; 55
    1a30:	f0 e0       	ldi	r31, 0x00	; 0
    1a32:	80 81       	ld	r24, Z
    1a34:	48 2f       	mov	r20, r24
    1a36:	8a 81       	ldd	r24, Y+2	; 0x02
    1a38:	28 2f       	mov	r18, r24
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	81 e0       	ldi	r24, 0x01	; 1
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	02 2e       	mov	r0, r18
    1a42:	02 c0       	rjmp	.+4      	; 0x1a48 <GPIO_setupPinDirection+0x10c>
    1a44:	88 0f       	add	r24, r24
    1a46:	99 1f       	adc	r25, r25
    1a48:	0a 94       	dec	r0
    1a4a:	e2 f7       	brpl	.-8      	; 0x1a44 <GPIO_setupPinDirection+0x108>
    1a4c:	80 95       	com	r24
    1a4e:	84 23       	and	r24, r20
    1a50:	8c 93       	st	X, r24
    1a52:	57 c0       	rjmp	.+174    	; 0x1b02 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1a54:	8b 81       	ldd	r24, Y+3	; 0x03
    1a56:	81 30       	cpi	r24, 0x01	; 1
    1a58:	a1 f4       	brne	.+40     	; 0x1a82 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1a5a:	a4 e3       	ldi	r26, 0x34	; 52
    1a5c:	b0 e0       	ldi	r27, 0x00	; 0
    1a5e:	e4 e3       	ldi	r30, 0x34	; 52
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	80 81       	ld	r24, Z
    1a64:	48 2f       	mov	r20, r24
    1a66:	8a 81       	ldd	r24, Y+2	; 0x02
    1a68:	28 2f       	mov	r18, r24
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	81 e0       	ldi	r24, 0x01	; 1
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	02 2e       	mov	r0, r18
    1a72:	02 c0       	rjmp	.+4      	; 0x1a78 <GPIO_setupPinDirection+0x13c>
    1a74:	88 0f       	add	r24, r24
    1a76:	99 1f       	adc	r25, r25
    1a78:	0a 94       	dec	r0
    1a7a:	e2 f7       	brpl	.-8      	; 0x1a74 <GPIO_setupPinDirection+0x138>
    1a7c:	84 2b       	or	r24, r20
    1a7e:	8c 93       	st	X, r24
    1a80:	40 c0       	rjmp	.+128    	; 0x1b02 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1a82:	a4 e3       	ldi	r26, 0x34	; 52
    1a84:	b0 e0       	ldi	r27, 0x00	; 0
    1a86:	e4 e3       	ldi	r30, 0x34	; 52
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	80 81       	ld	r24, Z
    1a8c:	48 2f       	mov	r20, r24
    1a8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a90:	28 2f       	mov	r18, r24
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	02 2e       	mov	r0, r18
    1a9a:	02 c0       	rjmp	.+4      	; 0x1aa0 <GPIO_setupPinDirection+0x164>
    1a9c:	88 0f       	add	r24, r24
    1a9e:	99 1f       	adc	r25, r25
    1aa0:	0a 94       	dec	r0
    1aa2:	e2 f7       	brpl	.-8      	; 0x1a9c <GPIO_setupPinDirection+0x160>
    1aa4:	80 95       	com	r24
    1aa6:	84 23       	and	r24, r20
    1aa8:	8c 93       	st	X, r24
    1aaa:	2b c0       	rjmp	.+86     	; 0x1b02 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1aac:	8b 81       	ldd	r24, Y+3	; 0x03
    1aae:	81 30       	cpi	r24, 0x01	; 1
    1ab0:	a1 f4       	brne	.+40     	; 0x1ada <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1ab2:	a1 e3       	ldi	r26, 0x31	; 49
    1ab4:	b0 e0       	ldi	r27, 0x00	; 0
    1ab6:	e1 e3       	ldi	r30, 0x31	; 49
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	80 81       	ld	r24, Z
    1abc:	48 2f       	mov	r20, r24
    1abe:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac0:	28 2f       	mov	r18, r24
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	02 2e       	mov	r0, r18
    1aca:	02 c0       	rjmp	.+4      	; 0x1ad0 <GPIO_setupPinDirection+0x194>
    1acc:	88 0f       	add	r24, r24
    1ace:	99 1f       	adc	r25, r25
    1ad0:	0a 94       	dec	r0
    1ad2:	e2 f7       	brpl	.-8      	; 0x1acc <GPIO_setupPinDirection+0x190>
    1ad4:	84 2b       	or	r24, r20
    1ad6:	8c 93       	st	X, r24
    1ad8:	14 c0       	rjmp	.+40     	; 0x1b02 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1ada:	a1 e3       	ldi	r26, 0x31	; 49
    1adc:	b0 e0       	ldi	r27, 0x00	; 0
    1ade:	e1 e3       	ldi	r30, 0x31	; 49
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	80 81       	ld	r24, Z
    1ae4:	48 2f       	mov	r20, r24
    1ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae8:	28 2f       	mov	r18, r24
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	02 2e       	mov	r0, r18
    1af2:	02 c0       	rjmp	.+4      	; 0x1af8 <GPIO_setupPinDirection+0x1bc>
    1af4:	88 0f       	add	r24, r24
    1af6:	99 1f       	adc	r25, r25
    1af8:	0a 94       	dec	r0
    1afa:	e2 f7       	brpl	.-8      	; 0x1af4 <GPIO_setupPinDirection+0x1b8>
    1afc:	80 95       	com	r24
    1afe:	84 23       	and	r24, r20
    1b00:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1b02:	0f 90       	pop	r0
    1b04:	0f 90       	pop	r0
    1b06:	0f 90       	pop	r0
    1b08:	0f 90       	pop	r0
    1b0a:	0f 90       	pop	r0
    1b0c:	cf 91       	pop	r28
    1b0e:	df 91       	pop	r29
    1b10:	08 95       	ret

00001b12 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1b12:	df 93       	push	r29
    1b14:	cf 93       	push	r28
    1b16:	00 d0       	rcall	.+0      	; 0x1b18 <GPIO_writePin+0x6>
    1b18:	00 d0       	rcall	.+0      	; 0x1b1a <GPIO_writePin+0x8>
    1b1a:	0f 92       	push	r0
    1b1c:	cd b7       	in	r28, 0x3d	; 61
    1b1e:	de b7       	in	r29, 0x3e	; 62
    1b20:	89 83       	std	Y+1, r24	; 0x01
    1b22:	6a 83       	std	Y+2, r22	; 0x02
    1b24:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1b26:	8a 81       	ldd	r24, Y+2	; 0x02
    1b28:	88 30       	cpi	r24, 0x08	; 8
    1b2a:	08 f0       	brcs	.+2      	; 0x1b2e <GPIO_writePin+0x1c>
    1b2c:	d5 c0       	rjmp	.+426    	; 0x1cd8 <GPIO_writePin+0x1c6>
    1b2e:	89 81       	ldd	r24, Y+1	; 0x01
    1b30:	84 30       	cpi	r24, 0x04	; 4
    1b32:	08 f0       	brcs	.+2      	; 0x1b36 <GPIO_writePin+0x24>
    1b34:	d1 c0       	rjmp	.+418    	; 0x1cd8 <GPIO_writePin+0x1c6>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    1b36:	89 81       	ldd	r24, Y+1	; 0x01
    1b38:	28 2f       	mov	r18, r24
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	3d 83       	std	Y+5, r19	; 0x05
    1b3e:	2c 83       	std	Y+4, r18	; 0x04
    1b40:	8c 81       	ldd	r24, Y+4	; 0x04
    1b42:	9d 81       	ldd	r25, Y+5	; 0x05
    1b44:	81 30       	cpi	r24, 0x01	; 1
    1b46:	91 05       	cpc	r25, r1
    1b48:	09 f4       	brne	.+2      	; 0x1b4c <GPIO_writePin+0x3a>
    1b4a:	43 c0       	rjmp	.+134    	; 0x1bd2 <GPIO_writePin+0xc0>
    1b4c:	2c 81       	ldd	r18, Y+4	; 0x04
    1b4e:	3d 81       	ldd	r19, Y+5	; 0x05
    1b50:	22 30       	cpi	r18, 0x02	; 2
    1b52:	31 05       	cpc	r19, r1
    1b54:	2c f4       	brge	.+10     	; 0x1b60 <GPIO_writePin+0x4e>
    1b56:	8c 81       	ldd	r24, Y+4	; 0x04
    1b58:	9d 81       	ldd	r25, Y+5	; 0x05
    1b5a:	00 97       	sbiw	r24, 0x00	; 0
    1b5c:	71 f0       	breq	.+28     	; 0x1b7a <GPIO_writePin+0x68>
    1b5e:	bc c0       	rjmp	.+376    	; 0x1cd8 <GPIO_writePin+0x1c6>
    1b60:	2c 81       	ldd	r18, Y+4	; 0x04
    1b62:	3d 81       	ldd	r19, Y+5	; 0x05
    1b64:	22 30       	cpi	r18, 0x02	; 2
    1b66:	31 05       	cpc	r19, r1
    1b68:	09 f4       	brne	.+2      	; 0x1b6c <GPIO_writePin+0x5a>
    1b6a:	5f c0       	rjmp	.+190    	; 0x1c2a <GPIO_writePin+0x118>
    1b6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b6e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b70:	83 30       	cpi	r24, 0x03	; 3
    1b72:	91 05       	cpc	r25, r1
    1b74:	09 f4       	brne	.+2      	; 0x1b78 <GPIO_writePin+0x66>
    1b76:	85 c0       	rjmp	.+266    	; 0x1c82 <GPIO_writePin+0x170>
    1b78:	af c0       	rjmp	.+350    	; 0x1cd8 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1b7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7c:	81 30       	cpi	r24, 0x01	; 1
    1b7e:	a1 f4       	brne	.+40     	; 0x1ba8 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1b80:	ab e3       	ldi	r26, 0x3B	; 59
    1b82:	b0 e0       	ldi	r27, 0x00	; 0
    1b84:	eb e3       	ldi	r30, 0x3B	; 59
    1b86:	f0 e0       	ldi	r31, 0x00	; 0
    1b88:	80 81       	ld	r24, Z
    1b8a:	48 2f       	mov	r20, r24
    1b8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8e:	28 2f       	mov	r18, r24
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	81 e0       	ldi	r24, 0x01	; 1
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	02 2e       	mov	r0, r18
    1b98:	02 c0       	rjmp	.+4      	; 0x1b9e <GPIO_writePin+0x8c>
    1b9a:	88 0f       	add	r24, r24
    1b9c:	99 1f       	adc	r25, r25
    1b9e:	0a 94       	dec	r0
    1ba0:	e2 f7       	brpl	.-8      	; 0x1b9a <GPIO_writePin+0x88>
    1ba2:	84 2b       	or	r24, r20
    1ba4:	8c 93       	st	X, r24
    1ba6:	98 c0       	rjmp	.+304    	; 0x1cd8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1ba8:	ab e3       	ldi	r26, 0x3B	; 59
    1baa:	b0 e0       	ldi	r27, 0x00	; 0
    1bac:	eb e3       	ldi	r30, 0x3B	; 59
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	80 81       	ld	r24, Z
    1bb2:	48 2f       	mov	r20, r24
    1bb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb6:	28 2f       	mov	r18, r24
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	81 e0       	ldi	r24, 0x01	; 1
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	02 2e       	mov	r0, r18
    1bc0:	02 c0       	rjmp	.+4      	; 0x1bc6 <GPIO_writePin+0xb4>
    1bc2:	88 0f       	add	r24, r24
    1bc4:	99 1f       	adc	r25, r25
    1bc6:	0a 94       	dec	r0
    1bc8:	e2 f7       	brpl	.-8      	; 0x1bc2 <GPIO_writePin+0xb0>
    1bca:	80 95       	com	r24
    1bcc:	84 23       	and	r24, r20
    1bce:	8c 93       	st	X, r24
    1bd0:	83 c0       	rjmp	.+262    	; 0x1cd8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1bd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd4:	81 30       	cpi	r24, 0x01	; 1
    1bd6:	a1 f4       	brne	.+40     	; 0x1c00 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1bd8:	a8 e3       	ldi	r26, 0x38	; 56
    1bda:	b0 e0       	ldi	r27, 0x00	; 0
    1bdc:	e8 e3       	ldi	r30, 0x38	; 56
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	80 81       	ld	r24, Z
    1be2:	48 2f       	mov	r20, r24
    1be4:	8a 81       	ldd	r24, Y+2	; 0x02
    1be6:	28 2f       	mov	r18, r24
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	81 e0       	ldi	r24, 0x01	; 1
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	02 2e       	mov	r0, r18
    1bf0:	02 c0       	rjmp	.+4      	; 0x1bf6 <GPIO_writePin+0xe4>
    1bf2:	88 0f       	add	r24, r24
    1bf4:	99 1f       	adc	r25, r25
    1bf6:	0a 94       	dec	r0
    1bf8:	e2 f7       	brpl	.-8      	; 0x1bf2 <GPIO_writePin+0xe0>
    1bfa:	84 2b       	or	r24, r20
    1bfc:	8c 93       	st	X, r24
    1bfe:	6c c0       	rjmp	.+216    	; 0x1cd8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1c00:	a8 e3       	ldi	r26, 0x38	; 56
    1c02:	b0 e0       	ldi	r27, 0x00	; 0
    1c04:	e8 e3       	ldi	r30, 0x38	; 56
    1c06:	f0 e0       	ldi	r31, 0x00	; 0
    1c08:	80 81       	ld	r24, Z
    1c0a:	48 2f       	mov	r20, r24
    1c0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0e:	28 2f       	mov	r18, r24
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	02 2e       	mov	r0, r18
    1c18:	02 c0       	rjmp	.+4      	; 0x1c1e <GPIO_writePin+0x10c>
    1c1a:	88 0f       	add	r24, r24
    1c1c:	99 1f       	adc	r25, r25
    1c1e:	0a 94       	dec	r0
    1c20:	e2 f7       	brpl	.-8      	; 0x1c1a <GPIO_writePin+0x108>
    1c22:	80 95       	com	r24
    1c24:	84 23       	and	r24, r20
    1c26:	8c 93       	st	X, r24
    1c28:	57 c0       	rjmp	.+174    	; 0x1cd8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1c2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2c:	81 30       	cpi	r24, 0x01	; 1
    1c2e:	a1 f4       	brne	.+40     	; 0x1c58 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1c30:	a5 e3       	ldi	r26, 0x35	; 53
    1c32:	b0 e0       	ldi	r27, 0x00	; 0
    1c34:	e5 e3       	ldi	r30, 0x35	; 53
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	80 81       	ld	r24, Z
    1c3a:	48 2f       	mov	r20, r24
    1c3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3e:	28 2f       	mov	r18, r24
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	81 e0       	ldi	r24, 0x01	; 1
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	02 2e       	mov	r0, r18
    1c48:	02 c0       	rjmp	.+4      	; 0x1c4e <GPIO_writePin+0x13c>
    1c4a:	88 0f       	add	r24, r24
    1c4c:	99 1f       	adc	r25, r25
    1c4e:	0a 94       	dec	r0
    1c50:	e2 f7       	brpl	.-8      	; 0x1c4a <GPIO_writePin+0x138>
    1c52:	84 2b       	or	r24, r20
    1c54:	8c 93       	st	X, r24
    1c56:	40 c0       	rjmp	.+128    	; 0x1cd8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1c58:	a5 e3       	ldi	r26, 0x35	; 53
    1c5a:	b0 e0       	ldi	r27, 0x00	; 0
    1c5c:	e5 e3       	ldi	r30, 0x35	; 53
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	80 81       	ld	r24, Z
    1c62:	48 2f       	mov	r20, r24
    1c64:	8a 81       	ldd	r24, Y+2	; 0x02
    1c66:	28 2f       	mov	r18, r24
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	81 e0       	ldi	r24, 0x01	; 1
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	02 2e       	mov	r0, r18
    1c70:	02 c0       	rjmp	.+4      	; 0x1c76 <GPIO_writePin+0x164>
    1c72:	88 0f       	add	r24, r24
    1c74:	99 1f       	adc	r25, r25
    1c76:	0a 94       	dec	r0
    1c78:	e2 f7       	brpl	.-8      	; 0x1c72 <GPIO_writePin+0x160>
    1c7a:	80 95       	com	r24
    1c7c:	84 23       	and	r24, r20
    1c7e:	8c 93       	st	X, r24
    1c80:	2b c0       	rjmp	.+86     	; 0x1cd8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1c82:	8b 81       	ldd	r24, Y+3	; 0x03
    1c84:	81 30       	cpi	r24, 0x01	; 1
    1c86:	a1 f4       	brne	.+40     	; 0x1cb0 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1c88:	a2 e3       	ldi	r26, 0x32	; 50
    1c8a:	b0 e0       	ldi	r27, 0x00	; 0
    1c8c:	e2 e3       	ldi	r30, 0x32	; 50
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	80 81       	ld	r24, Z
    1c92:	48 2f       	mov	r20, r24
    1c94:	8a 81       	ldd	r24, Y+2	; 0x02
    1c96:	28 2f       	mov	r18, r24
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	81 e0       	ldi	r24, 0x01	; 1
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	02 2e       	mov	r0, r18
    1ca0:	02 c0       	rjmp	.+4      	; 0x1ca6 <GPIO_writePin+0x194>
    1ca2:	88 0f       	add	r24, r24
    1ca4:	99 1f       	adc	r25, r25
    1ca6:	0a 94       	dec	r0
    1ca8:	e2 f7       	brpl	.-8      	; 0x1ca2 <GPIO_writePin+0x190>
    1caa:	84 2b       	or	r24, r20
    1cac:	8c 93       	st	X, r24
    1cae:	14 c0       	rjmp	.+40     	; 0x1cd8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1cb0:	a2 e3       	ldi	r26, 0x32	; 50
    1cb2:	b0 e0       	ldi	r27, 0x00	; 0
    1cb4:	e2 e3       	ldi	r30, 0x32	; 50
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	80 81       	ld	r24, Z
    1cba:	48 2f       	mov	r20, r24
    1cbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbe:	28 2f       	mov	r18, r24
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	81 e0       	ldi	r24, 0x01	; 1
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	02 2e       	mov	r0, r18
    1cc8:	02 c0       	rjmp	.+4      	; 0x1cce <GPIO_writePin+0x1bc>
    1cca:	88 0f       	add	r24, r24
    1ccc:	99 1f       	adc	r25, r25
    1cce:	0a 94       	dec	r0
    1cd0:	e2 f7       	brpl	.-8      	; 0x1cca <GPIO_writePin+0x1b8>
    1cd2:	80 95       	com	r24
    1cd4:	84 23       	and	r24, r20
    1cd6:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1cd8:	0f 90       	pop	r0
    1cda:	0f 90       	pop	r0
    1cdc:	0f 90       	pop	r0
    1cde:	0f 90       	pop	r0
    1ce0:	0f 90       	pop	r0
    1ce2:	cf 91       	pop	r28
    1ce4:	df 91       	pop	r29
    1ce6:	08 95       	ret

00001ce8 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1ce8:	df 93       	push	r29
    1cea:	cf 93       	push	r28
    1cec:	00 d0       	rcall	.+0      	; 0x1cee <GPIO_readPin+0x6>
    1cee:	00 d0       	rcall	.+0      	; 0x1cf0 <GPIO_readPin+0x8>
    1cf0:	0f 92       	push	r0
    1cf2:	cd b7       	in	r28, 0x3d	; 61
    1cf4:	de b7       	in	r29, 0x3e	; 62
    1cf6:	89 83       	std	Y+1, r24	; 0x01
    1cf8:	6a 83       	std	Y+2, r22	; 0x02
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1cfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfc:	88 30       	cpi	r24, 0x08	; 8
    1cfe:	18 f4       	brcc	.+6      	; 0x1d06 <GPIO_readPin+0x1e>
    1d00:	89 81       	ldd	r24, Y+1	; 0x01
    1d02:	84 30       	cpi	r24, 0x04	; 4
    1d04:	10 f0       	brcs	.+4      	; 0x1d0a <GPIO_readPin+0x22>
	{
		return LOGIC_LOW;
    1d06:	1d 82       	std	Y+5, r1	; 0x05
    1d08:	82 c0       	rjmp	.+260    	; 0x1e0e <GPIO_readPin+0x126>
	}
	else
	{
		switch(port_num)
    1d0a:	89 81       	ldd	r24, Y+1	; 0x01
    1d0c:	28 2f       	mov	r18, r24
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	3c 83       	std	Y+4, r19	; 0x04
    1d12:	2b 83       	std	Y+3, r18	; 0x03
    1d14:	4b 81       	ldd	r20, Y+3	; 0x03
    1d16:	5c 81       	ldd	r21, Y+4	; 0x04
    1d18:	41 30       	cpi	r20, 0x01	; 1
    1d1a:	51 05       	cpc	r21, r1
    1d1c:	79 f1       	breq	.+94     	; 0x1d7c <GPIO_readPin+0x94>
    1d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d20:	9c 81       	ldd	r25, Y+4	; 0x04
    1d22:	82 30       	cpi	r24, 0x02	; 2
    1d24:	91 05       	cpc	r25, r1
    1d26:	34 f4       	brge	.+12     	; 0x1d34 <GPIO_readPin+0x4c>
    1d28:	2b 81       	ldd	r18, Y+3	; 0x03
    1d2a:	3c 81       	ldd	r19, Y+4	; 0x04
    1d2c:	21 15       	cp	r18, r1
    1d2e:	31 05       	cpc	r19, r1
    1d30:	69 f0       	breq	.+26     	; 0x1d4c <GPIO_readPin+0x64>
    1d32:	6c c0       	rjmp	.+216    	; 0x1e0c <GPIO_readPin+0x124>
    1d34:	4b 81       	ldd	r20, Y+3	; 0x03
    1d36:	5c 81       	ldd	r21, Y+4	; 0x04
    1d38:	42 30       	cpi	r20, 0x02	; 2
    1d3a:	51 05       	cpc	r21, r1
    1d3c:	b9 f1       	breq	.+110    	; 0x1dac <GPIO_readPin+0xc4>
    1d3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d40:	9c 81       	ldd	r25, Y+4	; 0x04
    1d42:	83 30       	cpi	r24, 0x03	; 3
    1d44:	91 05       	cpc	r25, r1
    1d46:	09 f4       	brne	.+2      	; 0x1d4a <GPIO_readPin+0x62>
    1d48:	49 c0       	rjmp	.+146    	; 0x1ddc <GPIO_readPin+0xf4>
    1d4a:	60 c0       	rjmp	.+192    	; 0x1e0c <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1d4c:	e9 e3       	ldi	r30, 0x39	; 57
    1d4e:	f0 e0       	ldi	r31, 0x00	; 0
    1d50:	80 81       	ld	r24, Z
    1d52:	28 2f       	mov	r18, r24
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	8a 81       	ldd	r24, Y+2	; 0x02
    1d58:	88 2f       	mov	r24, r24
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	a9 01       	movw	r20, r18
    1d5e:	02 c0       	rjmp	.+4      	; 0x1d64 <GPIO_readPin+0x7c>
    1d60:	55 95       	asr	r21
    1d62:	47 95       	ror	r20
    1d64:	8a 95       	dec	r24
    1d66:	e2 f7       	brpl	.-8      	; 0x1d60 <GPIO_readPin+0x78>
    1d68:	ca 01       	movw	r24, r20
    1d6a:	81 70       	andi	r24, 0x01	; 1
    1d6c:	90 70       	andi	r25, 0x00	; 0
    1d6e:	88 23       	and	r24, r24
    1d70:	19 f0       	breq	.+6      	; 0x1d78 <GPIO_readPin+0x90>
			{
				return LOGIC_HIGH;
    1d72:	51 e0       	ldi	r21, 0x01	; 1
    1d74:	5d 83       	std	Y+5, r21	; 0x05
    1d76:	4b c0       	rjmp	.+150    	; 0x1e0e <GPIO_readPin+0x126>
			}
			else
			{
				return LOGIC_LOW;
    1d78:	1d 82       	std	Y+5, r1	; 0x05
    1d7a:	49 c0       	rjmp	.+146    	; 0x1e0e <GPIO_readPin+0x126>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1d7c:	e6 e3       	ldi	r30, 0x36	; 54
    1d7e:	f0 e0       	ldi	r31, 0x00	; 0
    1d80:	80 81       	ld	r24, Z
    1d82:	28 2f       	mov	r18, r24
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	8a 81       	ldd	r24, Y+2	; 0x02
    1d88:	88 2f       	mov	r24, r24
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	a9 01       	movw	r20, r18
    1d8e:	02 c0       	rjmp	.+4      	; 0x1d94 <GPIO_readPin+0xac>
    1d90:	55 95       	asr	r21
    1d92:	47 95       	ror	r20
    1d94:	8a 95       	dec	r24
    1d96:	e2 f7       	brpl	.-8      	; 0x1d90 <GPIO_readPin+0xa8>
    1d98:	ca 01       	movw	r24, r20
    1d9a:	81 70       	andi	r24, 0x01	; 1
    1d9c:	90 70       	andi	r25, 0x00	; 0
    1d9e:	88 23       	and	r24, r24
    1da0:	19 f0       	breq	.+6      	; 0x1da8 <GPIO_readPin+0xc0>
			{
				return LOGIC_HIGH;
    1da2:	51 e0       	ldi	r21, 0x01	; 1
    1da4:	5d 83       	std	Y+5, r21	; 0x05
    1da6:	33 c0       	rjmp	.+102    	; 0x1e0e <GPIO_readPin+0x126>
			}
			else
			{
				return LOGIC_LOW;
    1da8:	1d 82       	std	Y+5, r1	; 0x05
    1daa:	31 c0       	rjmp	.+98     	; 0x1e0e <GPIO_readPin+0x126>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1dac:	e3 e3       	ldi	r30, 0x33	; 51
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	80 81       	ld	r24, Z
    1db2:	28 2f       	mov	r18, r24
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	8a 81       	ldd	r24, Y+2	; 0x02
    1db8:	88 2f       	mov	r24, r24
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	a9 01       	movw	r20, r18
    1dbe:	02 c0       	rjmp	.+4      	; 0x1dc4 <GPIO_readPin+0xdc>
    1dc0:	55 95       	asr	r21
    1dc2:	47 95       	ror	r20
    1dc4:	8a 95       	dec	r24
    1dc6:	e2 f7       	brpl	.-8      	; 0x1dc0 <GPIO_readPin+0xd8>
    1dc8:	ca 01       	movw	r24, r20
    1dca:	81 70       	andi	r24, 0x01	; 1
    1dcc:	90 70       	andi	r25, 0x00	; 0
    1dce:	88 23       	and	r24, r24
    1dd0:	19 f0       	breq	.+6      	; 0x1dd8 <GPIO_readPin+0xf0>
			{
				return LOGIC_HIGH;
    1dd2:	51 e0       	ldi	r21, 0x01	; 1
    1dd4:	5d 83       	std	Y+5, r21	; 0x05
    1dd6:	1b c0       	rjmp	.+54     	; 0x1e0e <GPIO_readPin+0x126>
			}
			else
			{
				return LOGIC_LOW;
    1dd8:	1d 82       	std	Y+5, r1	; 0x05
    1dda:	19 c0       	rjmp	.+50     	; 0x1e0e <GPIO_readPin+0x126>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1ddc:	e0 e3       	ldi	r30, 0x30	; 48
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	80 81       	ld	r24, Z
    1de2:	28 2f       	mov	r18, r24
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	8a 81       	ldd	r24, Y+2	; 0x02
    1de8:	88 2f       	mov	r24, r24
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	a9 01       	movw	r20, r18
    1dee:	02 c0       	rjmp	.+4      	; 0x1df4 <GPIO_readPin+0x10c>
    1df0:	55 95       	asr	r21
    1df2:	47 95       	ror	r20
    1df4:	8a 95       	dec	r24
    1df6:	e2 f7       	brpl	.-8      	; 0x1df0 <GPIO_readPin+0x108>
    1df8:	ca 01       	movw	r24, r20
    1dfa:	81 70       	andi	r24, 0x01	; 1
    1dfc:	90 70       	andi	r25, 0x00	; 0
    1dfe:	88 23       	and	r24, r24
    1e00:	19 f0       	breq	.+6      	; 0x1e08 <GPIO_readPin+0x120>
			{
				return LOGIC_HIGH;
    1e02:	51 e0       	ldi	r21, 0x01	; 1
    1e04:	5d 83       	std	Y+5, r21	; 0x05
    1e06:	03 c0       	rjmp	.+6      	; 0x1e0e <GPIO_readPin+0x126>
			}
			else
			{
				return LOGIC_LOW;
    1e08:	1d 82       	std	Y+5, r1	; 0x05
    1e0a:	01 c0       	rjmp	.+2      	; 0x1e0e <GPIO_readPin+0x126>
			}
			break;
		}
	}
	return 0;
    1e0c:	1d 82       	std	Y+5, r1	; 0x05
    1e0e:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1e10:	0f 90       	pop	r0
    1e12:	0f 90       	pop	r0
    1e14:	0f 90       	pop	r0
    1e16:	0f 90       	pop	r0
    1e18:	0f 90       	pop	r0
    1e1a:	cf 91       	pop	r28
    1e1c:	df 91       	pop	r29
    1e1e:	08 95       	ret

00001e20 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1e20:	df 93       	push	r29
    1e22:	cf 93       	push	r28
    1e24:	00 d0       	rcall	.+0      	; 0x1e26 <GPIO_setupPortDirection+0x6>
    1e26:	00 d0       	rcall	.+0      	; 0x1e28 <GPIO_setupPortDirection+0x8>
    1e28:	cd b7       	in	r28, 0x3d	; 61
    1e2a:	de b7       	in	r29, 0x3e	; 62
    1e2c:	89 83       	std	Y+1, r24	; 0x01
    1e2e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1e30:	89 81       	ldd	r24, Y+1	; 0x01
    1e32:	84 30       	cpi	r24, 0x04	; 4
    1e34:	90 f5       	brcc	.+100    	; 0x1e9a <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1e36:	89 81       	ldd	r24, Y+1	; 0x01
    1e38:	28 2f       	mov	r18, r24
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	3c 83       	std	Y+4, r19	; 0x04
    1e3e:	2b 83       	std	Y+3, r18	; 0x03
    1e40:	8b 81       	ldd	r24, Y+3	; 0x03
    1e42:	9c 81       	ldd	r25, Y+4	; 0x04
    1e44:	81 30       	cpi	r24, 0x01	; 1
    1e46:	91 05       	cpc	r25, r1
    1e48:	d1 f0       	breq	.+52     	; 0x1e7e <GPIO_setupPortDirection+0x5e>
    1e4a:	2b 81       	ldd	r18, Y+3	; 0x03
    1e4c:	3c 81       	ldd	r19, Y+4	; 0x04
    1e4e:	22 30       	cpi	r18, 0x02	; 2
    1e50:	31 05       	cpc	r19, r1
    1e52:	2c f4       	brge	.+10     	; 0x1e5e <GPIO_setupPortDirection+0x3e>
    1e54:	8b 81       	ldd	r24, Y+3	; 0x03
    1e56:	9c 81       	ldd	r25, Y+4	; 0x04
    1e58:	00 97       	sbiw	r24, 0x00	; 0
    1e5a:	61 f0       	breq	.+24     	; 0x1e74 <GPIO_setupPortDirection+0x54>
    1e5c:	1e c0       	rjmp	.+60     	; 0x1e9a <GPIO_setupPortDirection+0x7a>
    1e5e:	2b 81       	ldd	r18, Y+3	; 0x03
    1e60:	3c 81       	ldd	r19, Y+4	; 0x04
    1e62:	22 30       	cpi	r18, 0x02	; 2
    1e64:	31 05       	cpc	r19, r1
    1e66:	81 f0       	breq	.+32     	; 0x1e88 <GPIO_setupPortDirection+0x68>
    1e68:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e6c:	83 30       	cpi	r24, 0x03	; 3
    1e6e:	91 05       	cpc	r25, r1
    1e70:	81 f0       	breq	.+32     	; 0x1e92 <GPIO_setupPortDirection+0x72>
    1e72:	13 c0       	rjmp	.+38     	; 0x1e9a <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1e74:	ea e3       	ldi	r30, 0x3A	; 58
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7a:	80 83       	st	Z, r24
    1e7c:	0e c0       	rjmp	.+28     	; 0x1e9a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1e7e:	e7 e3       	ldi	r30, 0x37	; 55
    1e80:	f0 e0       	ldi	r31, 0x00	; 0
    1e82:	8a 81       	ldd	r24, Y+2	; 0x02
    1e84:	80 83       	st	Z, r24
    1e86:	09 c0       	rjmp	.+18     	; 0x1e9a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1e88:	e4 e3       	ldi	r30, 0x34	; 52
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8e:	80 83       	st	Z, r24
    1e90:	04 c0       	rjmp	.+8      	; 0x1e9a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1e92:	e1 e3       	ldi	r30, 0x31	; 49
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	8a 81       	ldd	r24, Y+2	; 0x02
    1e98:	80 83       	st	Z, r24
			break;
		}
	}
}
    1e9a:	0f 90       	pop	r0
    1e9c:	0f 90       	pop	r0
    1e9e:	0f 90       	pop	r0
    1ea0:	0f 90       	pop	r0
    1ea2:	cf 91       	pop	r28
    1ea4:	df 91       	pop	r29
    1ea6:	08 95       	ret

00001ea8 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1ea8:	df 93       	push	r29
    1eaa:	cf 93       	push	r28
    1eac:	00 d0       	rcall	.+0      	; 0x1eae <GPIO_writePort+0x6>
    1eae:	00 d0       	rcall	.+0      	; 0x1eb0 <GPIO_writePort+0x8>
    1eb0:	cd b7       	in	r28, 0x3d	; 61
    1eb2:	de b7       	in	r29, 0x3e	; 62
    1eb4:	89 83       	std	Y+1, r24	; 0x01
    1eb6:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    1eb8:	89 81       	ldd	r24, Y+1	; 0x01
    1eba:	84 30       	cpi	r24, 0x04	; 4
    1ebc:	90 f5       	brcc	.+100    	; 0x1f22 <GPIO_writePort+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    1ebe:	89 81       	ldd	r24, Y+1	; 0x01
    1ec0:	28 2f       	mov	r18, r24
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	3c 83       	std	Y+4, r19	; 0x04
    1ec6:	2b 83       	std	Y+3, r18	; 0x03
    1ec8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eca:	9c 81       	ldd	r25, Y+4	; 0x04
    1ecc:	81 30       	cpi	r24, 0x01	; 1
    1ece:	91 05       	cpc	r25, r1
    1ed0:	d1 f0       	breq	.+52     	; 0x1f06 <GPIO_writePort+0x5e>
    1ed2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ed4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ed6:	22 30       	cpi	r18, 0x02	; 2
    1ed8:	31 05       	cpc	r19, r1
    1eda:	2c f4       	brge	.+10     	; 0x1ee6 <GPIO_writePort+0x3e>
    1edc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ede:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee0:	00 97       	sbiw	r24, 0x00	; 0
    1ee2:	61 f0       	breq	.+24     	; 0x1efc <GPIO_writePort+0x54>
    1ee4:	1e c0       	rjmp	.+60     	; 0x1f22 <GPIO_writePort+0x7a>
    1ee6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ee8:	3c 81       	ldd	r19, Y+4	; 0x04
    1eea:	22 30       	cpi	r18, 0x02	; 2
    1eec:	31 05       	cpc	r19, r1
    1eee:	81 f0       	breq	.+32     	; 0x1f10 <GPIO_writePort+0x68>
    1ef0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef4:	83 30       	cpi	r24, 0x03	; 3
    1ef6:	91 05       	cpc	r25, r1
    1ef8:	81 f0       	breq	.+32     	; 0x1f1a <GPIO_writePort+0x72>
    1efa:	13 c0       	rjmp	.+38     	; 0x1f22 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1efc:	eb e3       	ldi	r30, 0x3B	; 59
    1efe:	f0 e0       	ldi	r31, 0x00	; 0
    1f00:	8a 81       	ldd	r24, Y+2	; 0x02
    1f02:	80 83       	st	Z, r24
    1f04:	0e c0       	rjmp	.+28     	; 0x1f22 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1f06:	e8 e3       	ldi	r30, 0x38	; 56
    1f08:	f0 e0       	ldi	r31, 0x00	; 0
    1f0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0c:	80 83       	st	Z, r24
    1f0e:	09 c0       	rjmp	.+18     	; 0x1f22 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1f10:	e5 e3       	ldi	r30, 0x35	; 53
    1f12:	f0 e0       	ldi	r31, 0x00	; 0
    1f14:	8a 81       	ldd	r24, Y+2	; 0x02
    1f16:	80 83       	st	Z, r24
    1f18:	04 c0       	rjmp	.+8      	; 0x1f22 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1f1a:	e2 e3       	ldi	r30, 0x32	; 50
    1f1c:	f0 e0       	ldi	r31, 0x00	; 0
    1f1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f20:	80 83       	st	Z, r24
			break;
		}
	}
}
    1f22:	0f 90       	pop	r0
    1f24:	0f 90       	pop	r0
    1f26:	0f 90       	pop	r0
    1f28:	0f 90       	pop	r0
    1f2a:	cf 91       	pop	r28
    1f2c:	df 91       	pop	r29
    1f2e:	08 95       	ret

00001f30 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1f30:	df 93       	push	r29
    1f32:	cf 93       	push	r28
    1f34:	00 d0       	rcall	.+0      	; 0x1f36 <GPIO_readPort+0x6>
    1f36:	00 d0       	rcall	.+0      	; 0x1f38 <GPIO_readPort+0x8>
    1f38:	cd b7       	in	r28, 0x3d	; 61
    1f3a:	de b7       	in	r29, 0x3e	; 62
    1f3c:	89 83       	std	Y+1, r24	; 0x01
	if(port_num >= NUM_OF_PORTS)
    1f3e:	89 81       	ldd	r24, Y+1	; 0x01
    1f40:	84 30       	cpi	r24, 0x04	; 4
    1f42:	10 f0       	brcs	.+4      	; 0x1f48 <GPIO_readPort+0x18>
	{
		return LOGIC_LOW;
    1f44:	1c 82       	std	Y+4, r1	; 0x04
    1f46:	34 c0       	rjmp	.+104    	; 0x1fb0 <GPIO_readPort+0x80>
	}
	else
	{
		switch(port_num)
    1f48:	89 81       	ldd	r24, Y+1	; 0x01
    1f4a:	28 2f       	mov	r18, r24
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	3b 83       	std	Y+3, r19	; 0x03
    1f50:	2a 83       	std	Y+2, r18	; 0x02
    1f52:	8a 81       	ldd	r24, Y+2	; 0x02
    1f54:	9b 81       	ldd	r25, Y+3	; 0x03
    1f56:	81 30       	cpi	r24, 0x01	; 1
    1f58:	91 05       	cpc	r25, r1
    1f5a:	d1 f0       	breq	.+52     	; 0x1f90 <GPIO_readPort+0x60>
    1f5c:	2a 81       	ldd	r18, Y+2	; 0x02
    1f5e:	3b 81       	ldd	r19, Y+3	; 0x03
    1f60:	22 30       	cpi	r18, 0x02	; 2
    1f62:	31 05       	cpc	r19, r1
    1f64:	2c f4       	brge	.+10     	; 0x1f70 <GPIO_readPort+0x40>
    1f66:	8a 81       	ldd	r24, Y+2	; 0x02
    1f68:	9b 81       	ldd	r25, Y+3	; 0x03
    1f6a:	00 97       	sbiw	r24, 0x00	; 0
    1f6c:	61 f0       	breq	.+24     	; 0x1f86 <GPIO_readPort+0x56>
    1f6e:	1f c0       	rjmp	.+62     	; 0x1fae <GPIO_readPort+0x7e>
    1f70:	2a 81       	ldd	r18, Y+2	; 0x02
    1f72:	3b 81       	ldd	r19, Y+3	; 0x03
    1f74:	22 30       	cpi	r18, 0x02	; 2
    1f76:	31 05       	cpc	r19, r1
    1f78:	81 f0       	breq	.+32     	; 0x1f9a <GPIO_readPort+0x6a>
    1f7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f7e:	83 30       	cpi	r24, 0x03	; 3
    1f80:	91 05       	cpc	r25, r1
    1f82:	81 f0       	breq	.+32     	; 0x1fa4 <GPIO_readPort+0x74>
    1f84:	14 c0       	rjmp	.+40     	; 0x1fae <GPIO_readPort+0x7e>
		{
		case PORTA_ID:
			return PINA;
    1f86:	e9 e3       	ldi	r30, 0x39	; 57
    1f88:	f0 e0       	ldi	r31, 0x00	; 0
    1f8a:	90 81       	ld	r25, Z
    1f8c:	9c 83       	std	Y+4, r25	; 0x04
    1f8e:	10 c0       	rjmp	.+32     	; 0x1fb0 <GPIO_readPort+0x80>
			break;
		case PORTB_ID:
			return PINB;
    1f90:	e6 e3       	ldi	r30, 0x36	; 54
    1f92:	f0 e0       	ldi	r31, 0x00	; 0
    1f94:	20 81       	ld	r18, Z
    1f96:	2c 83       	std	Y+4, r18	; 0x04
    1f98:	0b c0       	rjmp	.+22     	; 0x1fb0 <GPIO_readPort+0x80>
			break;
		case PORTC_ID:
			return PINC;
    1f9a:	e3 e3       	ldi	r30, 0x33	; 51
    1f9c:	f0 e0       	ldi	r31, 0x00	; 0
    1f9e:	30 81       	ld	r19, Z
    1fa0:	3c 83       	std	Y+4, r19	; 0x04
    1fa2:	06 c0       	rjmp	.+12     	; 0x1fb0 <GPIO_readPort+0x80>
			break;
		case PORTD_ID:
			return PIND;
    1fa4:	e0 e3       	ldi	r30, 0x30	; 48
    1fa6:	f0 e0       	ldi	r31, 0x00	; 0
    1fa8:	80 81       	ld	r24, Z
    1faa:	8c 83       	std	Y+4, r24	; 0x04
    1fac:	01 c0       	rjmp	.+2      	; 0x1fb0 <GPIO_readPort+0x80>
			break;
		}
	}
	return 0;
    1fae:	1c 82       	std	Y+4, r1	; 0x04
    1fb0:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1fb2:	0f 90       	pop	r0
    1fb4:	0f 90       	pop	r0
    1fb6:	0f 90       	pop	r0
    1fb8:	0f 90       	pop	r0
    1fba:	cf 91       	pop	r28
    1fbc:	df 91       	pop	r29
    1fbe:	08 95       	ret

00001fc0 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint16 KEYPAD_getPressedKey(void)
{
    1fc0:	df 93       	push	r29
    1fc2:	cf 93       	push	r28
    1fc4:	cd b7       	in	r28, 0x3d	; 61
    1fc6:	de b7       	in	r29, 0x3e	; 62
    1fc8:	60 97       	sbiw	r28, 0x10	; 16
    1fca:	0f b6       	in	r0, 0x3f	; 63
    1fcc:	f8 94       	cli
    1fce:	de bf       	out	0x3e, r29	; 62
    1fd0:	0f be       	out	0x3f, r0	; 63
    1fd2:	cd bf       	out	0x3d, r28	; 61

	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1fd4:	82 e0       	ldi	r24, 0x02	; 2
    1fd6:	60 e0       	ldi	r22, 0x00	; 0
    1fd8:	40 e0       	ldi	r20, 0x00	; 0
    1fda:	0e 94 9e 0c 	call	0x193c	; 0x193c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1fde:	82 e0       	ldi	r24, 0x02	; 2
    1fe0:	61 e0       	ldi	r22, 0x01	; 1
    1fe2:	40 e0       	ldi	r20, 0x00	; 0
    1fe4:	0e 94 9e 0c 	call	0x193c	; 0x193c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1fe8:	82 e0       	ldi	r24, 0x02	; 2
    1fea:	62 e0       	ldi	r22, 0x02	; 2
    1fec:	40 e0       	ldi	r20, 0x00	; 0
    1fee:	0e 94 9e 0c 	call	0x193c	; 0x193c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1ff2:	82 e0       	ldi	r24, 0x02	; 2
    1ff4:	63 e0       	ldi	r22, 0x03	; 3
    1ff6:	40 e0       	ldi	r20, 0x00	; 0
    1ff8:	0e 94 9e 0c 	call	0x193c	; 0x193c <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1ffc:	82 e0       	ldi	r24, 0x02	; 2
    1ffe:	64 e0       	ldi	r22, 0x04	; 4
    2000:	40 e0       	ldi	r20, 0x00	; 0
    2002:	0e 94 9e 0c 	call	0x193c	; 0x193c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    2006:	82 e0       	ldi	r24, 0x02	; 2
    2008:	65 e0       	ldi	r22, 0x05	; 5
    200a:	40 e0       	ldi	r20, 0x00	; 0
    200c:	0e 94 9e 0c 	call	0x193c	; 0x193c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    2010:	82 e0       	ldi	r24, 0x02	; 2
    2012:	66 e0       	ldi	r22, 0x06	; 6
    2014:	40 e0       	ldi	r20, 0x00	; 0
    2016:	0e 94 9e 0c 	call	0x193c	; 0x193c <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    201a:	82 e0       	ldi	r24, 0x02	; 2
    201c:	67 e0       	ldi	r22, 0x07	; 7
    201e:	40 e0       	ldi	r20, 0x00	; 0
    2020:	0e 94 9e 0c 	call	0x193c	; 0x193c <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    2024:	1f 86       	std	Y+15, r1	; 0x0f
    2026:	ad c0       	rjmp	.+346    	; 0x2182 <KEYPAD_getPressedKey+0x1c2>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    2028:	82 e0       	ldi	r24, 0x02	; 2
    202a:	6f 85       	ldd	r22, Y+15	; 0x0f
    202c:	41 e0       	ldi	r20, 0x01	; 1
    202e:	0e 94 9e 0c 	call	0x193c	; 0x193c <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    2032:	82 e0       	ldi	r24, 0x02	; 2
    2034:	6f 85       	ldd	r22, Y+15	; 0x0f
    2036:	40 e0       	ldi	r20, 0x00	; 0
    2038:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    203c:	18 8a       	std	Y+16, r1	; 0x10
    203e:	24 c0       	rjmp	.+72     	; 0x2088 <KEYPAD_getPressedKey+0xc8>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    2040:	88 89       	ldd	r24, Y+16	; 0x10
    2042:	98 2f       	mov	r25, r24
    2044:	9c 5f       	subi	r25, 0xFC	; 252
    2046:	82 e0       	ldi	r24, 0x02	; 2
    2048:	69 2f       	mov	r22, r25
    204a:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <GPIO_readPin>
    204e:	88 23       	and	r24, r24
    2050:	c1 f4       	brne	.+48     	; 0x2082 <KEYPAD_getPressedKey+0xc2>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    2052:	8f 85       	ldd	r24, Y+15	; 0x0f
    2054:	88 2f       	mov	r24, r24
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	88 0f       	add	r24, r24
    205a:	99 1f       	adc	r25, r25
    205c:	88 0f       	add	r24, r24
    205e:	99 1f       	adc	r25, r25
    2060:	98 2f       	mov	r25, r24
    2062:	88 89       	ldd	r24, Y+16	; 0x10
    2064:	89 0f       	add	r24, r25
    2066:	8f 5f       	subi	r24, 0xFF	; 255
    2068:	0e 94 c6 10 	call	0x218c	; 0x218c <KEYPAD_4x4_adjustKeyNumber>
    206c:	88 2f       	mov	r24, r24
    206e:	90 e0       	ldi	r25, 0x00	; 0
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    2070:	60 96       	adiw	r28, 0x10	; 16
    2072:	0f b6       	in	r0, 0x3f	; 63
    2074:	f8 94       	cli
    2076:	de bf       	out	0x3e, r29	; 62
    2078:	0f be       	out	0x3f, r0	; 63
    207a:	cd bf       	out	0x3d, r28	; 61
    207c:	cf 91       	pop	r28
    207e:	df 91       	pop	r29
    2080:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    2082:	88 89       	ldd	r24, Y+16	; 0x10
    2084:	8f 5f       	subi	r24, 0xFF	; 255
    2086:	88 8b       	std	Y+16, r24	; 0x10
    2088:	88 89       	ldd	r24, Y+16	; 0x10
    208a:	84 30       	cpi	r24, 0x04	; 4
    208c:	c8 f2       	brcs	.-78     	; 0x2040 <KEYPAD_getPressedKey+0x80>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    208e:	82 e0       	ldi	r24, 0x02	; 2
    2090:	6f 85       	ldd	r22, Y+15	; 0x0f
    2092:	40 e0       	ldi	r20, 0x00	; 0
    2094:	0e 94 9e 0c 	call	0x193c	; 0x193c <GPIO_setupPinDirection>
    2098:	80 e0       	ldi	r24, 0x00	; 0
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	a0 ea       	ldi	r26, 0xA0	; 160
    209e:	b0 e4       	ldi	r27, 0x40	; 64
    20a0:	8b 87       	std	Y+11, r24	; 0x0b
    20a2:	9c 87       	std	Y+12, r25	; 0x0c
    20a4:	ad 87       	std	Y+13, r26	; 0x0d
    20a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    20aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    20ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    20ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    20b0:	20 e0       	ldi	r18, 0x00	; 0
    20b2:	30 e0       	ldi	r19, 0x00	; 0
    20b4:	4a ef       	ldi	r20, 0xFA	; 250
    20b6:	54 e4       	ldi	r21, 0x44	; 68
    20b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20bc:	dc 01       	movw	r26, r24
    20be:	cb 01       	movw	r24, r22
    20c0:	8f 83       	std	Y+7, r24	; 0x07
    20c2:	98 87       	std	Y+8, r25	; 0x08
    20c4:	a9 87       	std	Y+9, r26	; 0x09
    20c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20c8:	6f 81       	ldd	r22, Y+7	; 0x07
    20ca:	78 85       	ldd	r23, Y+8	; 0x08
    20cc:	89 85       	ldd	r24, Y+9	; 0x09
    20ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    20d0:	20 e0       	ldi	r18, 0x00	; 0
    20d2:	30 e0       	ldi	r19, 0x00	; 0
    20d4:	40 e8       	ldi	r20, 0x80	; 128
    20d6:	5f e3       	ldi	r21, 0x3F	; 63
    20d8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20dc:	88 23       	and	r24, r24
    20de:	2c f4       	brge	.+10     	; 0x20ea <KEYPAD_getPressedKey+0x12a>
		__ticks = 1;
    20e0:	81 e0       	ldi	r24, 0x01	; 1
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	9e 83       	std	Y+6, r25	; 0x06
    20e6:	8d 83       	std	Y+5, r24	; 0x05
    20e8:	3f c0       	rjmp	.+126    	; 0x2168 <KEYPAD_getPressedKey+0x1a8>
	else if (__tmp > 65535)
    20ea:	6f 81       	ldd	r22, Y+7	; 0x07
    20ec:	78 85       	ldd	r23, Y+8	; 0x08
    20ee:	89 85       	ldd	r24, Y+9	; 0x09
    20f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    20f2:	20 e0       	ldi	r18, 0x00	; 0
    20f4:	3f ef       	ldi	r19, 0xFF	; 255
    20f6:	4f e7       	ldi	r20, 0x7F	; 127
    20f8:	57 e4       	ldi	r21, 0x47	; 71
    20fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20fe:	18 16       	cp	r1, r24
    2100:	4c f5       	brge	.+82     	; 0x2154 <KEYPAD_getPressedKey+0x194>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2102:	6b 85       	ldd	r22, Y+11	; 0x0b
    2104:	7c 85       	ldd	r23, Y+12	; 0x0c
    2106:	8d 85       	ldd	r24, Y+13	; 0x0d
    2108:	9e 85       	ldd	r25, Y+14	; 0x0e
    210a:	20 e0       	ldi	r18, 0x00	; 0
    210c:	30 e0       	ldi	r19, 0x00	; 0
    210e:	40 e2       	ldi	r20, 0x20	; 32
    2110:	51 e4       	ldi	r21, 0x41	; 65
    2112:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2116:	dc 01       	movw	r26, r24
    2118:	cb 01       	movw	r24, r22
    211a:	bc 01       	movw	r22, r24
    211c:	cd 01       	movw	r24, r26
    211e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2122:	dc 01       	movw	r26, r24
    2124:	cb 01       	movw	r24, r22
    2126:	9e 83       	std	Y+6, r25	; 0x06
    2128:	8d 83       	std	Y+5, r24	; 0x05
    212a:	0f c0       	rjmp	.+30     	; 0x214a <KEYPAD_getPressedKey+0x18a>
    212c:	88 ec       	ldi	r24, 0xC8	; 200
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	9c 83       	std	Y+4, r25	; 0x04
    2132:	8b 83       	std	Y+3, r24	; 0x03
    2134:	8b 81       	ldd	r24, Y+3	; 0x03
    2136:	9c 81       	ldd	r25, Y+4	; 0x04
    2138:	01 97       	sbiw	r24, 0x01	; 1
    213a:	f1 f7       	brne	.-4      	; 0x2138 <KEYPAD_getPressedKey+0x178>
    213c:	9c 83       	std	Y+4, r25	; 0x04
    213e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2140:	8d 81       	ldd	r24, Y+5	; 0x05
    2142:	9e 81       	ldd	r25, Y+6	; 0x06
    2144:	01 97       	sbiw	r24, 0x01	; 1
    2146:	9e 83       	std	Y+6, r25	; 0x06
    2148:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    214a:	8d 81       	ldd	r24, Y+5	; 0x05
    214c:	9e 81       	ldd	r25, Y+6	; 0x06
    214e:	00 97       	sbiw	r24, 0x00	; 0
    2150:	69 f7       	brne	.-38     	; 0x212c <KEYPAD_getPressedKey+0x16c>
    2152:	14 c0       	rjmp	.+40     	; 0x217c <KEYPAD_getPressedKey+0x1bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2154:	6f 81       	ldd	r22, Y+7	; 0x07
    2156:	78 85       	ldd	r23, Y+8	; 0x08
    2158:	89 85       	ldd	r24, Y+9	; 0x09
    215a:	9a 85       	ldd	r25, Y+10	; 0x0a
    215c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2160:	dc 01       	movw	r26, r24
    2162:	cb 01       	movw	r24, r22
    2164:	9e 83       	std	Y+6, r25	; 0x06
    2166:	8d 83       	std	Y+5, r24	; 0x05
    2168:	8d 81       	ldd	r24, Y+5	; 0x05
    216a:	9e 81       	ldd	r25, Y+6	; 0x06
    216c:	9a 83       	std	Y+2, r25	; 0x02
    216e:	89 83       	std	Y+1, r24	; 0x01
    2170:	89 81       	ldd	r24, Y+1	; 0x01
    2172:	9a 81       	ldd	r25, Y+2	; 0x02
    2174:	01 97       	sbiw	r24, 0x01	; 1
    2176:	f1 f7       	brne	.-4      	; 0x2174 <KEYPAD_getPressedKey+0x1b4>
    2178:	9a 83       	std	Y+2, r25	; 0x02
    217a:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    217c:	8f 85       	ldd	r24, Y+15	; 0x0f
    217e:	8f 5f       	subi	r24, 0xFF	; 255
    2180:	8f 87       	std	Y+15, r24	; 0x0f
    2182:	8f 85       	ldd	r24, Y+15	; 0x0f
    2184:	84 30       	cpi	r24, 0x04	; 4
    2186:	08 f4       	brcc	.+2      	; 0x218a <KEYPAD_getPressedKey+0x1ca>
    2188:	4f cf       	rjmp	.-354    	; 0x2028 <KEYPAD_getPressedKey+0x68>
    218a:	4c cf       	rjmp	.-360    	; 0x2024 <KEYPAD_getPressedKey+0x64>

0000218c <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    218c:	df 93       	push	r29
    218e:	cf 93       	push	r28
    2190:	00 d0       	rcall	.+0      	; 0x2192 <KEYPAD_4x4_adjustKeyNumber+0x6>
    2192:	00 d0       	rcall	.+0      	; 0x2194 <KEYPAD_4x4_adjustKeyNumber+0x8>
    2194:	cd b7       	in	r28, 0x3d	; 61
    2196:	de b7       	in	r29, 0x3e	; 62
    2198:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    219a:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    219c:	8a 81       	ldd	r24, Y+2	; 0x02
    219e:	28 2f       	mov	r18, r24
    21a0:	30 e0       	ldi	r19, 0x00	; 0
    21a2:	3c 83       	std	Y+4, r19	; 0x04
    21a4:	2b 83       	std	Y+3, r18	; 0x03
    21a6:	8b 81       	ldd	r24, Y+3	; 0x03
    21a8:	9c 81       	ldd	r25, Y+4	; 0x04
    21aa:	88 30       	cpi	r24, 0x08	; 8
    21ac:	91 05       	cpc	r25, r1
    21ae:	09 f4       	brne	.+2      	; 0x21b2 <KEYPAD_4x4_adjustKeyNumber+0x26>
    21b0:	70 c0       	rjmp	.+224    	; 0x2292 <KEYPAD_4x4_adjustKeyNumber+0x106>
    21b2:	2b 81       	ldd	r18, Y+3	; 0x03
    21b4:	3c 81       	ldd	r19, Y+4	; 0x04
    21b6:	29 30       	cpi	r18, 0x09	; 9
    21b8:	31 05       	cpc	r19, r1
    21ba:	5c f5       	brge	.+86     	; 0x2212 <KEYPAD_4x4_adjustKeyNumber+0x86>
    21bc:	8b 81       	ldd	r24, Y+3	; 0x03
    21be:	9c 81       	ldd	r25, Y+4	; 0x04
    21c0:	84 30       	cpi	r24, 0x04	; 4
    21c2:	91 05       	cpc	r25, r1
    21c4:	09 f4       	brne	.+2      	; 0x21c8 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    21c6:	59 c0       	rjmp	.+178    	; 0x227a <KEYPAD_4x4_adjustKeyNumber+0xee>
    21c8:	2b 81       	ldd	r18, Y+3	; 0x03
    21ca:	3c 81       	ldd	r19, Y+4	; 0x04
    21cc:	25 30       	cpi	r18, 0x05	; 5
    21ce:	31 05       	cpc	r19, r1
    21d0:	9c f4       	brge	.+38     	; 0x21f8 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    21d2:	8b 81       	ldd	r24, Y+3	; 0x03
    21d4:	9c 81       	ldd	r25, Y+4	; 0x04
    21d6:	82 30       	cpi	r24, 0x02	; 2
    21d8:	91 05       	cpc	r25, r1
    21da:	09 f4       	brne	.+2      	; 0x21de <KEYPAD_4x4_adjustKeyNumber+0x52>
    21dc:	48 c0       	rjmp	.+144    	; 0x226e <KEYPAD_4x4_adjustKeyNumber+0xe2>
    21de:	2b 81       	ldd	r18, Y+3	; 0x03
    21e0:	3c 81       	ldd	r19, Y+4	; 0x04
    21e2:	23 30       	cpi	r18, 0x03	; 3
    21e4:	31 05       	cpc	r19, r1
    21e6:	0c f0       	brlt	.+2      	; 0x21ea <KEYPAD_4x4_adjustKeyNumber+0x5e>
    21e8:	45 c0       	rjmp	.+138    	; 0x2274 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    21ea:	8b 81       	ldd	r24, Y+3	; 0x03
    21ec:	9c 81       	ldd	r25, Y+4	; 0x04
    21ee:	81 30       	cpi	r24, 0x01	; 1
    21f0:	91 05       	cpc	r25, r1
    21f2:	09 f4       	brne	.+2      	; 0x21f6 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    21f4:	39 c0       	rjmp	.+114    	; 0x2268 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    21f6:	68 c0       	rjmp	.+208    	; 0x22c8 <KEYPAD_4x4_adjustKeyNumber+0x13c>
    21f8:	2b 81       	ldd	r18, Y+3	; 0x03
    21fa:	3c 81       	ldd	r19, Y+4	; 0x04
    21fc:	26 30       	cpi	r18, 0x06	; 6
    21fe:	31 05       	cpc	r19, r1
    2200:	09 f4       	brne	.+2      	; 0x2204 <KEYPAD_4x4_adjustKeyNumber+0x78>
    2202:	41 c0       	rjmp	.+130    	; 0x2286 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2204:	8b 81       	ldd	r24, Y+3	; 0x03
    2206:	9c 81       	ldd	r25, Y+4	; 0x04
    2208:	87 30       	cpi	r24, 0x07	; 7
    220a:	91 05       	cpc	r25, r1
    220c:	0c f0       	brlt	.+2      	; 0x2210 <KEYPAD_4x4_adjustKeyNumber+0x84>
    220e:	3e c0       	rjmp	.+124    	; 0x228c <KEYPAD_4x4_adjustKeyNumber+0x100>
    2210:	37 c0       	rjmp	.+110    	; 0x2280 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2212:	2b 81       	ldd	r18, Y+3	; 0x03
    2214:	3c 81       	ldd	r19, Y+4	; 0x04
    2216:	2c 30       	cpi	r18, 0x0C	; 12
    2218:	31 05       	cpc	r19, r1
    221a:	09 f4       	brne	.+2      	; 0x221e <KEYPAD_4x4_adjustKeyNumber+0x92>
    221c:	46 c0       	rjmp	.+140    	; 0x22aa <KEYPAD_4x4_adjustKeyNumber+0x11e>
    221e:	8b 81       	ldd	r24, Y+3	; 0x03
    2220:	9c 81       	ldd	r25, Y+4	; 0x04
    2222:	8d 30       	cpi	r24, 0x0D	; 13
    2224:	91 05       	cpc	r25, r1
    2226:	5c f4       	brge	.+22     	; 0x223e <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2228:	2b 81       	ldd	r18, Y+3	; 0x03
    222a:	3c 81       	ldd	r19, Y+4	; 0x04
    222c:	2a 30       	cpi	r18, 0x0A	; 10
    222e:	31 05       	cpc	r19, r1
    2230:	b1 f1       	breq	.+108    	; 0x229e <KEYPAD_4x4_adjustKeyNumber+0x112>
    2232:	8b 81       	ldd	r24, Y+3	; 0x03
    2234:	9c 81       	ldd	r25, Y+4	; 0x04
    2236:	8b 30       	cpi	r24, 0x0B	; 11
    2238:	91 05       	cpc	r25, r1
    223a:	a4 f5       	brge	.+104    	; 0x22a4 <KEYPAD_4x4_adjustKeyNumber+0x118>
    223c:	2d c0       	rjmp	.+90     	; 0x2298 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    223e:	2b 81       	ldd	r18, Y+3	; 0x03
    2240:	3c 81       	ldd	r19, Y+4	; 0x04
    2242:	2e 30       	cpi	r18, 0x0E	; 14
    2244:	31 05       	cpc	r19, r1
    2246:	b9 f1       	breq	.+110    	; 0x22b6 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2248:	8b 81       	ldd	r24, Y+3	; 0x03
    224a:	9c 81       	ldd	r25, Y+4	; 0x04
    224c:	8e 30       	cpi	r24, 0x0E	; 14
    224e:	91 05       	cpc	r25, r1
    2250:	7c f1       	brlt	.+94     	; 0x22b0 <KEYPAD_4x4_adjustKeyNumber+0x124>
    2252:	2b 81       	ldd	r18, Y+3	; 0x03
    2254:	3c 81       	ldd	r19, Y+4	; 0x04
    2256:	2f 30       	cpi	r18, 0x0F	; 15
    2258:	31 05       	cpc	r19, r1
    225a:	81 f1       	breq	.+96     	; 0x22bc <KEYPAD_4x4_adjustKeyNumber+0x130>
    225c:	8b 81       	ldd	r24, Y+3	; 0x03
    225e:	9c 81       	ldd	r25, Y+4	; 0x04
    2260:	80 31       	cpi	r24, 0x10	; 16
    2262:	91 05       	cpc	r25, r1
    2264:	71 f1       	breq	.+92     	; 0x22c2 <KEYPAD_4x4_adjustKeyNumber+0x136>
    2266:	30 c0       	rjmp	.+96     	; 0x22c8 <KEYPAD_4x4_adjustKeyNumber+0x13c>
	{
		case 1: keypad_button = '7';
    2268:	87 e3       	ldi	r24, 0x37	; 55
    226a:	89 83       	std	Y+1, r24	; 0x01
    226c:	2f c0       	rjmp	.+94     	; 0x22cc <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 2: keypad_button = '8';
    226e:	88 e3       	ldi	r24, 0x38	; 56
    2270:	89 83       	std	Y+1, r24	; 0x01
    2272:	2c c0       	rjmp	.+88     	; 0x22cc <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 3: keypad_button = '9';
    2274:	89 e3       	ldi	r24, 0x39	; 57
    2276:	89 83       	std	Y+1, r24	; 0x01
    2278:	29 c0       	rjmp	.+82     	; 0x22cc <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    227a:	85 e2       	ldi	r24, 0x25	; 37
    227c:	89 83       	std	Y+1, r24	; 0x01
    227e:	26 c0       	rjmp	.+76     	; 0x22cc <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 5: keypad_button = '4';
    2280:	84 e3       	ldi	r24, 0x34	; 52
    2282:	89 83       	std	Y+1, r24	; 0x01
    2284:	23 c0       	rjmp	.+70     	; 0x22cc <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 6: keypad_button = '5';
    2286:	85 e3       	ldi	r24, 0x35	; 53
    2288:	89 83       	std	Y+1, r24	; 0x01
    228a:	20 c0       	rjmp	.+64     	; 0x22cc <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 7: keypad_button = '6';
    228c:	86 e3       	ldi	r24, 0x36	; 54
    228e:	89 83       	std	Y+1, r24	; 0x01
    2290:	1d c0       	rjmp	.+58     	; 0x22cc <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    2292:	8a e2       	ldi	r24, 0x2A	; 42
    2294:	89 83       	std	Y+1, r24	; 0x01
    2296:	1a c0       	rjmp	.+52     	; 0x22cc <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;		
		case 9: keypad_button = '1';
    2298:	81 e3       	ldi	r24, 0x31	; 49
    229a:	89 83       	std	Y+1, r24	; 0x01
    229c:	17 c0       	rjmp	.+46     	; 0x22cc <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 10: keypad_button = '2';
    229e:	82 e3       	ldi	r24, 0x32	; 50
    22a0:	89 83       	std	Y+1, r24	; 0x01
    22a2:	14 c0       	rjmp	.+40     	; 0x22cc <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 11: keypad_button = '3';
    22a4:	83 e3       	ldi	r24, 0x33	; 51
    22a6:	89 83       	std	Y+1, r24	; 0x01
    22a8:	11 c0       	rjmp	.+34     	; 0x22cc <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    22aa:	8d e2       	ldi	r24, 0x2D	; 45
    22ac:	89 83       	std	Y+1, r24	; 0x01
    22ae:	0e c0       	rjmp	.+28     	; 0x22cc <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    22b0:	8d e0       	ldi	r24, 0x0D	; 13
    22b2:	89 83       	std	Y+1, r24	; 0x01
    22b4:	0b c0       	rjmp	.+22     	; 0x22cc <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;			
		case 14: keypad_button = '0';
    22b6:	80 e3       	ldi	r24, 0x30	; 48
    22b8:	89 83       	std	Y+1, r24	; 0x01
    22ba:	08 c0       	rjmp	.+16     	; 0x22cc <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    22bc:	8d e3       	ldi	r24, 0x3D	; 61
    22be:	89 83       	std	Y+1, r24	; 0x01
    22c0:	05 c0       	rjmp	.+10     	; 0x22cc <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    22c2:	8b e2       	ldi	r24, 0x2B	; 43
    22c4:	89 83       	std	Y+1, r24	; 0x01
    22c6:	02 c0       	rjmp	.+4      	; 0x22cc <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		default: keypad_button = button_number;
    22c8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ca:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    22cc:	89 81       	ldd	r24, Y+1	; 0x01
} 
    22ce:	0f 90       	pop	r0
    22d0:	0f 90       	pop	r0
    22d2:	0f 90       	pop	r0
    22d4:	0f 90       	pop	r0
    22d6:	cf 91       	pop	r28
    22d8:	df 91       	pop	r29
    22da:	08 95       	ret

000022dc <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    22dc:	df 93       	push	r29
    22de:	cf 93       	push	r28
    22e0:	cd b7       	in	r28, 0x3d	; 61
    22e2:	de b7       	in	r29, 0x3e	; 62
    22e4:	2e 97       	sbiw	r28, 0x0e	; 14
    22e6:	0f b6       	in	r0, 0x3f	; 63
    22e8:	f8 94       	cli
    22ea:	de bf       	out	0x3e, r29	; 62
    22ec:	0f be       	out	0x3f, r0	; 63
    22ee:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    22f0:	80 e0       	ldi	r24, 0x00	; 0
    22f2:	65 e0       	ldi	r22, 0x05	; 5
    22f4:	41 e0       	ldi	r20, 0x01	; 1
    22f6:	0e 94 9e 0c 	call	0x193c	; 0x193c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    22fa:	80 e0       	ldi	r24, 0x00	; 0
    22fc:	64 e0       	ldi	r22, 0x04	; 4
    22fe:	41 e0       	ldi	r20, 0x01	; 1
    2300:	0e 94 9e 0c 	call	0x193c	; 0x193c <GPIO_setupPinDirection>
    2304:	80 e0       	ldi	r24, 0x00	; 0
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	a0 ea       	ldi	r26, 0xA0	; 160
    230a:	b1 e4       	ldi	r27, 0x41	; 65
    230c:	8b 87       	std	Y+11, r24	; 0x0b
    230e:	9c 87       	std	Y+12, r25	; 0x0c
    2310:	ad 87       	std	Y+13, r26	; 0x0d
    2312:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2314:	6b 85       	ldd	r22, Y+11	; 0x0b
    2316:	7c 85       	ldd	r23, Y+12	; 0x0c
    2318:	8d 85       	ldd	r24, Y+13	; 0x0d
    231a:	9e 85       	ldd	r25, Y+14	; 0x0e
    231c:	20 e0       	ldi	r18, 0x00	; 0
    231e:	30 e0       	ldi	r19, 0x00	; 0
    2320:	4a ef       	ldi	r20, 0xFA	; 250
    2322:	54 e4       	ldi	r21, 0x44	; 68
    2324:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2328:	dc 01       	movw	r26, r24
    232a:	cb 01       	movw	r24, r22
    232c:	8f 83       	std	Y+7, r24	; 0x07
    232e:	98 87       	std	Y+8, r25	; 0x08
    2330:	a9 87       	std	Y+9, r26	; 0x09
    2332:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2334:	6f 81       	ldd	r22, Y+7	; 0x07
    2336:	78 85       	ldd	r23, Y+8	; 0x08
    2338:	89 85       	ldd	r24, Y+9	; 0x09
    233a:	9a 85       	ldd	r25, Y+10	; 0x0a
    233c:	20 e0       	ldi	r18, 0x00	; 0
    233e:	30 e0       	ldi	r19, 0x00	; 0
    2340:	40 e8       	ldi	r20, 0x80	; 128
    2342:	5f e3       	ldi	r21, 0x3F	; 63
    2344:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2348:	88 23       	and	r24, r24
    234a:	2c f4       	brge	.+10     	; 0x2356 <LCD_init+0x7a>
		__ticks = 1;
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	9e 83       	std	Y+6, r25	; 0x06
    2352:	8d 83       	std	Y+5, r24	; 0x05
    2354:	3f c0       	rjmp	.+126    	; 0x23d4 <LCD_init+0xf8>
	else if (__tmp > 65535)
    2356:	6f 81       	ldd	r22, Y+7	; 0x07
    2358:	78 85       	ldd	r23, Y+8	; 0x08
    235a:	89 85       	ldd	r24, Y+9	; 0x09
    235c:	9a 85       	ldd	r25, Y+10	; 0x0a
    235e:	20 e0       	ldi	r18, 0x00	; 0
    2360:	3f ef       	ldi	r19, 0xFF	; 255
    2362:	4f e7       	ldi	r20, 0x7F	; 127
    2364:	57 e4       	ldi	r21, 0x47	; 71
    2366:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    236a:	18 16       	cp	r1, r24
    236c:	4c f5       	brge	.+82     	; 0x23c0 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    236e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2370:	7c 85       	ldd	r23, Y+12	; 0x0c
    2372:	8d 85       	ldd	r24, Y+13	; 0x0d
    2374:	9e 85       	ldd	r25, Y+14	; 0x0e
    2376:	20 e0       	ldi	r18, 0x00	; 0
    2378:	30 e0       	ldi	r19, 0x00	; 0
    237a:	40 e2       	ldi	r20, 0x20	; 32
    237c:	51 e4       	ldi	r21, 0x41	; 65
    237e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2382:	dc 01       	movw	r26, r24
    2384:	cb 01       	movw	r24, r22
    2386:	bc 01       	movw	r22, r24
    2388:	cd 01       	movw	r24, r26
    238a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    238e:	dc 01       	movw	r26, r24
    2390:	cb 01       	movw	r24, r22
    2392:	9e 83       	std	Y+6, r25	; 0x06
    2394:	8d 83       	std	Y+5, r24	; 0x05
    2396:	0f c0       	rjmp	.+30     	; 0x23b6 <LCD_init+0xda>
    2398:	88 ec       	ldi	r24, 0xC8	; 200
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	9c 83       	std	Y+4, r25	; 0x04
    239e:	8b 83       	std	Y+3, r24	; 0x03
    23a0:	8b 81       	ldd	r24, Y+3	; 0x03
    23a2:	9c 81       	ldd	r25, Y+4	; 0x04
    23a4:	01 97       	sbiw	r24, 0x01	; 1
    23a6:	f1 f7       	brne	.-4      	; 0x23a4 <LCD_init+0xc8>
    23a8:	9c 83       	std	Y+4, r25	; 0x04
    23aa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ac:	8d 81       	ldd	r24, Y+5	; 0x05
    23ae:	9e 81       	ldd	r25, Y+6	; 0x06
    23b0:	01 97       	sbiw	r24, 0x01	; 1
    23b2:	9e 83       	std	Y+6, r25	; 0x06
    23b4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23b6:	8d 81       	ldd	r24, Y+5	; 0x05
    23b8:	9e 81       	ldd	r25, Y+6	; 0x06
    23ba:	00 97       	sbiw	r24, 0x00	; 0
    23bc:	69 f7       	brne	.-38     	; 0x2398 <LCD_init+0xbc>
    23be:	14 c0       	rjmp	.+40     	; 0x23e8 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23c0:	6f 81       	ldd	r22, Y+7	; 0x07
    23c2:	78 85       	ldd	r23, Y+8	; 0x08
    23c4:	89 85       	ldd	r24, Y+9	; 0x09
    23c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    23c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23cc:	dc 01       	movw	r26, r24
    23ce:	cb 01       	movw	r24, r22
    23d0:	9e 83       	std	Y+6, r25	; 0x06
    23d2:	8d 83       	std	Y+5, r24	; 0x05
    23d4:	8d 81       	ldd	r24, Y+5	; 0x05
    23d6:	9e 81       	ldd	r25, Y+6	; 0x06
    23d8:	9a 83       	std	Y+2, r25	; 0x02
    23da:	89 83       	std	Y+1, r24	; 0x01
    23dc:	89 81       	ldd	r24, Y+1	; 0x01
    23de:	9a 81       	ldd	r25, Y+2	; 0x02
    23e0:	01 97       	sbiw	r24, 0x01	; 1
    23e2:	f1 f7       	brne	.-4      	; 0x23e0 <LCD_init+0x104>
    23e4:	9a 83       	std	Y+2, r25	; 0x02
    23e6:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    23e8:	80 e0       	ldi	r24, 0x00	; 0
    23ea:	60 e0       	ldi	r22, 0x00	; 0
    23ec:	41 e0       	ldi	r20, 0x01	; 1
    23ee:	0e 94 9e 0c 	call	0x193c	; 0x193c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    23f2:	80 e0       	ldi	r24, 0x00	; 0
    23f4:	61 e0       	ldi	r22, 0x01	; 1
    23f6:	41 e0       	ldi	r20, 0x01	; 1
    23f8:	0e 94 9e 0c 	call	0x193c	; 0x193c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    23fc:	80 e0       	ldi	r24, 0x00	; 0
    23fe:	62 e0       	ldi	r22, 0x02	; 2
    2400:	41 e0       	ldi	r20, 0x01	; 1
    2402:	0e 94 9e 0c 	call	0x193c	; 0x193c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    2406:	80 e0       	ldi	r24, 0x00	; 0
    2408:	63 e0       	ldi	r22, 0x03	; 3
    240a:	41 e0       	ldi	r20, 0x01	; 1
    240c:	0e 94 9e 0c 	call	0x193c	; 0x193c <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    2410:	83 e3       	ldi	r24, 0x33	; 51
    2412:	0e 94 20 12 	call	0x2440	; 0x2440 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    2416:	82 e3       	ldi	r24, 0x32	; 50
    2418:	0e 94 20 12 	call	0x2440	; 0x2440 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    241c:	88 e2       	ldi	r24, 0x28	; 40
    241e:	0e 94 20 12 	call	0x2440	; 0x2440 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    2422:	8c e0       	ldi	r24, 0x0C	; 12
    2424:	0e 94 20 12 	call	0x2440	; 0x2440 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2428:	81 e0       	ldi	r24, 0x01	; 1
    242a:	0e 94 20 12 	call	0x2440	; 0x2440 <LCD_sendCommand>
}
    242e:	2e 96       	adiw	r28, 0x0e	; 14
    2430:	0f b6       	in	r0, 0x3f	; 63
    2432:	f8 94       	cli
    2434:	de bf       	out	0x3e, r29	; 62
    2436:	0f be       	out	0x3f, r0	; 63
    2438:	cd bf       	out	0x3d, r28	; 61
    243a:	cf 91       	pop	r28
    243c:	df 91       	pop	r29
    243e:	08 95       	ret

00002440 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    2440:	0f 93       	push	r16
    2442:	1f 93       	push	r17
    2444:	df 93       	push	r29
    2446:	cf 93       	push	r28
    2448:	cd b7       	in	r28, 0x3d	; 61
    244a:	de b7       	in	r29, 0x3e	; 62
    244c:	c3 56       	subi	r28, 0x63	; 99
    244e:	d0 40       	sbci	r29, 0x00	; 0
    2450:	0f b6       	in	r0, 0x3f	; 63
    2452:	f8 94       	cli
    2454:	de bf       	out	0x3e, r29	; 62
    2456:	0f be       	out	0x3f, r0	; 63
    2458:	cd bf       	out	0x3d, r28	; 61
    245a:	fe 01       	movw	r30, r28
    245c:	ed 59       	subi	r30, 0x9D	; 157
    245e:	ff 4f       	sbci	r31, 0xFF	; 255
    2460:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    2462:	80 e0       	ldi	r24, 0x00	; 0
    2464:	65 e0       	ldi	r22, 0x05	; 5
    2466:	40 e0       	ldi	r20, 0x00	; 0
    2468:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <GPIO_writePin>
    246c:	fe 01       	movw	r30, r28
    246e:	e1 5a       	subi	r30, 0xA1	; 161
    2470:	ff 4f       	sbci	r31, 0xFF	; 255
    2472:	80 e0       	ldi	r24, 0x00	; 0
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	a0 e8       	ldi	r26, 0x80	; 128
    2478:	bf e3       	ldi	r27, 0x3F	; 63
    247a:	80 83       	st	Z, r24
    247c:	91 83       	std	Z+1, r25	; 0x01
    247e:	a2 83       	std	Z+2, r26	; 0x02
    2480:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2482:	8e 01       	movw	r16, r28
    2484:	05 5a       	subi	r16, 0xA5	; 165
    2486:	1f 4f       	sbci	r17, 0xFF	; 255
    2488:	fe 01       	movw	r30, r28
    248a:	e1 5a       	subi	r30, 0xA1	; 161
    248c:	ff 4f       	sbci	r31, 0xFF	; 255
    248e:	60 81       	ld	r22, Z
    2490:	71 81       	ldd	r23, Z+1	; 0x01
    2492:	82 81       	ldd	r24, Z+2	; 0x02
    2494:	93 81       	ldd	r25, Z+3	; 0x03
    2496:	20 e0       	ldi	r18, 0x00	; 0
    2498:	30 e0       	ldi	r19, 0x00	; 0
    249a:	4a ef       	ldi	r20, 0xFA	; 250
    249c:	54 e4       	ldi	r21, 0x44	; 68
    249e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a2:	dc 01       	movw	r26, r24
    24a4:	cb 01       	movw	r24, r22
    24a6:	f8 01       	movw	r30, r16
    24a8:	80 83       	st	Z, r24
    24aa:	91 83       	std	Z+1, r25	; 0x01
    24ac:	a2 83       	std	Z+2, r26	; 0x02
    24ae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24b0:	fe 01       	movw	r30, r28
    24b2:	e5 5a       	subi	r30, 0xA5	; 165
    24b4:	ff 4f       	sbci	r31, 0xFF	; 255
    24b6:	60 81       	ld	r22, Z
    24b8:	71 81       	ldd	r23, Z+1	; 0x01
    24ba:	82 81       	ldd	r24, Z+2	; 0x02
    24bc:	93 81       	ldd	r25, Z+3	; 0x03
    24be:	20 e0       	ldi	r18, 0x00	; 0
    24c0:	30 e0       	ldi	r19, 0x00	; 0
    24c2:	40 e8       	ldi	r20, 0x80	; 128
    24c4:	5f e3       	ldi	r21, 0x3F	; 63
    24c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24ca:	88 23       	and	r24, r24
    24cc:	44 f4       	brge	.+16     	; 0x24de <LCD_sendCommand+0x9e>
		__ticks = 1;
    24ce:	fe 01       	movw	r30, r28
    24d0:	e7 5a       	subi	r30, 0xA7	; 167
    24d2:	ff 4f       	sbci	r31, 0xFF	; 255
    24d4:	81 e0       	ldi	r24, 0x01	; 1
    24d6:	90 e0       	ldi	r25, 0x00	; 0
    24d8:	91 83       	std	Z+1, r25	; 0x01
    24da:	80 83       	st	Z, r24
    24dc:	64 c0       	rjmp	.+200    	; 0x25a6 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    24de:	fe 01       	movw	r30, r28
    24e0:	e5 5a       	subi	r30, 0xA5	; 165
    24e2:	ff 4f       	sbci	r31, 0xFF	; 255
    24e4:	60 81       	ld	r22, Z
    24e6:	71 81       	ldd	r23, Z+1	; 0x01
    24e8:	82 81       	ldd	r24, Z+2	; 0x02
    24ea:	93 81       	ldd	r25, Z+3	; 0x03
    24ec:	20 e0       	ldi	r18, 0x00	; 0
    24ee:	3f ef       	ldi	r19, 0xFF	; 255
    24f0:	4f e7       	ldi	r20, 0x7F	; 127
    24f2:	57 e4       	ldi	r21, 0x47	; 71
    24f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24f8:	18 16       	cp	r1, r24
    24fa:	0c f0       	brlt	.+2      	; 0x24fe <LCD_sendCommand+0xbe>
    24fc:	43 c0       	rjmp	.+134    	; 0x2584 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24fe:	fe 01       	movw	r30, r28
    2500:	e1 5a       	subi	r30, 0xA1	; 161
    2502:	ff 4f       	sbci	r31, 0xFF	; 255
    2504:	60 81       	ld	r22, Z
    2506:	71 81       	ldd	r23, Z+1	; 0x01
    2508:	82 81       	ldd	r24, Z+2	; 0x02
    250a:	93 81       	ldd	r25, Z+3	; 0x03
    250c:	20 e0       	ldi	r18, 0x00	; 0
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	40 e2       	ldi	r20, 0x20	; 32
    2512:	51 e4       	ldi	r21, 0x41	; 65
    2514:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2518:	dc 01       	movw	r26, r24
    251a:	cb 01       	movw	r24, r22
    251c:	8e 01       	movw	r16, r28
    251e:	07 5a       	subi	r16, 0xA7	; 167
    2520:	1f 4f       	sbci	r17, 0xFF	; 255
    2522:	bc 01       	movw	r22, r24
    2524:	cd 01       	movw	r24, r26
    2526:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    252a:	dc 01       	movw	r26, r24
    252c:	cb 01       	movw	r24, r22
    252e:	f8 01       	movw	r30, r16
    2530:	91 83       	std	Z+1, r25	; 0x01
    2532:	80 83       	st	Z, r24
    2534:	1f c0       	rjmp	.+62     	; 0x2574 <LCD_sendCommand+0x134>
    2536:	fe 01       	movw	r30, r28
    2538:	e9 5a       	subi	r30, 0xA9	; 169
    253a:	ff 4f       	sbci	r31, 0xFF	; 255
    253c:	88 ec       	ldi	r24, 0xC8	; 200
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	91 83       	std	Z+1, r25	; 0x01
    2542:	80 83       	st	Z, r24
    2544:	fe 01       	movw	r30, r28
    2546:	e9 5a       	subi	r30, 0xA9	; 169
    2548:	ff 4f       	sbci	r31, 0xFF	; 255
    254a:	80 81       	ld	r24, Z
    254c:	91 81       	ldd	r25, Z+1	; 0x01
    254e:	01 97       	sbiw	r24, 0x01	; 1
    2550:	f1 f7       	brne	.-4      	; 0x254e <LCD_sendCommand+0x10e>
    2552:	fe 01       	movw	r30, r28
    2554:	e9 5a       	subi	r30, 0xA9	; 169
    2556:	ff 4f       	sbci	r31, 0xFF	; 255
    2558:	91 83       	std	Z+1, r25	; 0x01
    255a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    255c:	de 01       	movw	r26, r28
    255e:	a7 5a       	subi	r26, 0xA7	; 167
    2560:	bf 4f       	sbci	r27, 0xFF	; 255
    2562:	fe 01       	movw	r30, r28
    2564:	e7 5a       	subi	r30, 0xA7	; 167
    2566:	ff 4f       	sbci	r31, 0xFF	; 255
    2568:	80 81       	ld	r24, Z
    256a:	91 81       	ldd	r25, Z+1	; 0x01
    256c:	01 97       	sbiw	r24, 0x01	; 1
    256e:	11 96       	adiw	r26, 0x01	; 1
    2570:	9c 93       	st	X, r25
    2572:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2574:	fe 01       	movw	r30, r28
    2576:	e7 5a       	subi	r30, 0xA7	; 167
    2578:	ff 4f       	sbci	r31, 0xFF	; 255
    257a:	80 81       	ld	r24, Z
    257c:	91 81       	ldd	r25, Z+1	; 0x01
    257e:	00 97       	sbiw	r24, 0x00	; 0
    2580:	d1 f6       	brne	.-76     	; 0x2536 <LCD_sendCommand+0xf6>
    2582:	27 c0       	rjmp	.+78     	; 0x25d2 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2584:	8e 01       	movw	r16, r28
    2586:	07 5a       	subi	r16, 0xA7	; 167
    2588:	1f 4f       	sbci	r17, 0xFF	; 255
    258a:	fe 01       	movw	r30, r28
    258c:	e5 5a       	subi	r30, 0xA5	; 165
    258e:	ff 4f       	sbci	r31, 0xFF	; 255
    2590:	60 81       	ld	r22, Z
    2592:	71 81       	ldd	r23, Z+1	; 0x01
    2594:	82 81       	ldd	r24, Z+2	; 0x02
    2596:	93 81       	ldd	r25, Z+3	; 0x03
    2598:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    259c:	dc 01       	movw	r26, r24
    259e:	cb 01       	movw	r24, r22
    25a0:	f8 01       	movw	r30, r16
    25a2:	91 83       	std	Z+1, r25	; 0x01
    25a4:	80 83       	st	Z, r24
    25a6:	de 01       	movw	r26, r28
    25a8:	ab 5a       	subi	r26, 0xAB	; 171
    25aa:	bf 4f       	sbci	r27, 0xFF	; 255
    25ac:	fe 01       	movw	r30, r28
    25ae:	e7 5a       	subi	r30, 0xA7	; 167
    25b0:	ff 4f       	sbci	r31, 0xFF	; 255
    25b2:	80 81       	ld	r24, Z
    25b4:	91 81       	ldd	r25, Z+1	; 0x01
    25b6:	8d 93       	st	X+, r24
    25b8:	9c 93       	st	X, r25
    25ba:	fe 01       	movw	r30, r28
    25bc:	eb 5a       	subi	r30, 0xAB	; 171
    25be:	ff 4f       	sbci	r31, 0xFF	; 255
    25c0:	80 81       	ld	r24, Z
    25c2:	91 81       	ldd	r25, Z+1	; 0x01
    25c4:	01 97       	sbiw	r24, 0x01	; 1
    25c6:	f1 f7       	brne	.-4      	; 0x25c4 <LCD_sendCommand+0x184>
    25c8:	fe 01       	movw	r30, r28
    25ca:	eb 5a       	subi	r30, 0xAB	; 171
    25cc:	ff 4f       	sbci	r31, 0xFF	; 255
    25ce:	91 83       	std	Z+1, r25	; 0x01
    25d0:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    25d2:	80 e0       	ldi	r24, 0x00	; 0
    25d4:	64 e0       	ldi	r22, 0x04	; 4
    25d6:	41 e0       	ldi	r20, 0x01	; 1
    25d8:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <GPIO_writePin>
    25dc:	fe 01       	movw	r30, r28
    25de:	ef 5a       	subi	r30, 0xAF	; 175
    25e0:	ff 4f       	sbci	r31, 0xFF	; 255
    25e2:	80 e0       	ldi	r24, 0x00	; 0
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	a0 e8       	ldi	r26, 0x80	; 128
    25e8:	bf e3       	ldi	r27, 0x3F	; 63
    25ea:	80 83       	st	Z, r24
    25ec:	91 83       	std	Z+1, r25	; 0x01
    25ee:	a2 83       	std	Z+2, r26	; 0x02
    25f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25f2:	8e 01       	movw	r16, r28
    25f4:	03 5b       	subi	r16, 0xB3	; 179
    25f6:	1f 4f       	sbci	r17, 0xFF	; 255
    25f8:	fe 01       	movw	r30, r28
    25fa:	ef 5a       	subi	r30, 0xAF	; 175
    25fc:	ff 4f       	sbci	r31, 0xFF	; 255
    25fe:	60 81       	ld	r22, Z
    2600:	71 81       	ldd	r23, Z+1	; 0x01
    2602:	82 81       	ldd	r24, Z+2	; 0x02
    2604:	93 81       	ldd	r25, Z+3	; 0x03
    2606:	20 e0       	ldi	r18, 0x00	; 0
    2608:	30 e0       	ldi	r19, 0x00	; 0
    260a:	4a ef       	ldi	r20, 0xFA	; 250
    260c:	54 e4       	ldi	r21, 0x44	; 68
    260e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2612:	dc 01       	movw	r26, r24
    2614:	cb 01       	movw	r24, r22
    2616:	f8 01       	movw	r30, r16
    2618:	80 83       	st	Z, r24
    261a:	91 83       	std	Z+1, r25	; 0x01
    261c:	a2 83       	std	Z+2, r26	; 0x02
    261e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2620:	fe 01       	movw	r30, r28
    2622:	e3 5b       	subi	r30, 0xB3	; 179
    2624:	ff 4f       	sbci	r31, 0xFF	; 255
    2626:	60 81       	ld	r22, Z
    2628:	71 81       	ldd	r23, Z+1	; 0x01
    262a:	82 81       	ldd	r24, Z+2	; 0x02
    262c:	93 81       	ldd	r25, Z+3	; 0x03
    262e:	20 e0       	ldi	r18, 0x00	; 0
    2630:	30 e0       	ldi	r19, 0x00	; 0
    2632:	40 e8       	ldi	r20, 0x80	; 128
    2634:	5f e3       	ldi	r21, 0x3F	; 63
    2636:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    263a:	88 23       	and	r24, r24
    263c:	44 f4       	brge	.+16     	; 0x264e <LCD_sendCommand+0x20e>
		__ticks = 1;
    263e:	fe 01       	movw	r30, r28
    2640:	e5 5b       	subi	r30, 0xB5	; 181
    2642:	ff 4f       	sbci	r31, 0xFF	; 255
    2644:	81 e0       	ldi	r24, 0x01	; 1
    2646:	90 e0       	ldi	r25, 0x00	; 0
    2648:	91 83       	std	Z+1, r25	; 0x01
    264a:	80 83       	st	Z, r24
    264c:	64 c0       	rjmp	.+200    	; 0x2716 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    264e:	fe 01       	movw	r30, r28
    2650:	e3 5b       	subi	r30, 0xB3	; 179
    2652:	ff 4f       	sbci	r31, 0xFF	; 255
    2654:	60 81       	ld	r22, Z
    2656:	71 81       	ldd	r23, Z+1	; 0x01
    2658:	82 81       	ldd	r24, Z+2	; 0x02
    265a:	93 81       	ldd	r25, Z+3	; 0x03
    265c:	20 e0       	ldi	r18, 0x00	; 0
    265e:	3f ef       	ldi	r19, 0xFF	; 255
    2660:	4f e7       	ldi	r20, 0x7F	; 127
    2662:	57 e4       	ldi	r21, 0x47	; 71
    2664:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2668:	18 16       	cp	r1, r24
    266a:	0c f0       	brlt	.+2      	; 0x266e <LCD_sendCommand+0x22e>
    266c:	43 c0       	rjmp	.+134    	; 0x26f4 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    266e:	fe 01       	movw	r30, r28
    2670:	ef 5a       	subi	r30, 0xAF	; 175
    2672:	ff 4f       	sbci	r31, 0xFF	; 255
    2674:	60 81       	ld	r22, Z
    2676:	71 81       	ldd	r23, Z+1	; 0x01
    2678:	82 81       	ldd	r24, Z+2	; 0x02
    267a:	93 81       	ldd	r25, Z+3	; 0x03
    267c:	20 e0       	ldi	r18, 0x00	; 0
    267e:	30 e0       	ldi	r19, 0x00	; 0
    2680:	40 e2       	ldi	r20, 0x20	; 32
    2682:	51 e4       	ldi	r21, 0x41	; 65
    2684:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2688:	dc 01       	movw	r26, r24
    268a:	cb 01       	movw	r24, r22
    268c:	8e 01       	movw	r16, r28
    268e:	05 5b       	subi	r16, 0xB5	; 181
    2690:	1f 4f       	sbci	r17, 0xFF	; 255
    2692:	bc 01       	movw	r22, r24
    2694:	cd 01       	movw	r24, r26
    2696:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    269a:	dc 01       	movw	r26, r24
    269c:	cb 01       	movw	r24, r22
    269e:	f8 01       	movw	r30, r16
    26a0:	91 83       	std	Z+1, r25	; 0x01
    26a2:	80 83       	st	Z, r24
    26a4:	1f c0       	rjmp	.+62     	; 0x26e4 <LCD_sendCommand+0x2a4>
    26a6:	fe 01       	movw	r30, r28
    26a8:	e7 5b       	subi	r30, 0xB7	; 183
    26aa:	ff 4f       	sbci	r31, 0xFF	; 255
    26ac:	88 ec       	ldi	r24, 0xC8	; 200
    26ae:	90 e0       	ldi	r25, 0x00	; 0
    26b0:	91 83       	std	Z+1, r25	; 0x01
    26b2:	80 83       	st	Z, r24
    26b4:	fe 01       	movw	r30, r28
    26b6:	e7 5b       	subi	r30, 0xB7	; 183
    26b8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ba:	80 81       	ld	r24, Z
    26bc:	91 81       	ldd	r25, Z+1	; 0x01
    26be:	01 97       	sbiw	r24, 0x01	; 1
    26c0:	f1 f7       	brne	.-4      	; 0x26be <LCD_sendCommand+0x27e>
    26c2:	fe 01       	movw	r30, r28
    26c4:	e7 5b       	subi	r30, 0xB7	; 183
    26c6:	ff 4f       	sbci	r31, 0xFF	; 255
    26c8:	91 83       	std	Z+1, r25	; 0x01
    26ca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26cc:	de 01       	movw	r26, r28
    26ce:	a5 5b       	subi	r26, 0xB5	; 181
    26d0:	bf 4f       	sbci	r27, 0xFF	; 255
    26d2:	fe 01       	movw	r30, r28
    26d4:	e5 5b       	subi	r30, 0xB5	; 181
    26d6:	ff 4f       	sbci	r31, 0xFF	; 255
    26d8:	80 81       	ld	r24, Z
    26da:	91 81       	ldd	r25, Z+1	; 0x01
    26dc:	01 97       	sbiw	r24, 0x01	; 1
    26de:	11 96       	adiw	r26, 0x01	; 1
    26e0:	9c 93       	st	X, r25
    26e2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26e4:	fe 01       	movw	r30, r28
    26e6:	e5 5b       	subi	r30, 0xB5	; 181
    26e8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ea:	80 81       	ld	r24, Z
    26ec:	91 81       	ldd	r25, Z+1	; 0x01
    26ee:	00 97       	sbiw	r24, 0x00	; 0
    26f0:	d1 f6       	brne	.-76     	; 0x26a6 <LCD_sendCommand+0x266>
    26f2:	27 c0       	rjmp	.+78     	; 0x2742 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26f4:	8e 01       	movw	r16, r28
    26f6:	05 5b       	subi	r16, 0xB5	; 181
    26f8:	1f 4f       	sbci	r17, 0xFF	; 255
    26fa:	fe 01       	movw	r30, r28
    26fc:	e3 5b       	subi	r30, 0xB3	; 179
    26fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2700:	60 81       	ld	r22, Z
    2702:	71 81       	ldd	r23, Z+1	; 0x01
    2704:	82 81       	ldd	r24, Z+2	; 0x02
    2706:	93 81       	ldd	r25, Z+3	; 0x03
    2708:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    270c:	dc 01       	movw	r26, r24
    270e:	cb 01       	movw	r24, r22
    2710:	f8 01       	movw	r30, r16
    2712:	91 83       	std	Z+1, r25	; 0x01
    2714:	80 83       	st	Z, r24
    2716:	de 01       	movw	r26, r28
    2718:	a9 5b       	subi	r26, 0xB9	; 185
    271a:	bf 4f       	sbci	r27, 0xFF	; 255
    271c:	fe 01       	movw	r30, r28
    271e:	e5 5b       	subi	r30, 0xB5	; 181
    2720:	ff 4f       	sbci	r31, 0xFF	; 255
    2722:	80 81       	ld	r24, Z
    2724:	91 81       	ldd	r25, Z+1	; 0x01
    2726:	8d 93       	st	X+, r24
    2728:	9c 93       	st	X, r25
    272a:	fe 01       	movw	r30, r28
    272c:	e9 5b       	subi	r30, 0xB9	; 185
    272e:	ff 4f       	sbci	r31, 0xFF	; 255
    2730:	80 81       	ld	r24, Z
    2732:	91 81       	ldd	r25, Z+1	; 0x01
    2734:	01 97       	sbiw	r24, 0x01	; 1
    2736:	f1 f7       	brne	.-4      	; 0x2734 <LCD_sendCommand+0x2f4>
    2738:	fe 01       	movw	r30, r28
    273a:	e9 5b       	subi	r30, 0xB9	; 185
    273c:	ff 4f       	sbci	r31, 0xFF	; 255
    273e:	91 83       	std	Z+1, r25	; 0x01
    2740:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    2742:	fe 01       	movw	r30, r28
    2744:	ed 59       	subi	r30, 0x9D	; 157
    2746:	ff 4f       	sbci	r31, 0xFF	; 255
    2748:	80 81       	ld	r24, Z
    274a:	88 2f       	mov	r24, r24
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	80 71       	andi	r24, 0x10	; 16
    2750:	90 70       	andi	r25, 0x00	; 0
    2752:	95 95       	asr	r25
    2754:	87 95       	ror	r24
    2756:	95 95       	asr	r25
    2758:	87 95       	ror	r24
    275a:	95 95       	asr	r25
    275c:	87 95       	ror	r24
    275e:	95 95       	asr	r25
    2760:	87 95       	ror	r24
    2762:	98 2f       	mov	r25, r24
    2764:	80 e0       	ldi	r24, 0x00	; 0
    2766:	60 e0       	ldi	r22, 0x00	; 0
    2768:	49 2f       	mov	r20, r25
    276a:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    276e:	fe 01       	movw	r30, r28
    2770:	ed 59       	subi	r30, 0x9D	; 157
    2772:	ff 4f       	sbci	r31, 0xFF	; 255
    2774:	80 81       	ld	r24, Z
    2776:	88 2f       	mov	r24, r24
    2778:	90 e0       	ldi	r25, 0x00	; 0
    277a:	80 72       	andi	r24, 0x20	; 32
    277c:	90 70       	andi	r25, 0x00	; 0
    277e:	95 95       	asr	r25
    2780:	87 95       	ror	r24
    2782:	95 95       	asr	r25
    2784:	87 95       	ror	r24
    2786:	95 95       	asr	r25
    2788:	87 95       	ror	r24
    278a:	95 95       	asr	r25
    278c:	87 95       	ror	r24
    278e:	95 95       	asr	r25
    2790:	87 95       	ror	r24
    2792:	98 2f       	mov	r25, r24
    2794:	80 e0       	ldi	r24, 0x00	; 0
    2796:	61 e0       	ldi	r22, 0x01	; 1
    2798:	49 2f       	mov	r20, r25
    279a:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    279e:	fe 01       	movw	r30, r28
    27a0:	ed 59       	subi	r30, 0x9D	; 157
    27a2:	ff 4f       	sbci	r31, 0xFF	; 255
    27a4:	80 81       	ld	r24, Z
    27a6:	88 2f       	mov	r24, r24
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	80 74       	andi	r24, 0x40	; 64
    27ac:	90 70       	andi	r25, 0x00	; 0
    27ae:	08 2e       	mov	r0, r24
    27b0:	89 2f       	mov	r24, r25
    27b2:	00 0c       	add	r0, r0
    27b4:	88 1f       	adc	r24, r24
    27b6:	99 0b       	sbc	r25, r25
    27b8:	00 0c       	add	r0, r0
    27ba:	88 1f       	adc	r24, r24
    27bc:	99 1f       	adc	r25, r25
    27be:	98 2f       	mov	r25, r24
    27c0:	80 e0       	ldi	r24, 0x00	; 0
    27c2:	62 e0       	ldi	r22, 0x02	; 2
    27c4:	49 2f       	mov	r20, r25
    27c6:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    27ca:	fe 01       	movw	r30, r28
    27cc:	ed 59       	subi	r30, 0x9D	; 157
    27ce:	ff 4f       	sbci	r31, 0xFF	; 255
    27d0:	80 81       	ld	r24, Z
    27d2:	98 2f       	mov	r25, r24
    27d4:	99 1f       	adc	r25, r25
    27d6:	99 27       	eor	r25, r25
    27d8:	99 1f       	adc	r25, r25
    27da:	80 e0       	ldi	r24, 0x00	; 0
    27dc:	63 e0       	ldi	r22, 0x03	; 3
    27de:	49 2f       	mov	r20, r25
    27e0:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <GPIO_writePin>
    27e4:	fe 01       	movw	r30, r28
    27e6:	ed 5b       	subi	r30, 0xBD	; 189
    27e8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ea:	80 e0       	ldi	r24, 0x00	; 0
    27ec:	90 e0       	ldi	r25, 0x00	; 0
    27ee:	a0 e8       	ldi	r26, 0x80	; 128
    27f0:	bf e3       	ldi	r27, 0x3F	; 63
    27f2:	80 83       	st	Z, r24
    27f4:	91 83       	std	Z+1, r25	; 0x01
    27f6:	a2 83       	std	Z+2, r26	; 0x02
    27f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27fa:	8e 01       	movw	r16, r28
    27fc:	01 5c       	subi	r16, 0xC1	; 193
    27fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2800:	fe 01       	movw	r30, r28
    2802:	ed 5b       	subi	r30, 0xBD	; 189
    2804:	ff 4f       	sbci	r31, 0xFF	; 255
    2806:	60 81       	ld	r22, Z
    2808:	71 81       	ldd	r23, Z+1	; 0x01
    280a:	82 81       	ldd	r24, Z+2	; 0x02
    280c:	93 81       	ldd	r25, Z+3	; 0x03
    280e:	20 e0       	ldi	r18, 0x00	; 0
    2810:	30 e0       	ldi	r19, 0x00	; 0
    2812:	4a ef       	ldi	r20, 0xFA	; 250
    2814:	54 e4       	ldi	r21, 0x44	; 68
    2816:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    281a:	dc 01       	movw	r26, r24
    281c:	cb 01       	movw	r24, r22
    281e:	f8 01       	movw	r30, r16
    2820:	80 83       	st	Z, r24
    2822:	91 83       	std	Z+1, r25	; 0x01
    2824:	a2 83       	std	Z+2, r26	; 0x02
    2826:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2828:	fe 01       	movw	r30, r28
    282a:	ff 96       	adiw	r30, 0x3f	; 63
    282c:	60 81       	ld	r22, Z
    282e:	71 81       	ldd	r23, Z+1	; 0x01
    2830:	82 81       	ldd	r24, Z+2	; 0x02
    2832:	93 81       	ldd	r25, Z+3	; 0x03
    2834:	20 e0       	ldi	r18, 0x00	; 0
    2836:	30 e0       	ldi	r19, 0x00	; 0
    2838:	40 e8       	ldi	r20, 0x80	; 128
    283a:	5f e3       	ldi	r21, 0x3F	; 63
    283c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2840:	88 23       	and	r24, r24
    2842:	2c f4       	brge	.+10     	; 0x284e <LCD_sendCommand+0x40e>
		__ticks = 1;
    2844:	81 e0       	ldi	r24, 0x01	; 1
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	9e af       	std	Y+62, r25	; 0x3e
    284a:	8d af       	std	Y+61, r24	; 0x3d
    284c:	46 c0       	rjmp	.+140    	; 0x28da <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    284e:	fe 01       	movw	r30, r28
    2850:	ff 96       	adiw	r30, 0x3f	; 63
    2852:	60 81       	ld	r22, Z
    2854:	71 81       	ldd	r23, Z+1	; 0x01
    2856:	82 81       	ldd	r24, Z+2	; 0x02
    2858:	93 81       	ldd	r25, Z+3	; 0x03
    285a:	20 e0       	ldi	r18, 0x00	; 0
    285c:	3f ef       	ldi	r19, 0xFF	; 255
    285e:	4f e7       	ldi	r20, 0x7F	; 127
    2860:	57 e4       	ldi	r21, 0x47	; 71
    2862:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2866:	18 16       	cp	r1, r24
    2868:	64 f5       	brge	.+88     	; 0x28c2 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    286a:	fe 01       	movw	r30, r28
    286c:	ed 5b       	subi	r30, 0xBD	; 189
    286e:	ff 4f       	sbci	r31, 0xFF	; 255
    2870:	60 81       	ld	r22, Z
    2872:	71 81       	ldd	r23, Z+1	; 0x01
    2874:	82 81       	ldd	r24, Z+2	; 0x02
    2876:	93 81       	ldd	r25, Z+3	; 0x03
    2878:	20 e0       	ldi	r18, 0x00	; 0
    287a:	30 e0       	ldi	r19, 0x00	; 0
    287c:	40 e2       	ldi	r20, 0x20	; 32
    287e:	51 e4       	ldi	r21, 0x41	; 65
    2880:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2884:	dc 01       	movw	r26, r24
    2886:	cb 01       	movw	r24, r22
    2888:	bc 01       	movw	r22, r24
    288a:	cd 01       	movw	r24, r26
    288c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2890:	dc 01       	movw	r26, r24
    2892:	cb 01       	movw	r24, r22
    2894:	9e af       	std	Y+62, r25	; 0x3e
    2896:	8d af       	std	Y+61, r24	; 0x3d
    2898:	0f c0       	rjmp	.+30     	; 0x28b8 <LCD_sendCommand+0x478>
    289a:	88 ec       	ldi	r24, 0xC8	; 200
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	9c af       	std	Y+60, r25	; 0x3c
    28a0:	8b af       	std	Y+59, r24	; 0x3b
    28a2:	8b ad       	ldd	r24, Y+59	; 0x3b
    28a4:	9c ad       	ldd	r25, Y+60	; 0x3c
    28a6:	01 97       	sbiw	r24, 0x01	; 1
    28a8:	f1 f7       	brne	.-4      	; 0x28a6 <LCD_sendCommand+0x466>
    28aa:	9c af       	std	Y+60, r25	; 0x3c
    28ac:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ae:	8d ad       	ldd	r24, Y+61	; 0x3d
    28b0:	9e ad       	ldd	r25, Y+62	; 0x3e
    28b2:	01 97       	sbiw	r24, 0x01	; 1
    28b4:	9e af       	std	Y+62, r25	; 0x3e
    28b6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28b8:	8d ad       	ldd	r24, Y+61	; 0x3d
    28ba:	9e ad       	ldd	r25, Y+62	; 0x3e
    28bc:	00 97       	sbiw	r24, 0x00	; 0
    28be:	69 f7       	brne	.-38     	; 0x289a <LCD_sendCommand+0x45a>
    28c0:	16 c0       	rjmp	.+44     	; 0x28ee <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28c2:	fe 01       	movw	r30, r28
    28c4:	ff 96       	adiw	r30, 0x3f	; 63
    28c6:	60 81       	ld	r22, Z
    28c8:	71 81       	ldd	r23, Z+1	; 0x01
    28ca:	82 81       	ldd	r24, Z+2	; 0x02
    28cc:	93 81       	ldd	r25, Z+3	; 0x03
    28ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d2:	dc 01       	movw	r26, r24
    28d4:	cb 01       	movw	r24, r22
    28d6:	9e af       	std	Y+62, r25	; 0x3e
    28d8:	8d af       	std	Y+61, r24	; 0x3d
    28da:	8d ad       	ldd	r24, Y+61	; 0x3d
    28dc:	9e ad       	ldd	r25, Y+62	; 0x3e
    28de:	9a af       	std	Y+58, r25	; 0x3a
    28e0:	89 af       	std	Y+57, r24	; 0x39
    28e2:	89 ad       	ldd	r24, Y+57	; 0x39
    28e4:	9a ad       	ldd	r25, Y+58	; 0x3a
    28e6:	01 97       	sbiw	r24, 0x01	; 1
    28e8:	f1 f7       	brne	.-4      	; 0x28e6 <LCD_sendCommand+0x4a6>
    28ea:	9a af       	std	Y+58, r25	; 0x3a
    28ec:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    28ee:	80 e0       	ldi	r24, 0x00	; 0
    28f0:	64 e0       	ldi	r22, 0x04	; 4
    28f2:	40 e0       	ldi	r20, 0x00	; 0
    28f4:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <GPIO_writePin>
    28f8:	80 e0       	ldi	r24, 0x00	; 0
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	a0 e8       	ldi	r26, 0x80	; 128
    28fe:	bf e3       	ldi	r27, 0x3F	; 63
    2900:	8d ab       	std	Y+53, r24	; 0x35
    2902:	9e ab       	std	Y+54, r25	; 0x36
    2904:	af ab       	std	Y+55, r26	; 0x37
    2906:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2908:	6d a9       	ldd	r22, Y+53	; 0x35
    290a:	7e a9       	ldd	r23, Y+54	; 0x36
    290c:	8f a9       	ldd	r24, Y+55	; 0x37
    290e:	98 ad       	ldd	r25, Y+56	; 0x38
    2910:	20 e0       	ldi	r18, 0x00	; 0
    2912:	30 e0       	ldi	r19, 0x00	; 0
    2914:	4a ef       	ldi	r20, 0xFA	; 250
    2916:	54 e4       	ldi	r21, 0x44	; 68
    2918:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    291c:	dc 01       	movw	r26, r24
    291e:	cb 01       	movw	r24, r22
    2920:	89 ab       	std	Y+49, r24	; 0x31
    2922:	9a ab       	std	Y+50, r25	; 0x32
    2924:	ab ab       	std	Y+51, r26	; 0x33
    2926:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2928:	69 a9       	ldd	r22, Y+49	; 0x31
    292a:	7a a9       	ldd	r23, Y+50	; 0x32
    292c:	8b a9       	ldd	r24, Y+51	; 0x33
    292e:	9c a9       	ldd	r25, Y+52	; 0x34
    2930:	20 e0       	ldi	r18, 0x00	; 0
    2932:	30 e0       	ldi	r19, 0x00	; 0
    2934:	40 e8       	ldi	r20, 0x80	; 128
    2936:	5f e3       	ldi	r21, 0x3F	; 63
    2938:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    293c:	88 23       	and	r24, r24
    293e:	2c f4       	brge	.+10     	; 0x294a <LCD_sendCommand+0x50a>
		__ticks = 1;
    2940:	81 e0       	ldi	r24, 0x01	; 1
    2942:	90 e0       	ldi	r25, 0x00	; 0
    2944:	98 ab       	std	Y+48, r25	; 0x30
    2946:	8f a7       	std	Y+47, r24	; 0x2f
    2948:	3f c0       	rjmp	.+126    	; 0x29c8 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    294a:	69 a9       	ldd	r22, Y+49	; 0x31
    294c:	7a a9       	ldd	r23, Y+50	; 0x32
    294e:	8b a9       	ldd	r24, Y+51	; 0x33
    2950:	9c a9       	ldd	r25, Y+52	; 0x34
    2952:	20 e0       	ldi	r18, 0x00	; 0
    2954:	3f ef       	ldi	r19, 0xFF	; 255
    2956:	4f e7       	ldi	r20, 0x7F	; 127
    2958:	57 e4       	ldi	r21, 0x47	; 71
    295a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    295e:	18 16       	cp	r1, r24
    2960:	4c f5       	brge	.+82     	; 0x29b4 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2962:	6d a9       	ldd	r22, Y+53	; 0x35
    2964:	7e a9       	ldd	r23, Y+54	; 0x36
    2966:	8f a9       	ldd	r24, Y+55	; 0x37
    2968:	98 ad       	ldd	r25, Y+56	; 0x38
    296a:	20 e0       	ldi	r18, 0x00	; 0
    296c:	30 e0       	ldi	r19, 0x00	; 0
    296e:	40 e2       	ldi	r20, 0x20	; 32
    2970:	51 e4       	ldi	r21, 0x41	; 65
    2972:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2976:	dc 01       	movw	r26, r24
    2978:	cb 01       	movw	r24, r22
    297a:	bc 01       	movw	r22, r24
    297c:	cd 01       	movw	r24, r26
    297e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2982:	dc 01       	movw	r26, r24
    2984:	cb 01       	movw	r24, r22
    2986:	98 ab       	std	Y+48, r25	; 0x30
    2988:	8f a7       	std	Y+47, r24	; 0x2f
    298a:	0f c0       	rjmp	.+30     	; 0x29aa <LCD_sendCommand+0x56a>
    298c:	88 ec       	ldi	r24, 0xC8	; 200
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	9e a7       	std	Y+46, r25	; 0x2e
    2992:	8d a7       	std	Y+45, r24	; 0x2d
    2994:	8d a5       	ldd	r24, Y+45	; 0x2d
    2996:	9e a5       	ldd	r25, Y+46	; 0x2e
    2998:	01 97       	sbiw	r24, 0x01	; 1
    299a:	f1 f7       	brne	.-4      	; 0x2998 <LCD_sendCommand+0x558>
    299c:	9e a7       	std	Y+46, r25	; 0x2e
    299e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    29a2:	98 a9       	ldd	r25, Y+48	; 0x30
    29a4:	01 97       	sbiw	r24, 0x01	; 1
    29a6:	98 ab       	std	Y+48, r25	; 0x30
    29a8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    29ac:	98 a9       	ldd	r25, Y+48	; 0x30
    29ae:	00 97       	sbiw	r24, 0x00	; 0
    29b0:	69 f7       	brne	.-38     	; 0x298c <LCD_sendCommand+0x54c>
    29b2:	14 c0       	rjmp	.+40     	; 0x29dc <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29b4:	69 a9       	ldd	r22, Y+49	; 0x31
    29b6:	7a a9       	ldd	r23, Y+50	; 0x32
    29b8:	8b a9       	ldd	r24, Y+51	; 0x33
    29ba:	9c a9       	ldd	r25, Y+52	; 0x34
    29bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29c0:	dc 01       	movw	r26, r24
    29c2:	cb 01       	movw	r24, r22
    29c4:	98 ab       	std	Y+48, r25	; 0x30
    29c6:	8f a7       	std	Y+47, r24	; 0x2f
    29c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    29ca:	98 a9       	ldd	r25, Y+48	; 0x30
    29cc:	9c a7       	std	Y+44, r25	; 0x2c
    29ce:	8b a7       	std	Y+43, r24	; 0x2b
    29d0:	8b a5       	ldd	r24, Y+43	; 0x2b
    29d2:	9c a5       	ldd	r25, Y+44	; 0x2c
    29d4:	01 97       	sbiw	r24, 0x01	; 1
    29d6:	f1 f7       	brne	.-4      	; 0x29d4 <LCD_sendCommand+0x594>
    29d8:	9c a7       	std	Y+44, r25	; 0x2c
    29da:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    29dc:	80 e0       	ldi	r24, 0x00	; 0
    29de:	64 e0       	ldi	r22, 0x04	; 4
    29e0:	41 e0       	ldi	r20, 0x01	; 1
    29e2:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <GPIO_writePin>
    29e6:	80 e0       	ldi	r24, 0x00	; 0
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	a0 e8       	ldi	r26, 0x80	; 128
    29ec:	bf e3       	ldi	r27, 0x3F	; 63
    29ee:	8f a3       	std	Y+39, r24	; 0x27
    29f0:	98 a7       	std	Y+40, r25	; 0x28
    29f2:	a9 a7       	std	Y+41, r26	; 0x29
    29f4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29f6:	6f a1       	ldd	r22, Y+39	; 0x27
    29f8:	78 a5       	ldd	r23, Y+40	; 0x28
    29fa:	89 a5       	ldd	r24, Y+41	; 0x29
    29fc:	9a a5       	ldd	r25, Y+42	; 0x2a
    29fe:	20 e0       	ldi	r18, 0x00	; 0
    2a00:	30 e0       	ldi	r19, 0x00	; 0
    2a02:	4a ef       	ldi	r20, 0xFA	; 250
    2a04:	54 e4       	ldi	r21, 0x44	; 68
    2a06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a0a:	dc 01       	movw	r26, r24
    2a0c:	cb 01       	movw	r24, r22
    2a0e:	8b a3       	std	Y+35, r24	; 0x23
    2a10:	9c a3       	std	Y+36, r25	; 0x24
    2a12:	ad a3       	std	Y+37, r26	; 0x25
    2a14:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a16:	6b a1       	ldd	r22, Y+35	; 0x23
    2a18:	7c a1       	ldd	r23, Y+36	; 0x24
    2a1a:	8d a1       	ldd	r24, Y+37	; 0x25
    2a1c:	9e a1       	ldd	r25, Y+38	; 0x26
    2a1e:	20 e0       	ldi	r18, 0x00	; 0
    2a20:	30 e0       	ldi	r19, 0x00	; 0
    2a22:	40 e8       	ldi	r20, 0x80	; 128
    2a24:	5f e3       	ldi	r21, 0x3F	; 63
    2a26:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a2a:	88 23       	and	r24, r24
    2a2c:	2c f4       	brge	.+10     	; 0x2a38 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    2a2e:	81 e0       	ldi	r24, 0x01	; 1
    2a30:	90 e0       	ldi	r25, 0x00	; 0
    2a32:	9a a3       	std	Y+34, r25	; 0x22
    2a34:	89 a3       	std	Y+33, r24	; 0x21
    2a36:	3f c0       	rjmp	.+126    	; 0x2ab6 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    2a38:	6b a1       	ldd	r22, Y+35	; 0x23
    2a3a:	7c a1       	ldd	r23, Y+36	; 0x24
    2a3c:	8d a1       	ldd	r24, Y+37	; 0x25
    2a3e:	9e a1       	ldd	r25, Y+38	; 0x26
    2a40:	20 e0       	ldi	r18, 0x00	; 0
    2a42:	3f ef       	ldi	r19, 0xFF	; 255
    2a44:	4f e7       	ldi	r20, 0x7F	; 127
    2a46:	57 e4       	ldi	r21, 0x47	; 71
    2a48:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a4c:	18 16       	cp	r1, r24
    2a4e:	4c f5       	brge	.+82     	; 0x2aa2 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a50:	6f a1       	ldd	r22, Y+39	; 0x27
    2a52:	78 a5       	ldd	r23, Y+40	; 0x28
    2a54:	89 a5       	ldd	r24, Y+41	; 0x29
    2a56:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a58:	20 e0       	ldi	r18, 0x00	; 0
    2a5a:	30 e0       	ldi	r19, 0x00	; 0
    2a5c:	40 e2       	ldi	r20, 0x20	; 32
    2a5e:	51 e4       	ldi	r21, 0x41	; 65
    2a60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a64:	dc 01       	movw	r26, r24
    2a66:	cb 01       	movw	r24, r22
    2a68:	bc 01       	movw	r22, r24
    2a6a:	cd 01       	movw	r24, r26
    2a6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a70:	dc 01       	movw	r26, r24
    2a72:	cb 01       	movw	r24, r22
    2a74:	9a a3       	std	Y+34, r25	; 0x22
    2a76:	89 a3       	std	Y+33, r24	; 0x21
    2a78:	0f c0       	rjmp	.+30     	; 0x2a98 <LCD_sendCommand+0x658>
    2a7a:	88 ec       	ldi	r24, 0xC8	; 200
    2a7c:	90 e0       	ldi	r25, 0x00	; 0
    2a7e:	98 a3       	std	Y+32, r25	; 0x20
    2a80:	8f 8f       	std	Y+31, r24	; 0x1f
    2a82:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a84:	98 a1       	ldd	r25, Y+32	; 0x20
    2a86:	01 97       	sbiw	r24, 0x01	; 1
    2a88:	f1 f7       	brne	.-4      	; 0x2a86 <LCD_sendCommand+0x646>
    2a8a:	98 a3       	std	Y+32, r25	; 0x20
    2a8c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a8e:	89 a1       	ldd	r24, Y+33	; 0x21
    2a90:	9a a1       	ldd	r25, Y+34	; 0x22
    2a92:	01 97       	sbiw	r24, 0x01	; 1
    2a94:	9a a3       	std	Y+34, r25	; 0x22
    2a96:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a98:	89 a1       	ldd	r24, Y+33	; 0x21
    2a9a:	9a a1       	ldd	r25, Y+34	; 0x22
    2a9c:	00 97       	sbiw	r24, 0x00	; 0
    2a9e:	69 f7       	brne	.-38     	; 0x2a7a <LCD_sendCommand+0x63a>
    2aa0:	14 c0       	rjmp	.+40     	; 0x2aca <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aa2:	6b a1       	ldd	r22, Y+35	; 0x23
    2aa4:	7c a1       	ldd	r23, Y+36	; 0x24
    2aa6:	8d a1       	ldd	r24, Y+37	; 0x25
    2aa8:	9e a1       	ldd	r25, Y+38	; 0x26
    2aaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aae:	dc 01       	movw	r26, r24
    2ab0:	cb 01       	movw	r24, r22
    2ab2:	9a a3       	std	Y+34, r25	; 0x22
    2ab4:	89 a3       	std	Y+33, r24	; 0x21
    2ab6:	89 a1       	ldd	r24, Y+33	; 0x21
    2ab8:	9a a1       	ldd	r25, Y+34	; 0x22
    2aba:	9e 8f       	std	Y+30, r25	; 0x1e
    2abc:	8d 8f       	std	Y+29, r24	; 0x1d
    2abe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ac0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ac2:	01 97       	sbiw	r24, 0x01	; 1
    2ac4:	f1 f7       	brne	.-4      	; 0x2ac2 <LCD_sendCommand+0x682>
    2ac6:	9e 8f       	std	Y+30, r25	; 0x1e
    2ac8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    2aca:	fe 01       	movw	r30, r28
    2acc:	ed 59       	subi	r30, 0x9D	; 157
    2ace:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad0:	80 81       	ld	r24, Z
    2ad2:	98 2f       	mov	r25, r24
    2ad4:	91 70       	andi	r25, 0x01	; 1
    2ad6:	80 e0       	ldi	r24, 0x00	; 0
    2ad8:	60 e0       	ldi	r22, 0x00	; 0
    2ada:	49 2f       	mov	r20, r25
    2adc:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    2ae0:	fe 01       	movw	r30, r28
    2ae2:	ed 59       	subi	r30, 0x9D	; 157
    2ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae6:	80 81       	ld	r24, Z
    2ae8:	88 2f       	mov	r24, r24
    2aea:	90 e0       	ldi	r25, 0x00	; 0
    2aec:	82 70       	andi	r24, 0x02	; 2
    2aee:	90 70       	andi	r25, 0x00	; 0
    2af0:	95 95       	asr	r25
    2af2:	87 95       	ror	r24
    2af4:	98 2f       	mov	r25, r24
    2af6:	80 e0       	ldi	r24, 0x00	; 0
    2af8:	61 e0       	ldi	r22, 0x01	; 1
    2afa:	49 2f       	mov	r20, r25
    2afc:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    2b00:	fe 01       	movw	r30, r28
    2b02:	ed 59       	subi	r30, 0x9D	; 157
    2b04:	ff 4f       	sbci	r31, 0xFF	; 255
    2b06:	80 81       	ld	r24, Z
    2b08:	88 2f       	mov	r24, r24
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	84 70       	andi	r24, 0x04	; 4
    2b0e:	90 70       	andi	r25, 0x00	; 0
    2b10:	95 95       	asr	r25
    2b12:	87 95       	ror	r24
    2b14:	95 95       	asr	r25
    2b16:	87 95       	ror	r24
    2b18:	98 2f       	mov	r25, r24
    2b1a:	80 e0       	ldi	r24, 0x00	; 0
    2b1c:	62 e0       	ldi	r22, 0x02	; 2
    2b1e:	49 2f       	mov	r20, r25
    2b20:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    2b24:	fe 01       	movw	r30, r28
    2b26:	ed 59       	subi	r30, 0x9D	; 157
    2b28:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2a:	80 81       	ld	r24, Z
    2b2c:	88 2f       	mov	r24, r24
    2b2e:	90 e0       	ldi	r25, 0x00	; 0
    2b30:	88 70       	andi	r24, 0x08	; 8
    2b32:	90 70       	andi	r25, 0x00	; 0
    2b34:	95 95       	asr	r25
    2b36:	87 95       	ror	r24
    2b38:	95 95       	asr	r25
    2b3a:	87 95       	ror	r24
    2b3c:	95 95       	asr	r25
    2b3e:	87 95       	ror	r24
    2b40:	98 2f       	mov	r25, r24
    2b42:	80 e0       	ldi	r24, 0x00	; 0
    2b44:	63 e0       	ldi	r22, 0x03	; 3
    2b46:	49 2f       	mov	r20, r25
    2b48:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <GPIO_writePin>
    2b4c:	80 e0       	ldi	r24, 0x00	; 0
    2b4e:	90 e0       	ldi	r25, 0x00	; 0
    2b50:	a0 e8       	ldi	r26, 0x80	; 128
    2b52:	bf e3       	ldi	r27, 0x3F	; 63
    2b54:	89 8f       	std	Y+25, r24	; 0x19
    2b56:	9a 8f       	std	Y+26, r25	; 0x1a
    2b58:	ab 8f       	std	Y+27, r26	; 0x1b
    2b5a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b5c:	69 8d       	ldd	r22, Y+25	; 0x19
    2b5e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b60:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b62:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b64:	20 e0       	ldi	r18, 0x00	; 0
    2b66:	30 e0       	ldi	r19, 0x00	; 0
    2b68:	4a ef       	ldi	r20, 0xFA	; 250
    2b6a:	54 e4       	ldi	r21, 0x44	; 68
    2b6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b70:	dc 01       	movw	r26, r24
    2b72:	cb 01       	movw	r24, r22
    2b74:	8d 8b       	std	Y+21, r24	; 0x15
    2b76:	9e 8b       	std	Y+22, r25	; 0x16
    2b78:	af 8b       	std	Y+23, r26	; 0x17
    2b7a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b7c:	6d 89       	ldd	r22, Y+21	; 0x15
    2b7e:	7e 89       	ldd	r23, Y+22	; 0x16
    2b80:	8f 89       	ldd	r24, Y+23	; 0x17
    2b82:	98 8d       	ldd	r25, Y+24	; 0x18
    2b84:	20 e0       	ldi	r18, 0x00	; 0
    2b86:	30 e0       	ldi	r19, 0x00	; 0
    2b88:	40 e8       	ldi	r20, 0x80	; 128
    2b8a:	5f e3       	ldi	r21, 0x3F	; 63
    2b8c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b90:	88 23       	and	r24, r24
    2b92:	2c f4       	brge	.+10     	; 0x2b9e <LCD_sendCommand+0x75e>
		__ticks = 1;
    2b94:	81 e0       	ldi	r24, 0x01	; 1
    2b96:	90 e0       	ldi	r25, 0x00	; 0
    2b98:	9c 8b       	std	Y+20, r25	; 0x14
    2b9a:	8b 8b       	std	Y+19, r24	; 0x13
    2b9c:	3f c0       	rjmp	.+126    	; 0x2c1c <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    2b9e:	6d 89       	ldd	r22, Y+21	; 0x15
    2ba0:	7e 89       	ldd	r23, Y+22	; 0x16
    2ba2:	8f 89       	ldd	r24, Y+23	; 0x17
    2ba4:	98 8d       	ldd	r25, Y+24	; 0x18
    2ba6:	20 e0       	ldi	r18, 0x00	; 0
    2ba8:	3f ef       	ldi	r19, 0xFF	; 255
    2baa:	4f e7       	ldi	r20, 0x7F	; 127
    2bac:	57 e4       	ldi	r21, 0x47	; 71
    2bae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bb2:	18 16       	cp	r1, r24
    2bb4:	4c f5       	brge	.+82     	; 0x2c08 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bb6:	69 8d       	ldd	r22, Y+25	; 0x19
    2bb8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bbc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bbe:	20 e0       	ldi	r18, 0x00	; 0
    2bc0:	30 e0       	ldi	r19, 0x00	; 0
    2bc2:	40 e2       	ldi	r20, 0x20	; 32
    2bc4:	51 e4       	ldi	r21, 0x41	; 65
    2bc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bca:	dc 01       	movw	r26, r24
    2bcc:	cb 01       	movw	r24, r22
    2bce:	bc 01       	movw	r22, r24
    2bd0:	cd 01       	movw	r24, r26
    2bd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bd6:	dc 01       	movw	r26, r24
    2bd8:	cb 01       	movw	r24, r22
    2bda:	9c 8b       	std	Y+20, r25	; 0x14
    2bdc:	8b 8b       	std	Y+19, r24	; 0x13
    2bde:	0f c0       	rjmp	.+30     	; 0x2bfe <LCD_sendCommand+0x7be>
    2be0:	88 ec       	ldi	r24, 0xC8	; 200
    2be2:	90 e0       	ldi	r25, 0x00	; 0
    2be4:	9a 8b       	std	Y+18, r25	; 0x12
    2be6:	89 8b       	std	Y+17, r24	; 0x11
    2be8:	89 89       	ldd	r24, Y+17	; 0x11
    2bea:	9a 89       	ldd	r25, Y+18	; 0x12
    2bec:	01 97       	sbiw	r24, 0x01	; 1
    2bee:	f1 f7       	brne	.-4      	; 0x2bec <LCD_sendCommand+0x7ac>
    2bf0:	9a 8b       	std	Y+18, r25	; 0x12
    2bf2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bf4:	8b 89       	ldd	r24, Y+19	; 0x13
    2bf6:	9c 89       	ldd	r25, Y+20	; 0x14
    2bf8:	01 97       	sbiw	r24, 0x01	; 1
    2bfa:	9c 8b       	std	Y+20, r25	; 0x14
    2bfc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bfe:	8b 89       	ldd	r24, Y+19	; 0x13
    2c00:	9c 89       	ldd	r25, Y+20	; 0x14
    2c02:	00 97       	sbiw	r24, 0x00	; 0
    2c04:	69 f7       	brne	.-38     	; 0x2be0 <LCD_sendCommand+0x7a0>
    2c06:	14 c0       	rjmp	.+40     	; 0x2c30 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c08:	6d 89       	ldd	r22, Y+21	; 0x15
    2c0a:	7e 89       	ldd	r23, Y+22	; 0x16
    2c0c:	8f 89       	ldd	r24, Y+23	; 0x17
    2c0e:	98 8d       	ldd	r25, Y+24	; 0x18
    2c10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c14:	dc 01       	movw	r26, r24
    2c16:	cb 01       	movw	r24, r22
    2c18:	9c 8b       	std	Y+20, r25	; 0x14
    2c1a:	8b 8b       	std	Y+19, r24	; 0x13
    2c1c:	8b 89       	ldd	r24, Y+19	; 0x13
    2c1e:	9c 89       	ldd	r25, Y+20	; 0x14
    2c20:	98 8b       	std	Y+16, r25	; 0x10
    2c22:	8f 87       	std	Y+15, r24	; 0x0f
    2c24:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c26:	98 89       	ldd	r25, Y+16	; 0x10
    2c28:	01 97       	sbiw	r24, 0x01	; 1
    2c2a:	f1 f7       	brne	.-4      	; 0x2c28 <LCD_sendCommand+0x7e8>
    2c2c:	98 8b       	std	Y+16, r25	; 0x10
    2c2e:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2c30:	80 e0       	ldi	r24, 0x00	; 0
    2c32:	64 e0       	ldi	r22, 0x04	; 4
    2c34:	40 e0       	ldi	r20, 0x00	; 0
    2c36:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <GPIO_writePin>
    2c3a:	80 e0       	ldi	r24, 0x00	; 0
    2c3c:	90 e0       	ldi	r25, 0x00	; 0
    2c3e:	a0 e8       	ldi	r26, 0x80	; 128
    2c40:	bf e3       	ldi	r27, 0x3F	; 63
    2c42:	8b 87       	std	Y+11, r24	; 0x0b
    2c44:	9c 87       	std	Y+12, r25	; 0x0c
    2c46:	ad 87       	std	Y+13, r26	; 0x0d
    2c48:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c50:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c52:	20 e0       	ldi	r18, 0x00	; 0
    2c54:	30 e0       	ldi	r19, 0x00	; 0
    2c56:	4a ef       	ldi	r20, 0xFA	; 250
    2c58:	54 e4       	ldi	r21, 0x44	; 68
    2c5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c5e:	dc 01       	movw	r26, r24
    2c60:	cb 01       	movw	r24, r22
    2c62:	8f 83       	std	Y+7, r24	; 0x07
    2c64:	98 87       	std	Y+8, r25	; 0x08
    2c66:	a9 87       	std	Y+9, r26	; 0x09
    2c68:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c6a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c6c:	78 85       	ldd	r23, Y+8	; 0x08
    2c6e:	89 85       	ldd	r24, Y+9	; 0x09
    2c70:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c72:	20 e0       	ldi	r18, 0x00	; 0
    2c74:	30 e0       	ldi	r19, 0x00	; 0
    2c76:	40 e8       	ldi	r20, 0x80	; 128
    2c78:	5f e3       	ldi	r21, 0x3F	; 63
    2c7a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c7e:	88 23       	and	r24, r24
    2c80:	2c f4       	brge	.+10     	; 0x2c8c <LCD_sendCommand+0x84c>
		__ticks = 1;
    2c82:	81 e0       	ldi	r24, 0x01	; 1
    2c84:	90 e0       	ldi	r25, 0x00	; 0
    2c86:	9e 83       	std	Y+6, r25	; 0x06
    2c88:	8d 83       	std	Y+5, r24	; 0x05
    2c8a:	3f c0       	rjmp	.+126    	; 0x2d0a <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    2c8c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c8e:	78 85       	ldd	r23, Y+8	; 0x08
    2c90:	89 85       	ldd	r24, Y+9	; 0x09
    2c92:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c94:	20 e0       	ldi	r18, 0x00	; 0
    2c96:	3f ef       	ldi	r19, 0xFF	; 255
    2c98:	4f e7       	ldi	r20, 0x7F	; 127
    2c9a:	57 e4       	ldi	r21, 0x47	; 71
    2c9c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ca0:	18 16       	cp	r1, r24
    2ca2:	4c f5       	brge	.+82     	; 0x2cf6 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ca4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ca6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ca8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2caa:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cac:	20 e0       	ldi	r18, 0x00	; 0
    2cae:	30 e0       	ldi	r19, 0x00	; 0
    2cb0:	40 e2       	ldi	r20, 0x20	; 32
    2cb2:	51 e4       	ldi	r21, 0x41	; 65
    2cb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb8:	dc 01       	movw	r26, r24
    2cba:	cb 01       	movw	r24, r22
    2cbc:	bc 01       	movw	r22, r24
    2cbe:	cd 01       	movw	r24, r26
    2cc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cc4:	dc 01       	movw	r26, r24
    2cc6:	cb 01       	movw	r24, r22
    2cc8:	9e 83       	std	Y+6, r25	; 0x06
    2cca:	8d 83       	std	Y+5, r24	; 0x05
    2ccc:	0f c0       	rjmp	.+30     	; 0x2cec <LCD_sendCommand+0x8ac>
    2cce:	88 ec       	ldi	r24, 0xC8	; 200
    2cd0:	90 e0       	ldi	r25, 0x00	; 0
    2cd2:	9c 83       	std	Y+4, r25	; 0x04
    2cd4:	8b 83       	std	Y+3, r24	; 0x03
    2cd6:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd8:	9c 81       	ldd	r25, Y+4	; 0x04
    2cda:	01 97       	sbiw	r24, 0x01	; 1
    2cdc:	f1 f7       	brne	.-4      	; 0x2cda <LCD_sendCommand+0x89a>
    2cde:	9c 83       	std	Y+4, r25	; 0x04
    2ce0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ce2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ce4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ce6:	01 97       	sbiw	r24, 0x01	; 1
    2ce8:	9e 83       	std	Y+6, r25	; 0x06
    2cea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cec:	8d 81       	ldd	r24, Y+5	; 0x05
    2cee:	9e 81       	ldd	r25, Y+6	; 0x06
    2cf0:	00 97       	sbiw	r24, 0x00	; 0
    2cf2:	69 f7       	brne	.-38     	; 0x2cce <LCD_sendCommand+0x88e>
    2cf4:	14 c0       	rjmp	.+40     	; 0x2d1e <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cf6:	6f 81       	ldd	r22, Y+7	; 0x07
    2cf8:	78 85       	ldd	r23, Y+8	; 0x08
    2cfa:	89 85       	ldd	r24, Y+9	; 0x09
    2cfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d02:	dc 01       	movw	r26, r24
    2d04:	cb 01       	movw	r24, r22
    2d06:	9e 83       	std	Y+6, r25	; 0x06
    2d08:	8d 83       	std	Y+5, r24	; 0x05
    2d0a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d0c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d0e:	9a 83       	std	Y+2, r25	; 0x02
    2d10:	89 83       	std	Y+1, r24	; 0x01
    2d12:	89 81       	ldd	r24, Y+1	; 0x01
    2d14:	9a 81       	ldd	r25, Y+2	; 0x02
    2d16:	01 97       	sbiw	r24, 0x01	; 1
    2d18:	f1 f7       	brne	.-4      	; 0x2d16 <LCD_sendCommand+0x8d6>
    2d1a:	9a 83       	std	Y+2, r25	; 0x02
    2d1c:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2d1e:	cd 59       	subi	r28, 0x9D	; 157
    2d20:	df 4f       	sbci	r29, 0xFF	; 255
    2d22:	0f b6       	in	r0, 0x3f	; 63
    2d24:	f8 94       	cli
    2d26:	de bf       	out	0x3e, r29	; 62
    2d28:	0f be       	out	0x3f, r0	; 63
    2d2a:	cd bf       	out	0x3d, r28	; 61
    2d2c:	cf 91       	pop	r28
    2d2e:	df 91       	pop	r29
    2d30:	1f 91       	pop	r17
    2d32:	0f 91       	pop	r16
    2d34:	08 95       	ret

00002d36 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2d36:	0f 93       	push	r16
    2d38:	1f 93       	push	r17
    2d3a:	df 93       	push	r29
    2d3c:	cf 93       	push	r28
    2d3e:	cd b7       	in	r28, 0x3d	; 61
    2d40:	de b7       	in	r29, 0x3e	; 62
    2d42:	c3 56       	subi	r28, 0x63	; 99
    2d44:	d0 40       	sbci	r29, 0x00	; 0
    2d46:	0f b6       	in	r0, 0x3f	; 63
    2d48:	f8 94       	cli
    2d4a:	de bf       	out	0x3e, r29	; 62
    2d4c:	0f be       	out	0x3f, r0	; 63
    2d4e:	cd bf       	out	0x3d, r28	; 61
    2d50:	fe 01       	movw	r30, r28
    2d52:	ed 59       	subi	r30, 0x9D	; 157
    2d54:	ff 4f       	sbci	r31, 0xFF	; 255
    2d56:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2d58:	80 e0       	ldi	r24, 0x00	; 0
    2d5a:	65 e0       	ldi	r22, 0x05	; 5
    2d5c:	41 e0       	ldi	r20, 0x01	; 1
    2d5e:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <GPIO_writePin>
    2d62:	fe 01       	movw	r30, r28
    2d64:	e1 5a       	subi	r30, 0xA1	; 161
    2d66:	ff 4f       	sbci	r31, 0xFF	; 255
    2d68:	80 e0       	ldi	r24, 0x00	; 0
    2d6a:	90 e0       	ldi	r25, 0x00	; 0
    2d6c:	a0 e8       	ldi	r26, 0x80	; 128
    2d6e:	bf e3       	ldi	r27, 0x3F	; 63
    2d70:	80 83       	st	Z, r24
    2d72:	91 83       	std	Z+1, r25	; 0x01
    2d74:	a2 83       	std	Z+2, r26	; 0x02
    2d76:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d78:	8e 01       	movw	r16, r28
    2d7a:	05 5a       	subi	r16, 0xA5	; 165
    2d7c:	1f 4f       	sbci	r17, 0xFF	; 255
    2d7e:	fe 01       	movw	r30, r28
    2d80:	e1 5a       	subi	r30, 0xA1	; 161
    2d82:	ff 4f       	sbci	r31, 0xFF	; 255
    2d84:	60 81       	ld	r22, Z
    2d86:	71 81       	ldd	r23, Z+1	; 0x01
    2d88:	82 81       	ldd	r24, Z+2	; 0x02
    2d8a:	93 81       	ldd	r25, Z+3	; 0x03
    2d8c:	20 e0       	ldi	r18, 0x00	; 0
    2d8e:	30 e0       	ldi	r19, 0x00	; 0
    2d90:	4a ef       	ldi	r20, 0xFA	; 250
    2d92:	54 e4       	ldi	r21, 0x44	; 68
    2d94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d98:	dc 01       	movw	r26, r24
    2d9a:	cb 01       	movw	r24, r22
    2d9c:	f8 01       	movw	r30, r16
    2d9e:	80 83       	st	Z, r24
    2da0:	91 83       	std	Z+1, r25	; 0x01
    2da2:	a2 83       	std	Z+2, r26	; 0x02
    2da4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2da6:	fe 01       	movw	r30, r28
    2da8:	e5 5a       	subi	r30, 0xA5	; 165
    2daa:	ff 4f       	sbci	r31, 0xFF	; 255
    2dac:	60 81       	ld	r22, Z
    2dae:	71 81       	ldd	r23, Z+1	; 0x01
    2db0:	82 81       	ldd	r24, Z+2	; 0x02
    2db2:	93 81       	ldd	r25, Z+3	; 0x03
    2db4:	20 e0       	ldi	r18, 0x00	; 0
    2db6:	30 e0       	ldi	r19, 0x00	; 0
    2db8:	40 e8       	ldi	r20, 0x80	; 128
    2dba:	5f e3       	ldi	r21, 0x3F	; 63
    2dbc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2dc0:	88 23       	and	r24, r24
    2dc2:	44 f4       	brge	.+16     	; 0x2dd4 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    2dc4:	fe 01       	movw	r30, r28
    2dc6:	e7 5a       	subi	r30, 0xA7	; 167
    2dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dca:	81 e0       	ldi	r24, 0x01	; 1
    2dcc:	90 e0       	ldi	r25, 0x00	; 0
    2dce:	91 83       	std	Z+1, r25	; 0x01
    2dd0:	80 83       	st	Z, r24
    2dd2:	64 c0       	rjmp	.+200    	; 0x2e9c <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    2dd4:	fe 01       	movw	r30, r28
    2dd6:	e5 5a       	subi	r30, 0xA5	; 165
    2dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dda:	60 81       	ld	r22, Z
    2ddc:	71 81       	ldd	r23, Z+1	; 0x01
    2dde:	82 81       	ldd	r24, Z+2	; 0x02
    2de0:	93 81       	ldd	r25, Z+3	; 0x03
    2de2:	20 e0       	ldi	r18, 0x00	; 0
    2de4:	3f ef       	ldi	r19, 0xFF	; 255
    2de6:	4f e7       	ldi	r20, 0x7F	; 127
    2de8:	57 e4       	ldi	r21, 0x47	; 71
    2dea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2dee:	18 16       	cp	r1, r24
    2df0:	0c f0       	brlt	.+2      	; 0x2df4 <LCD_displayCharacter+0xbe>
    2df2:	43 c0       	rjmp	.+134    	; 0x2e7a <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2df4:	fe 01       	movw	r30, r28
    2df6:	e1 5a       	subi	r30, 0xA1	; 161
    2df8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dfa:	60 81       	ld	r22, Z
    2dfc:	71 81       	ldd	r23, Z+1	; 0x01
    2dfe:	82 81       	ldd	r24, Z+2	; 0x02
    2e00:	93 81       	ldd	r25, Z+3	; 0x03
    2e02:	20 e0       	ldi	r18, 0x00	; 0
    2e04:	30 e0       	ldi	r19, 0x00	; 0
    2e06:	40 e2       	ldi	r20, 0x20	; 32
    2e08:	51 e4       	ldi	r21, 0x41	; 65
    2e0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e0e:	dc 01       	movw	r26, r24
    2e10:	cb 01       	movw	r24, r22
    2e12:	8e 01       	movw	r16, r28
    2e14:	07 5a       	subi	r16, 0xA7	; 167
    2e16:	1f 4f       	sbci	r17, 0xFF	; 255
    2e18:	bc 01       	movw	r22, r24
    2e1a:	cd 01       	movw	r24, r26
    2e1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e20:	dc 01       	movw	r26, r24
    2e22:	cb 01       	movw	r24, r22
    2e24:	f8 01       	movw	r30, r16
    2e26:	91 83       	std	Z+1, r25	; 0x01
    2e28:	80 83       	st	Z, r24
    2e2a:	1f c0       	rjmp	.+62     	; 0x2e6a <LCD_displayCharacter+0x134>
    2e2c:	fe 01       	movw	r30, r28
    2e2e:	e9 5a       	subi	r30, 0xA9	; 169
    2e30:	ff 4f       	sbci	r31, 0xFF	; 255
    2e32:	88 ec       	ldi	r24, 0xC8	; 200
    2e34:	90 e0       	ldi	r25, 0x00	; 0
    2e36:	91 83       	std	Z+1, r25	; 0x01
    2e38:	80 83       	st	Z, r24
    2e3a:	fe 01       	movw	r30, r28
    2e3c:	e9 5a       	subi	r30, 0xA9	; 169
    2e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e40:	80 81       	ld	r24, Z
    2e42:	91 81       	ldd	r25, Z+1	; 0x01
    2e44:	01 97       	sbiw	r24, 0x01	; 1
    2e46:	f1 f7       	brne	.-4      	; 0x2e44 <LCD_displayCharacter+0x10e>
    2e48:	fe 01       	movw	r30, r28
    2e4a:	e9 5a       	subi	r30, 0xA9	; 169
    2e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4e:	91 83       	std	Z+1, r25	; 0x01
    2e50:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e52:	de 01       	movw	r26, r28
    2e54:	a7 5a       	subi	r26, 0xA7	; 167
    2e56:	bf 4f       	sbci	r27, 0xFF	; 255
    2e58:	fe 01       	movw	r30, r28
    2e5a:	e7 5a       	subi	r30, 0xA7	; 167
    2e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5e:	80 81       	ld	r24, Z
    2e60:	91 81       	ldd	r25, Z+1	; 0x01
    2e62:	01 97       	sbiw	r24, 0x01	; 1
    2e64:	11 96       	adiw	r26, 0x01	; 1
    2e66:	9c 93       	st	X, r25
    2e68:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e6a:	fe 01       	movw	r30, r28
    2e6c:	e7 5a       	subi	r30, 0xA7	; 167
    2e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e70:	80 81       	ld	r24, Z
    2e72:	91 81       	ldd	r25, Z+1	; 0x01
    2e74:	00 97       	sbiw	r24, 0x00	; 0
    2e76:	d1 f6       	brne	.-76     	; 0x2e2c <LCD_displayCharacter+0xf6>
    2e78:	27 c0       	rjmp	.+78     	; 0x2ec8 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e7a:	8e 01       	movw	r16, r28
    2e7c:	07 5a       	subi	r16, 0xA7	; 167
    2e7e:	1f 4f       	sbci	r17, 0xFF	; 255
    2e80:	fe 01       	movw	r30, r28
    2e82:	e5 5a       	subi	r30, 0xA5	; 165
    2e84:	ff 4f       	sbci	r31, 0xFF	; 255
    2e86:	60 81       	ld	r22, Z
    2e88:	71 81       	ldd	r23, Z+1	; 0x01
    2e8a:	82 81       	ldd	r24, Z+2	; 0x02
    2e8c:	93 81       	ldd	r25, Z+3	; 0x03
    2e8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e92:	dc 01       	movw	r26, r24
    2e94:	cb 01       	movw	r24, r22
    2e96:	f8 01       	movw	r30, r16
    2e98:	91 83       	std	Z+1, r25	; 0x01
    2e9a:	80 83       	st	Z, r24
    2e9c:	de 01       	movw	r26, r28
    2e9e:	ab 5a       	subi	r26, 0xAB	; 171
    2ea0:	bf 4f       	sbci	r27, 0xFF	; 255
    2ea2:	fe 01       	movw	r30, r28
    2ea4:	e7 5a       	subi	r30, 0xA7	; 167
    2ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea8:	80 81       	ld	r24, Z
    2eaa:	91 81       	ldd	r25, Z+1	; 0x01
    2eac:	8d 93       	st	X+, r24
    2eae:	9c 93       	st	X, r25
    2eb0:	fe 01       	movw	r30, r28
    2eb2:	eb 5a       	subi	r30, 0xAB	; 171
    2eb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb6:	80 81       	ld	r24, Z
    2eb8:	91 81       	ldd	r25, Z+1	; 0x01
    2eba:	01 97       	sbiw	r24, 0x01	; 1
    2ebc:	f1 f7       	brne	.-4      	; 0x2eba <LCD_displayCharacter+0x184>
    2ebe:	fe 01       	movw	r30, r28
    2ec0:	eb 5a       	subi	r30, 0xAB	; 171
    2ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec4:	91 83       	std	Z+1, r25	; 0x01
    2ec6:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2ec8:	80 e0       	ldi	r24, 0x00	; 0
    2eca:	64 e0       	ldi	r22, 0x04	; 4
    2ecc:	41 e0       	ldi	r20, 0x01	; 1
    2ece:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <GPIO_writePin>
    2ed2:	fe 01       	movw	r30, r28
    2ed4:	ef 5a       	subi	r30, 0xAF	; 175
    2ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed8:	80 e0       	ldi	r24, 0x00	; 0
    2eda:	90 e0       	ldi	r25, 0x00	; 0
    2edc:	a0 e8       	ldi	r26, 0x80	; 128
    2ede:	bf e3       	ldi	r27, 0x3F	; 63
    2ee0:	80 83       	st	Z, r24
    2ee2:	91 83       	std	Z+1, r25	; 0x01
    2ee4:	a2 83       	std	Z+2, r26	; 0x02
    2ee6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ee8:	8e 01       	movw	r16, r28
    2eea:	03 5b       	subi	r16, 0xB3	; 179
    2eec:	1f 4f       	sbci	r17, 0xFF	; 255
    2eee:	fe 01       	movw	r30, r28
    2ef0:	ef 5a       	subi	r30, 0xAF	; 175
    2ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef4:	60 81       	ld	r22, Z
    2ef6:	71 81       	ldd	r23, Z+1	; 0x01
    2ef8:	82 81       	ldd	r24, Z+2	; 0x02
    2efa:	93 81       	ldd	r25, Z+3	; 0x03
    2efc:	20 e0       	ldi	r18, 0x00	; 0
    2efe:	30 e0       	ldi	r19, 0x00	; 0
    2f00:	4a ef       	ldi	r20, 0xFA	; 250
    2f02:	54 e4       	ldi	r21, 0x44	; 68
    2f04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f08:	dc 01       	movw	r26, r24
    2f0a:	cb 01       	movw	r24, r22
    2f0c:	f8 01       	movw	r30, r16
    2f0e:	80 83       	st	Z, r24
    2f10:	91 83       	std	Z+1, r25	; 0x01
    2f12:	a2 83       	std	Z+2, r26	; 0x02
    2f14:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f16:	fe 01       	movw	r30, r28
    2f18:	e3 5b       	subi	r30, 0xB3	; 179
    2f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f1c:	60 81       	ld	r22, Z
    2f1e:	71 81       	ldd	r23, Z+1	; 0x01
    2f20:	82 81       	ldd	r24, Z+2	; 0x02
    2f22:	93 81       	ldd	r25, Z+3	; 0x03
    2f24:	20 e0       	ldi	r18, 0x00	; 0
    2f26:	30 e0       	ldi	r19, 0x00	; 0
    2f28:	40 e8       	ldi	r20, 0x80	; 128
    2f2a:	5f e3       	ldi	r21, 0x3F	; 63
    2f2c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f30:	88 23       	and	r24, r24
    2f32:	44 f4       	brge	.+16     	; 0x2f44 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    2f34:	fe 01       	movw	r30, r28
    2f36:	e5 5b       	subi	r30, 0xB5	; 181
    2f38:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3a:	81 e0       	ldi	r24, 0x01	; 1
    2f3c:	90 e0       	ldi	r25, 0x00	; 0
    2f3e:	91 83       	std	Z+1, r25	; 0x01
    2f40:	80 83       	st	Z, r24
    2f42:	64 c0       	rjmp	.+200    	; 0x300c <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2f44:	fe 01       	movw	r30, r28
    2f46:	e3 5b       	subi	r30, 0xB3	; 179
    2f48:	ff 4f       	sbci	r31, 0xFF	; 255
    2f4a:	60 81       	ld	r22, Z
    2f4c:	71 81       	ldd	r23, Z+1	; 0x01
    2f4e:	82 81       	ldd	r24, Z+2	; 0x02
    2f50:	93 81       	ldd	r25, Z+3	; 0x03
    2f52:	20 e0       	ldi	r18, 0x00	; 0
    2f54:	3f ef       	ldi	r19, 0xFF	; 255
    2f56:	4f e7       	ldi	r20, 0x7F	; 127
    2f58:	57 e4       	ldi	r21, 0x47	; 71
    2f5a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f5e:	18 16       	cp	r1, r24
    2f60:	0c f0       	brlt	.+2      	; 0x2f64 <LCD_displayCharacter+0x22e>
    2f62:	43 c0       	rjmp	.+134    	; 0x2fea <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f64:	fe 01       	movw	r30, r28
    2f66:	ef 5a       	subi	r30, 0xAF	; 175
    2f68:	ff 4f       	sbci	r31, 0xFF	; 255
    2f6a:	60 81       	ld	r22, Z
    2f6c:	71 81       	ldd	r23, Z+1	; 0x01
    2f6e:	82 81       	ldd	r24, Z+2	; 0x02
    2f70:	93 81       	ldd	r25, Z+3	; 0x03
    2f72:	20 e0       	ldi	r18, 0x00	; 0
    2f74:	30 e0       	ldi	r19, 0x00	; 0
    2f76:	40 e2       	ldi	r20, 0x20	; 32
    2f78:	51 e4       	ldi	r21, 0x41	; 65
    2f7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f7e:	dc 01       	movw	r26, r24
    2f80:	cb 01       	movw	r24, r22
    2f82:	8e 01       	movw	r16, r28
    2f84:	05 5b       	subi	r16, 0xB5	; 181
    2f86:	1f 4f       	sbci	r17, 0xFF	; 255
    2f88:	bc 01       	movw	r22, r24
    2f8a:	cd 01       	movw	r24, r26
    2f8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f90:	dc 01       	movw	r26, r24
    2f92:	cb 01       	movw	r24, r22
    2f94:	f8 01       	movw	r30, r16
    2f96:	91 83       	std	Z+1, r25	; 0x01
    2f98:	80 83       	st	Z, r24
    2f9a:	1f c0       	rjmp	.+62     	; 0x2fda <LCD_displayCharacter+0x2a4>
    2f9c:	fe 01       	movw	r30, r28
    2f9e:	e7 5b       	subi	r30, 0xB7	; 183
    2fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa2:	88 ec       	ldi	r24, 0xC8	; 200
    2fa4:	90 e0       	ldi	r25, 0x00	; 0
    2fa6:	91 83       	std	Z+1, r25	; 0x01
    2fa8:	80 83       	st	Z, r24
    2faa:	fe 01       	movw	r30, r28
    2fac:	e7 5b       	subi	r30, 0xB7	; 183
    2fae:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb0:	80 81       	ld	r24, Z
    2fb2:	91 81       	ldd	r25, Z+1	; 0x01
    2fb4:	01 97       	sbiw	r24, 0x01	; 1
    2fb6:	f1 f7       	brne	.-4      	; 0x2fb4 <LCD_displayCharacter+0x27e>
    2fb8:	fe 01       	movw	r30, r28
    2fba:	e7 5b       	subi	r30, 0xB7	; 183
    2fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fbe:	91 83       	std	Z+1, r25	; 0x01
    2fc0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fc2:	de 01       	movw	r26, r28
    2fc4:	a5 5b       	subi	r26, 0xB5	; 181
    2fc6:	bf 4f       	sbci	r27, 0xFF	; 255
    2fc8:	fe 01       	movw	r30, r28
    2fca:	e5 5b       	subi	r30, 0xB5	; 181
    2fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fce:	80 81       	ld	r24, Z
    2fd0:	91 81       	ldd	r25, Z+1	; 0x01
    2fd2:	01 97       	sbiw	r24, 0x01	; 1
    2fd4:	11 96       	adiw	r26, 0x01	; 1
    2fd6:	9c 93       	st	X, r25
    2fd8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fda:	fe 01       	movw	r30, r28
    2fdc:	e5 5b       	subi	r30, 0xB5	; 181
    2fde:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe0:	80 81       	ld	r24, Z
    2fe2:	91 81       	ldd	r25, Z+1	; 0x01
    2fe4:	00 97       	sbiw	r24, 0x00	; 0
    2fe6:	d1 f6       	brne	.-76     	; 0x2f9c <LCD_displayCharacter+0x266>
    2fe8:	27 c0       	rjmp	.+78     	; 0x3038 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fea:	8e 01       	movw	r16, r28
    2fec:	05 5b       	subi	r16, 0xB5	; 181
    2fee:	1f 4f       	sbci	r17, 0xFF	; 255
    2ff0:	fe 01       	movw	r30, r28
    2ff2:	e3 5b       	subi	r30, 0xB3	; 179
    2ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff6:	60 81       	ld	r22, Z
    2ff8:	71 81       	ldd	r23, Z+1	; 0x01
    2ffa:	82 81       	ldd	r24, Z+2	; 0x02
    2ffc:	93 81       	ldd	r25, Z+3	; 0x03
    2ffe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3002:	dc 01       	movw	r26, r24
    3004:	cb 01       	movw	r24, r22
    3006:	f8 01       	movw	r30, r16
    3008:	91 83       	std	Z+1, r25	; 0x01
    300a:	80 83       	st	Z, r24
    300c:	de 01       	movw	r26, r28
    300e:	a9 5b       	subi	r26, 0xB9	; 185
    3010:	bf 4f       	sbci	r27, 0xFF	; 255
    3012:	fe 01       	movw	r30, r28
    3014:	e5 5b       	subi	r30, 0xB5	; 181
    3016:	ff 4f       	sbci	r31, 0xFF	; 255
    3018:	80 81       	ld	r24, Z
    301a:	91 81       	ldd	r25, Z+1	; 0x01
    301c:	8d 93       	st	X+, r24
    301e:	9c 93       	st	X, r25
    3020:	fe 01       	movw	r30, r28
    3022:	e9 5b       	subi	r30, 0xB9	; 185
    3024:	ff 4f       	sbci	r31, 0xFF	; 255
    3026:	80 81       	ld	r24, Z
    3028:	91 81       	ldd	r25, Z+1	; 0x01
    302a:	01 97       	sbiw	r24, 0x01	; 1
    302c:	f1 f7       	brne	.-4      	; 0x302a <LCD_displayCharacter+0x2f4>
    302e:	fe 01       	movw	r30, r28
    3030:	e9 5b       	subi	r30, 0xB9	; 185
    3032:	ff 4f       	sbci	r31, 0xFF	; 255
    3034:	91 83       	std	Z+1, r25	; 0x01
    3036:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    3038:	fe 01       	movw	r30, r28
    303a:	ed 59       	subi	r30, 0x9D	; 157
    303c:	ff 4f       	sbci	r31, 0xFF	; 255
    303e:	80 81       	ld	r24, Z
    3040:	88 2f       	mov	r24, r24
    3042:	90 e0       	ldi	r25, 0x00	; 0
    3044:	80 71       	andi	r24, 0x10	; 16
    3046:	90 70       	andi	r25, 0x00	; 0
    3048:	95 95       	asr	r25
    304a:	87 95       	ror	r24
    304c:	95 95       	asr	r25
    304e:	87 95       	ror	r24
    3050:	95 95       	asr	r25
    3052:	87 95       	ror	r24
    3054:	95 95       	asr	r25
    3056:	87 95       	ror	r24
    3058:	98 2f       	mov	r25, r24
    305a:	80 e0       	ldi	r24, 0x00	; 0
    305c:	60 e0       	ldi	r22, 0x00	; 0
    305e:	49 2f       	mov	r20, r25
    3060:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    3064:	fe 01       	movw	r30, r28
    3066:	ed 59       	subi	r30, 0x9D	; 157
    3068:	ff 4f       	sbci	r31, 0xFF	; 255
    306a:	80 81       	ld	r24, Z
    306c:	88 2f       	mov	r24, r24
    306e:	90 e0       	ldi	r25, 0x00	; 0
    3070:	80 72       	andi	r24, 0x20	; 32
    3072:	90 70       	andi	r25, 0x00	; 0
    3074:	95 95       	asr	r25
    3076:	87 95       	ror	r24
    3078:	95 95       	asr	r25
    307a:	87 95       	ror	r24
    307c:	95 95       	asr	r25
    307e:	87 95       	ror	r24
    3080:	95 95       	asr	r25
    3082:	87 95       	ror	r24
    3084:	95 95       	asr	r25
    3086:	87 95       	ror	r24
    3088:	98 2f       	mov	r25, r24
    308a:	80 e0       	ldi	r24, 0x00	; 0
    308c:	61 e0       	ldi	r22, 0x01	; 1
    308e:	49 2f       	mov	r20, r25
    3090:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    3094:	fe 01       	movw	r30, r28
    3096:	ed 59       	subi	r30, 0x9D	; 157
    3098:	ff 4f       	sbci	r31, 0xFF	; 255
    309a:	80 81       	ld	r24, Z
    309c:	88 2f       	mov	r24, r24
    309e:	90 e0       	ldi	r25, 0x00	; 0
    30a0:	80 74       	andi	r24, 0x40	; 64
    30a2:	90 70       	andi	r25, 0x00	; 0
    30a4:	08 2e       	mov	r0, r24
    30a6:	89 2f       	mov	r24, r25
    30a8:	00 0c       	add	r0, r0
    30aa:	88 1f       	adc	r24, r24
    30ac:	99 0b       	sbc	r25, r25
    30ae:	00 0c       	add	r0, r0
    30b0:	88 1f       	adc	r24, r24
    30b2:	99 1f       	adc	r25, r25
    30b4:	98 2f       	mov	r25, r24
    30b6:	80 e0       	ldi	r24, 0x00	; 0
    30b8:	62 e0       	ldi	r22, 0x02	; 2
    30ba:	49 2f       	mov	r20, r25
    30bc:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    30c0:	fe 01       	movw	r30, r28
    30c2:	ed 59       	subi	r30, 0x9D	; 157
    30c4:	ff 4f       	sbci	r31, 0xFF	; 255
    30c6:	80 81       	ld	r24, Z
    30c8:	98 2f       	mov	r25, r24
    30ca:	99 1f       	adc	r25, r25
    30cc:	99 27       	eor	r25, r25
    30ce:	99 1f       	adc	r25, r25
    30d0:	80 e0       	ldi	r24, 0x00	; 0
    30d2:	63 e0       	ldi	r22, 0x03	; 3
    30d4:	49 2f       	mov	r20, r25
    30d6:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <GPIO_writePin>
    30da:	fe 01       	movw	r30, r28
    30dc:	ed 5b       	subi	r30, 0xBD	; 189
    30de:	ff 4f       	sbci	r31, 0xFF	; 255
    30e0:	80 e0       	ldi	r24, 0x00	; 0
    30e2:	90 e0       	ldi	r25, 0x00	; 0
    30e4:	a0 e8       	ldi	r26, 0x80	; 128
    30e6:	bf e3       	ldi	r27, 0x3F	; 63
    30e8:	80 83       	st	Z, r24
    30ea:	91 83       	std	Z+1, r25	; 0x01
    30ec:	a2 83       	std	Z+2, r26	; 0x02
    30ee:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30f0:	8e 01       	movw	r16, r28
    30f2:	01 5c       	subi	r16, 0xC1	; 193
    30f4:	1f 4f       	sbci	r17, 0xFF	; 255
    30f6:	fe 01       	movw	r30, r28
    30f8:	ed 5b       	subi	r30, 0xBD	; 189
    30fa:	ff 4f       	sbci	r31, 0xFF	; 255
    30fc:	60 81       	ld	r22, Z
    30fe:	71 81       	ldd	r23, Z+1	; 0x01
    3100:	82 81       	ldd	r24, Z+2	; 0x02
    3102:	93 81       	ldd	r25, Z+3	; 0x03
    3104:	20 e0       	ldi	r18, 0x00	; 0
    3106:	30 e0       	ldi	r19, 0x00	; 0
    3108:	4a ef       	ldi	r20, 0xFA	; 250
    310a:	54 e4       	ldi	r21, 0x44	; 68
    310c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3110:	dc 01       	movw	r26, r24
    3112:	cb 01       	movw	r24, r22
    3114:	f8 01       	movw	r30, r16
    3116:	80 83       	st	Z, r24
    3118:	91 83       	std	Z+1, r25	; 0x01
    311a:	a2 83       	std	Z+2, r26	; 0x02
    311c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    311e:	fe 01       	movw	r30, r28
    3120:	ff 96       	adiw	r30, 0x3f	; 63
    3122:	60 81       	ld	r22, Z
    3124:	71 81       	ldd	r23, Z+1	; 0x01
    3126:	82 81       	ldd	r24, Z+2	; 0x02
    3128:	93 81       	ldd	r25, Z+3	; 0x03
    312a:	20 e0       	ldi	r18, 0x00	; 0
    312c:	30 e0       	ldi	r19, 0x00	; 0
    312e:	40 e8       	ldi	r20, 0x80	; 128
    3130:	5f e3       	ldi	r21, 0x3F	; 63
    3132:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3136:	88 23       	and	r24, r24
    3138:	2c f4       	brge	.+10     	; 0x3144 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    313a:	81 e0       	ldi	r24, 0x01	; 1
    313c:	90 e0       	ldi	r25, 0x00	; 0
    313e:	9e af       	std	Y+62, r25	; 0x3e
    3140:	8d af       	std	Y+61, r24	; 0x3d
    3142:	46 c0       	rjmp	.+140    	; 0x31d0 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    3144:	fe 01       	movw	r30, r28
    3146:	ff 96       	adiw	r30, 0x3f	; 63
    3148:	60 81       	ld	r22, Z
    314a:	71 81       	ldd	r23, Z+1	; 0x01
    314c:	82 81       	ldd	r24, Z+2	; 0x02
    314e:	93 81       	ldd	r25, Z+3	; 0x03
    3150:	20 e0       	ldi	r18, 0x00	; 0
    3152:	3f ef       	ldi	r19, 0xFF	; 255
    3154:	4f e7       	ldi	r20, 0x7F	; 127
    3156:	57 e4       	ldi	r21, 0x47	; 71
    3158:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    315c:	18 16       	cp	r1, r24
    315e:	64 f5       	brge	.+88     	; 0x31b8 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3160:	fe 01       	movw	r30, r28
    3162:	ed 5b       	subi	r30, 0xBD	; 189
    3164:	ff 4f       	sbci	r31, 0xFF	; 255
    3166:	60 81       	ld	r22, Z
    3168:	71 81       	ldd	r23, Z+1	; 0x01
    316a:	82 81       	ldd	r24, Z+2	; 0x02
    316c:	93 81       	ldd	r25, Z+3	; 0x03
    316e:	20 e0       	ldi	r18, 0x00	; 0
    3170:	30 e0       	ldi	r19, 0x00	; 0
    3172:	40 e2       	ldi	r20, 0x20	; 32
    3174:	51 e4       	ldi	r21, 0x41	; 65
    3176:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    317a:	dc 01       	movw	r26, r24
    317c:	cb 01       	movw	r24, r22
    317e:	bc 01       	movw	r22, r24
    3180:	cd 01       	movw	r24, r26
    3182:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3186:	dc 01       	movw	r26, r24
    3188:	cb 01       	movw	r24, r22
    318a:	9e af       	std	Y+62, r25	; 0x3e
    318c:	8d af       	std	Y+61, r24	; 0x3d
    318e:	0f c0       	rjmp	.+30     	; 0x31ae <LCD_displayCharacter+0x478>
    3190:	88 ec       	ldi	r24, 0xC8	; 200
    3192:	90 e0       	ldi	r25, 0x00	; 0
    3194:	9c af       	std	Y+60, r25	; 0x3c
    3196:	8b af       	std	Y+59, r24	; 0x3b
    3198:	8b ad       	ldd	r24, Y+59	; 0x3b
    319a:	9c ad       	ldd	r25, Y+60	; 0x3c
    319c:	01 97       	sbiw	r24, 0x01	; 1
    319e:	f1 f7       	brne	.-4      	; 0x319c <LCD_displayCharacter+0x466>
    31a0:	9c af       	std	Y+60, r25	; 0x3c
    31a2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31a4:	8d ad       	ldd	r24, Y+61	; 0x3d
    31a6:	9e ad       	ldd	r25, Y+62	; 0x3e
    31a8:	01 97       	sbiw	r24, 0x01	; 1
    31aa:	9e af       	std	Y+62, r25	; 0x3e
    31ac:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31ae:	8d ad       	ldd	r24, Y+61	; 0x3d
    31b0:	9e ad       	ldd	r25, Y+62	; 0x3e
    31b2:	00 97       	sbiw	r24, 0x00	; 0
    31b4:	69 f7       	brne	.-38     	; 0x3190 <LCD_displayCharacter+0x45a>
    31b6:	16 c0       	rjmp	.+44     	; 0x31e4 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31b8:	fe 01       	movw	r30, r28
    31ba:	ff 96       	adiw	r30, 0x3f	; 63
    31bc:	60 81       	ld	r22, Z
    31be:	71 81       	ldd	r23, Z+1	; 0x01
    31c0:	82 81       	ldd	r24, Z+2	; 0x02
    31c2:	93 81       	ldd	r25, Z+3	; 0x03
    31c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31c8:	dc 01       	movw	r26, r24
    31ca:	cb 01       	movw	r24, r22
    31cc:	9e af       	std	Y+62, r25	; 0x3e
    31ce:	8d af       	std	Y+61, r24	; 0x3d
    31d0:	8d ad       	ldd	r24, Y+61	; 0x3d
    31d2:	9e ad       	ldd	r25, Y+62	; 0x3e
    31d4:	9a af       	std	Y+58, r25	; 0x3a
    31d6:	89 af       	std	Y+57, r24	; 0x39
    31d8:	89 ad       	ldd	r24, Y+57	; 0x39
    31da:	9a ad       	ldd	r25, Y+58	; 0x3a
    31dc:	01 97       	sbiw	r24, 0x01	; 1
    31de:	f1 f7       	brne	.-4      	; 0x31dc <LCD_displayCharacter+0x4a6>
    31e0:	9a af       	std	Y+58, r25	; 0x3a
    31e2:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    31e4:	80 e0       	ldi	r24, 0x00	; 0
    31e6:	64 e0       	ldi	r22, 0x04	; 4
    31e8:	40 e0       	ldi	r20, 0x00	; 0
    31ea:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <GPIO_writePin>
    31ee:	80 e0       	ldi	r24, 0x00	; 0
    31f0:	90 e0       	ldi	r25, 0x00	; 0
    31f2:	a0 e8       	ldi	r26, 0x80	; 128
    31f4:	bf e3       	ldi	r27, 0x3F	; 63
    31f6:	8d ab       	std	Y+53, r24	; 0x35
    31f8:	9e ab       	std	Y+54, r25	; 0x36
    31fa:	af ab       	std	Y+55, r26	; 0x37
    31fc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31fe:	6d a9       	ldd	r22, Y+53	; 0x35
    3200:	7e a9       	ldd	r23, Y+54	; 0x36
    3202:	8f a9       	ldd	r24, Y+55	; 0x37
    3204:	98 ad       	ldd	r25, Y+56	; 0x38
    3206:	20 e0       	ldi	r18, 0x00	; 0
    3208:	30 e0       	ldi	r19, 0x00	; 0
    320a:	4a ef       	ldi	r20, 0xFA	; 250
    320c:	54 e4       	ldi	r21, 0x44	; 68
    320e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3212:	dc 01       	movw	r26, r24
    3214:	cb 01       	movw	r24, r22
    3216:	89 ab       	std	Y+49, r24	; 0x31
    3218:	9a ab       	std	Y+50, r25	; 0x32
    321a:	ab ab       	std	Y+51, r26	; 0x33
    321c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    321e:	69 a9       	ldd	r22, Y+49	; 0x31
    3220:	7a a9       	ldd	r23, Y+50	; 0x32
    3222:	8b a9       	ldd	r24, Y+51	; 0x33
    3224:	9c a9       	ldd	r25, Y+52	; 0x34
    3226:	20 e0       	ldi	r18, 0x00	; 0
    3228:	30 e0       	ldi	r19, 0x00	; 0
    322a:	40 e8       	ldi	r20, 0x80	; 128
    322c:	5f e3       	ldi	r21, 0x3F	; 63
    322e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3232:	88 23       	and	r24, r24
    3234:	2c f4       	brge	.+10     	; 0x3240 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    3236:	81 e0       	ldi	r24, 0x01	; 1
    3238:	90 e0       	ldi	r25, 0x00	; 0
    323a:	98 ab       	std	Y+48, r25	; 0x30
    323c:	8f a7       	std	Y+47, r24	; 0x2f
    323e:	3f c0       	rjmp	.+126    	; 0x32be <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    3240:	69 a9       	ldd	r22, Y+49	; 0x31
    3242:	7a a9       	ldd	r23, Y+50	; 0x32
    3244:	8b a9       	ldd	r24, Y+51	; 0x33
    3246:	9c a9       	ldd	r25, Y+52	; 0x34
    3248:	20 e0       	ldi	r18, 0x00	; 0
    324a:	3f ef       	ldi	r19, 0xFF	; 255
    324c:	4f e7       	ldi	r20, 0x7F	; 127
    324e:	57 e4       	ldi	r21, 0x47	; 71
    3250:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3254:	18 16       	cp	r1, r24
    3256:	4c f5       	brge	.+82     	; 0x32aa <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3258:	6d a9       	ldd	r22, Y+53	; 0x35
    325a:	7e a9       	ldd	r23, Y+54	; 0x36
    325c:	8f a9       	ldd	r24, Y+55	; 0x37
    325e:	98 ad       	ldd	r25, Y+56	; 0x38
    3260:	20 e0       	ldi	r18, 0x00	; 0
    3262:	30 e0       	ldi	r19, 0x00	; 0
    3264:	40 e2       	ldi	r20, 0x20	; 32
    3266:	51 e4       	ldi	r21, 0x41	; 65
    3268:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    326c:	dc 01       	movw	r26, r24
    326e:	cb 01       	movw	r24, r22
    3270:	bc 01       	movw	r22, r24
    3272:	cd 01       	movw	r24, r26
    3274:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3278:	dc 01       	movw	r26, r24
    327a:	cb 01       	movw	r24, r22
    327c:	98 ab       	std	Y+48, r25	; 0x30
    327e:	8f a7       	std	Y+47, r24	; 0x2f
    3280:	0f c0       	rjmp	.+30     	; 0x32a0 <LCD_displayCharacter+0x56a>
    3282:	88 ec       	ldi	r24, 0xC8	; 200
    3284:	90 e0       	ldi	r25, 0x00	; 0
    3286:	9e a7       	std	Y+46, r25	; 0x2e
    3288:	8d a7       	std	Y+45, r24	; 0x2d
    328a:	8d a5       	ldd	r24, Y+45	; 0x2d
    328c:	9e a5       	ldd	r25, Y+46	; 0x2e
    328e:	01 97       	sbiw	r24, 0x01	; 1
    3290:	f1 f7       	brne	.-4      	; 0x328e <LCD_displayCharacter+0x558>
    3292:	9e a7       	std	Y+46, r25	; 0x2e
    3294:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3296:	8f a5       	ldd	r24, Y+47	; 0x2f
    3298:	98 a9       	ldd	r25, Y+48	; 0x30
    329a:	01 97       	sbiw	r24, 0x01	; 1
    329c:	98 ab       	std	Y+48, r25	; 0x30
    329e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    32a2:	98 a9       	ldd	r25, Y+48	; 0x30
    32a4:	00 97       	sbiw	r24, 0x00	; 0
    32a6:	69 f7       	brne	.-38     	; 0x3282 <LCD_displayCharacter+0x54c>
    32a8:	14 c0       	rjmp	.+40     	; 0x32d2 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32aa:	69 a9       	ldd	r22, Y+49	; 0x31
    32ac:	7a a9       	ldd	r23, Y+50	; 0x32
    32ae:	8b a9       	ldd	r24, Y+51	; 0x33
    32b0:	9c a9       	ldd	r25, Y+52	; 0x34
    32b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32b6:	dc 01       	movw	r26, r24
    32b8:	cb 01       	movw	r24, r22
    32ba:	98 ab       	std	Y+48, r25	; 0x30
    32bc:	8f a7       	std	Y+47, r24	; 0x2f
    32be:	8f a5       	ldd	r24, Y+47	; 0x2f
    32c0:	98 a9       	ldd	r25, Y+48	; 0x30
    32c2:	9c a7       	std	Y+44, r25	; 0x2c
    32c4:	8b a7       	std	Y+43, r24	; 0x2b
    32c6:	8b a5       	ldd	r24, Y+43	; 0x2b
    32c8:	9c a5       	ldd	r25, Y+44	; 0x2c
    32ca:	01 97       	sbiw	r24, 0x01	; 1
    32cc:	f1 f7       	brne	.-4      	; 0x32ca <LCD_displayCharacter+0x594>
    32ce:	9c a7       	std	Y+44, r25	; 0x2c
    32d0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    32d2:	80 e0       	ldi	r24, 0x00	; 0
    32d4:	64 e0       	ldi	r22, 0x04	; 4
    32d6:	41 e0       	ldi	r20, 0x01	; 1
    32d8:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <GPIO_writePin>
    32dc:	80 e0       	ldi	r24, 0x00	; 0
    32de:	90 e0       	ldi	r25, 0x00	; 0
    32e0:	a0 e8       	ldi	r26, 0x80	; 128
    32e2:	bf e3       	ldi	r27, 0x3F	; 63
    32e4:	8f a3       	std	Y+39, r24	; 0x27
    32e6:	98 a7       	std	Y+40, r25	; 0x28
    32e8:	a9 a7       	std	Y+41, r26	; 0x29
    32ea:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32ec:	6f a1       	ldd	r22, Y+39	; 0x27
    32ee:	78 a5       	ldd	r23, Y+40	; 0x28
    32f0:	89 a5       	ldd	r24, Y+41	; 0x29
    32f2:	9a a5       	ldd	r25, Y+42	; 0x2a
    32f4:	20 e0       	ldi	r18, 0x00	; 0
    32f6:	30 e0       	ldi	r19, 0x00	; 0
    32f8:	4a ef       	ldi	r20, 0xFA	; 250
    32fa:	54 e4       	ldi	r21, 0x44	; 68
    32fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3300:	dc 01       	movw	r26, r24
    3302:	cb 01       	movw	r24, r22
    3304:	8b a3       	std	Y+35, r24	; 0x23
    3306:	9c a3       	std	Y+36, r25	; 0x24
    3308:	ad a3       	std	Y+37, r26	; 0x25
    330a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    330c:	6b a1       	ldd	r22, Y+35	; 0x23
    330e:	7c a1       	ldd	r23, Y+36	; 0x24
    3310:	8d a1       	ldd	r24, Y+37	; 0x25
    3312:	9e a1       	ldd	r25, Y+38	; 0x26
    3314:	20 e0       	ldi	r18, 0x00	; 0
    3316:	30 e0       	ldi	r19, 0x00	; 0
    3318:	40 e8       	ldi	r20, 0x80	; 128
    331a:	5f e3       	ldi	r21, 0x3F	; 63
    331c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3320:	88 23       	and	r24, r24
    3322:	2c f4       	brge	.+10     	; 0x332e <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    3324:	81 e0       	ldi	r24, 0x01	; 1
    3326:	90 e0       	ldi	r25, 0x00	; 0
    3328:	9a a3       	std	Y+34, r25	; 0x22
    332a:	89 a3       	std	Y+33, r24	; 0x21
    332c:	3f c0       	rjmp	.+126    	; 0x33ac <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    332e:	6b a1       	ldd	r22, Y+35	; 0x23
    3330:	7c a1       	ldd	r23, Y+36	; 0x24
    3332:	8d a1       	ldd	r24, Y+37	; 0x25
    3334:	9e a1       	ldd	r25, Y+38	; 0x26
    3336:	20 e0       	ldi	r18, 0x00	; 0
    3338:	3f ef       	ldi	r19, 0xFF	; 255
    333a:	4f e7       	ldi	r20, 0x7F	; 127
    333c:	57 e4       	ldi	r21, 0x47	; 71
    333e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3342:	18 16       	cp	r1, r24
    3344:	4c f5       	brge	.+82     	; 0x3398 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3346:	6f a1       	ldd	r22, Y+39	; 0x27
    3348:	78 a5       	ldd	r23, Y+40	; 0x28
    334a:	89 a5       	ldd	r24, Y+41	; 0x29
    334c:	9a a5       	ldd	r25, Y+42	; 0x2a
    334e:	20 e0       	ldi	r18, 0x00	; 0
    3350:	30 e0       	ldi	r19, 0x00	; 0
    3352:	40 e2       	ldi	r20, 0x20	; 32
    3354:	51 e4       	ldi	r21, 0x41	; 65
    3356:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    335a:	dc 01       	movw	r26, r24
    335c:	cb 01       	movw	r24, r22
    335e:	bc 01       	movw	r22, r24
    3360:	cd 01       	movw	r24, r26
    3362:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3366:	dc 01       	movw	r26, r24
    3368:	cb 01       	movw	r24, r22
    336a:	9a a3       	std	Y+34, r25	; 0x22
    336c:	89 a3       	std	Y+33, r24	; 0x21
    336e:	0f c0       	rjmp	.+30     	; 0x338e <LCD_displayCharacter+0x658>
    3370:	88 ec       	ldi	r24, 0xC8	; 200
    3372:	90 e0       	ldi	r25, 0x00	; 0
    3374:	98 a3       	std	Y+32, r25	; 0x20
    3376:	8f 8f       	std	Y+31, r24	; 0x1f
    3378:	8f 8d       	ldd	r24, Y+31	; 0x1f
    337a:	98 a1       	ldd	r25, Y+32	; 0x20
    337c:	01 97       	sbiw	r24, 0x01	; 1
    337e:	f1 f7       	brne	.-4      	; 0x337c <LCD_displayCharacter+0x646>
    3380:	98 a3       	std	Y+32, r25	; 0x20
    3382:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3384:	89 a1       	ldd	r24, Y+33	; 0x21
    3386:	9a a1       	ldd	r25, Y+34	; 0x22
    3388:	01 97       	sbiw	r24, 0x01	; 1
    338a:	9a a3       	std	Y+34, r25	; 0x22
    338c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    338e:	89 a1       	ldd	r24, Y+33	; 0x21
    3390:	9a a1       	ldd	r25, Y+34	; 0x22
    3392:	00 97       	sbiw	r24, 0x00	; 0
    3394:	69 f7       	brne	.-38     	; 0x3370 <LCD_displayCharacter+0x63a>
    3396:	14 c0       	rjmp	.+40     	; 0x33c0 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3398:	6b a1       	ldd	r22, Y+35	; 0x23
    339a:	7c a1       	ldd	r23, Y+36	; 0x24
    339c:	8d a1       	ldd	r24, Y+37	; 0x25
    339e:	9e a1       	ldd	r25, Y+38	; 0x26
    33a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33a4:	dc 01       	movw	r26, r24
    33a6:	cb 01       	movw	r24, r22
    33a8:	9a a3       	std	Y+34, r25	; 0x22
    33aa:	89 a3       	std	Y+33, r24	; 0x21
    33ac:	89 a1       	ldd	r24, Y+33	; 0x21
    33ae:	9a a1       	ldd	r25, Y+34	; 0x22
    33b0:	9e 8f       	std	Y+30, r25	; 0x1e
    33b2:	8d 8f       	std	Y+29, r24	; 0x1d
    33b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    33b6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    33b8:	01 97       	sbiw	r24, 0x01	; 1
    33ba:	f1 f7       	brne	.-4      	; 0x33b8 <LCD_displayCharacter+0x682>
    33bc:	9e 8f       	std	Y+30, r25	; 0x1e
    33be:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    33c0:	fe 01       	movw	r30, r28
    33c2:	ed 59       	subi	r30, 0x9D	; 157
    33c4:	ff 4f       	sbci	r31, 0xFF	; 255
    33c6:	80 81       	ld	r24, Z
    33c8:	98 2f       	mov	r25, r24
    33ca:	91 70       	andi	r25, 0x01	; 1
    33cc:	80 e0       	ldi	r24, 0x00	; 0
    33ce:	60 e0       	ldi	r22, 0x00	; 0
    33d0:	49 2f       	mov	r20, r25
    33d2:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    33d6:	fe 01       	movw	r30, r28
    33d8:	ed 59       	subi	r30, 0x9D	; 157
    33da:	ff 4f       	sbci	r31, 0xFF	; 255
    33dc:	80 81       	ld	r24, Z
    33de:	88 2f       	mov	r24, r24
    33e0:	90 e0       	ldi	r25, 0x00	; 0
    33e2:	82 70       	andi	r24, 0x02	; 2
    33e4:	90 70       	andi	r25, 0x00	; 0
    33e6:	95 95       	asr	r25
    33e8:	87 95       	ror	r24
    33ea:	98 2f       	mov	r25, r24
    33ec:	80 e0       	ldi	r24, 0x00	; 0
    33ee:	61 e0       	ldi	r22, 0x01	; 1
    33f0:	49 2f       	mov	r20, r25
    33f2:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    33f6:	fe 01       	movw	r30, r28
    33f8:	ed 59       	subi	r30, 0x9D	; 157
    33fa:	ff 4f       	sbci	r31, 0xFF	; 255
    33fc:	80 81       	ld	r24, Z
    33fe:	88 2f       	mov	r24, r24
    3400:	90 e0       	ldi	r25, 0x00	; 0
    3402:	84 70       	andi	r24, 0x04	; 4
    3404:	90 70       	andi	r25, 0x00	; 0
    3406:	95 95       	asr	r25
    3408:	87 95       	ror	r24
    340a:	95 95       	asr	r25
    340c:	87 95       	ror	r24
    340e:	98 2f       	mov	r25, r24
    3410:	80 e0       	ldi	r24, 0x00	; 0
    3412:	62 e0       	ldi	r22, 0x02	; 2
    3414:	49 2f       	mov	r20, r25
    3416:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    341a:	fe 01       	movw	r30, r28
    341c:	ed 59       	subi	r30, 0x9D	; 157
    341e:	ff 4f       	sbci	r31, 0xFF	; 255
    3420:	80 81       	ld	r24, Z
    3422:	88 2f       	mov	r24, r24
    3424:	90 e0       	ldi	r25, 0x00	; 0
    3426:	88 70       	andi	r24, 0x08	; 8
    3428:	90 70       	andi	r25, 0x00	; 0
    342a:	95 95       	asr	r25
    342c:	87 95       	ror	r24
    342e:	95 95       	asr	r25
    3430:	87 95       	ror	r24
    3432:	95 95       	asr	r25
    3434:	87 95       	ror	r24
    3436:	98 2f       	mov	r25, r24
    3438:	80 e0       	ldi	r24, 0x00	; 0
    343a:	63 e0       	ldi	r22, 0x03	; 3
    343c:	49 2f       	mov	r20, r25
    343e:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <GPIO_writePin>
    3442:	80 e0       	ldi	r24, 0x00	; 0
    3444:	90 e0       	ldi	r25, 0x00	; 0
    3446:	a0 e8       	ldi	r26, 0x80	; 128
    3448:	bf e3       	ldi	r27, 0x3F	; 63
    344a:	89 8f       	std	Y+25, r24	; 0x19
    344c:	9a 8f       	std	Y+26, r25	; 0x1a
    344e:	ab 8f       	std	Y+27, r26	; 0x1b
    3450:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3452:	69 8d       	ldd	r22, Y+25	; 0x19
    3454:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3456:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3458:	9c 8d       	ldd	r25, Y+28	; 0x1c
    345a:	20 e0       	ldi	r18, 0x00	; 0
    345c:	30 e0       	ldi	r19, 0x00	; 0
    345e:	4a ef       	ldi	r20, 0xFA	; 250
    3460:	54 e4       	ldi	r21, 0x44	; 68
    3462:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3466:	dc 01       	movw	r26, r24
    3468:	cb 01       	movw	r24, r22
    346a:	8d 8b       	std	Y+21, r24	; 0x15
    346c:	9e 8b       	std	Y+22, r25	; 0x16
    346e:	af 8b       	std	Y+23, r26	; 0x17
    3470:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3472:	6d 89       	ldd	r22, Y+21	; 0x15
    3474:	7e 89       	ldd	r23, Y+22	; 0x16
    3476:	8f 89       	ldd	r24, Y+23	; 0x17
    3478:	98 8d       	ldd	r25, Y+24	; 0x18
    347a:	20 e0       	ldi	r18, 0x00	; 0
    347c:	30 e0       	ldi	r19, 0x00	; 0
    347e:	40 e8       	ldi	r20, 0x80	; 128
    3480:	5f e3       	ldi	r21, 0x3F	; 63
    3482:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3486:	88 23       	and	r24, r24
    3488:	2c f4       	brge	.+10     	; 0x3494 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    348a:	81 e0       	ldi	r24, 0x01	; 1
    348c:	90 e0       	ldi	r25, 0x00	; 0
    348e:	9c 8b       	std	Y+20, r25	; 0x14
    3490:	8b 8b       	std	Y+19, r24	; 0x13
    3492:	3f c0       	rjmp	.+126    	; 0x3512 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    3494:	6d 89       	ldd	r22, Y+21	; 0x15
    3496:	7e 89       	ldd	r23, Y+22	; 0x16
    3498:	8f 89       	ldd	r24, Y+23	; 0x17
    349a:	98 8d       	ldd	r25, Y+24	; 0x18
    349c:	20 e0       	ldi	r18, 0x00	; 0
    349e:	3f ef       	ldi	r19, 0xFF	; 255
    34a0:	4f e7       	ldi	r20, 0x7F	; 127
    34a2:	57 e4       	ldi	r21, 0x47	; 71
    34a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34a8:	18 16       	cp	r1, r24
    34aa:	4c f5       	brge	.+82     	; 0x34fe <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34ac:	69 8d       	ldd	r22, Y+25	; 0x19
    34ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    34b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34b4:	20 e0       	ldi	r18, 0x00	; 0
    34b6:	30 e0       	ldi	r19, 0x00	; 0
    34b8:	40 e2       	ldi	r20, 0x20	; 32
    34ba:	51 e4       	ldi	r21, 0x41	; 65
    34bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34c0:	dc 01       	movw	r26, r24
    34c2:	cb 01       	movw	r24, r22
    34c4:	bc 01       	movw	r22, r24
    34c6:	cd 01       	movw	r24, r26
    34c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34cc:	dc 01       	movw	r26, r24
    34ce:	cb 01       	movw	r24, r22
    34d0:	9c 8b       	std	Y+20, r25	; 0x14
    34d2:	8b 8b       	std	Y+19, r24	; 0x13
    34d4:	0f c0       	rjmp	.+30     	; 0x34f4 <LCD_displayCharacter+0x7be>
    34d6:	88 ec       	ldi	r24, 0xC8	; 200
    34d8:	90 e0       	ldi	r25, 0x00	; 0
    34da:	9a 8b       	std	Y+18, r25	; 0x12
    34dc:	89 8b       	std	Y+17, r24	; 0x11
    34de:	89 89       	ldd	r24, Y+17	; 0x11
    34e0:	9a 89       	ldd	r25, Y+18	; 0x12
    34e2:	01 97       	sbiw	r24, 0x01	; 1
    34e4:	f1 f7       	brne	.-4      	; 0x34e2 <LCD_displayCharacter+0x7ac>
    34e6:	9a 8b       	std	Y+18, r25	; 0x12
    34e8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34ea:	8b 89       	ldd	r24, Y+19	; 0x13
    34ec:	9c 89       	ldd	r25, Y+20	; 0x14
    34ee:	01 97       	sbiw	r24, 0x01	; 1
    34f0:	9c 8b       	std	Y+20, r25	; 0x14
    34f2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34f4:	8b 89       	ldd	r24, Y+19	; 0x13
    34f6:	9c 89       	ldd	r25, Y+20	; 0x14
    34f8:	00 97       	sbiw	r24, 0x00	; 0
    34fa:	69 f7       	brne	.-38     	; 0x34d6 <LCD_displayCharacter+0x7a0>
    34fc:	14 c0       	rjmp	.+40     	; 0x3526 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34fe:	6d 89       	ldd	r22, Y+21	; 0x15
    3500:	7e 89       	ldd	r23, Y+22	; 0x16
    3502:	8f 89       	ldd	r24, Y+23	; 0x17
    3504:	98 8d       	ldd	r25, Y+24	; 0x18
    3506:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    350a:	dc 01       	movw	r26, r24
    350c:	cb 01       	movw	r24, r22
    350e:	9c 8b       	std	Y+20, r25	; 0x14
    3510:	8b 8b       	std	Y+19, r24	; 0x13
    3512:	8b 89       	ldd	r24, Y+19	; 0x13
    3514:	9c 89       	ldd	r25, Y+20	; 0x14
    3516:	98 8b       	std	Y+16, r25	; 0x10
    3518:	8f 87       	std	Y+15, r24	; 0x0f
    351a:	8f 85       	ldd	r24, Y+15	; 0x0f
    351c:	98 89       	ldd	r25, Y+16	; 0x10
    351e:	01 97       	sbiw	r24, 0x01	; 1
    3520:	f1 f7       	brne	.-4      	; 0x351e <LCD_displayCharacter+0x7e8>
    3522:	98 8b       	std	Y+16, r25	; 0x10
    3524:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3526:	80 e0       	ldi	r24, 0x00	; 0
    3528:	64 e0       	ldi	r22, 0x04	; 4
    352a:	40 e0       	ldi	r20, 0x00	; 0
    352c:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <GPIO_writePin>
    3530:	80 e0       	ldi	r24, 0x00	; 0
    3532:	90 e0       	ldi	r25, 0x00	; 0
    3534:	a0 e8       	ldi	r26, 0x80	; 128
    3536:	bf e3       	ldi	r27, 0x3F	; 63
    3538:	8b 87       	std	Y+11, r24	; 0x0b
    353a:	9c 87       	std	Y+12, r25	; 0x0c
    353c:	ad 87       	std	Y+13, r26	; 0x0d
    353e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3540:	6b 85       	ldd	r22, Y+11	; 0x0b
    3542:	7c 85       	ldd	r23, Y+12	; 0x0c
    3544:	8d 85       	ldd	r24, Y+13	; 0x0d
    3546:	9e 85       	ldd	r25, Y+14	; 0x0e
    3548:	20 e0       	ldi	r18, 0x00	; 0
    354a:	30 e0       	ldi	r19, 0x00	; 0
    354c:	4a ef       	ldi	r20, 0xFA	; 250
    354e:	54 e4       	ldi	r21, 0x44	; 68
    3550:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3554:	dc 01       	movw	r26, r24
    3556:	cb 01       	movw	r24, r22
    3558:	8f 83       	std	Y+7, r24	; 0x07
    355a:	98 87       	std	Y+8, r25	; 0x08
    355c:	a9 87       	std	Y+9, r26	; 0x09
    355e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3560:	6f 81       	ldd	r22, Y+7	; 0x07
    3562:	78 85       	ldd	r23, Y+8	; 0x08
    3564:	89 85       	ldd	r24, Y+9	; 0x09
    3566:	9a 85       	ldd	r25, Y+10	; 0x0a
    3568:	20 e0       	ldi	r18, 0x00	; 0
    356a:	30 e0       	ldi	r19, 0x00	; 0
    356c:	40 e8       	ldi	r20, 0x80	; 128
    356e:	5f e3       	ldi	r21, 0x3F	; 63
    3570:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3574:	88 23       	and	r24, r24
    3576:	2c f4       	brge	.+10     	; 0x3582 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    3578:	81 e0       	ldi	r24, 0x01	; 1
    357a:	90 e0       	ldi	r25, 0x00	; 0
    357c:	9e 83       	std	Y+6, r25	; 0x06
    357e:	8d 83       	std	Y+5, r24	; 0x05
    3580:	3f c0       	rjmp	.+126    	; 0x3600 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    3582:	6f 81       	ldd	r22, Y+7	; 0x07
    3584:	78 85       	ldd	r23, Y+8	; 0x08
    3586:	89 85       	ldd	r24, Y+9	; 0x09
    3588:	9a 85       	ldd	r25, Y+10	; 0x0a
    358a:	20 e0       	ldi	r18, 0x00	; 0
    358c:	3f ef       	ldi	r19, 0xFF	; 255
    358e:	4f e7       	ldi	r20, 0x7F	; 127
    3590:	57 e4       	ldi	r21, 0x47	; 71
    3592:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3596:	18 16       	cp	r1, r24
    3598:	4c f5       	brge	.+82     	; 0x35ec <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    359a:	6b 85       	ldd	r22, Y+11	; 0x0b
    359c:	7c 85       	ldd	r23, Y+12	; 0x0c
    359e:	8d 85       	ldd	r24, Y+13	; 0x0d
    35a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    35a2:	20 e0       	ldi	r18, 0x00	; 0
    35a4:	30 e0       	ldi	r19, 0x00	; 0
    35a6:	40 e2       	ldi	r20, 0x20	; 32
    35a8:	51 e4       	ldi	r21, 0x41	; 65
    35aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35ae:	dc 01       	movw	r26, r24
    35b0:	cb 01       	movw	r24, r22
    35b2:	bc 01       	movw	r22, r24
    35b4:	cd 01       	movw	r24, r26
    35b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35ba:	dc 01       	movw	r26, r24
    35bc:	cb 01       	movw	r24, r22
    35be:	9e 83       	std	Y+6, r25	; 0x06
    35c0:	8d 83       	std	Y+5, r24	; 0x05
    35c2:	0f c0       	rjmp	.+30     	; 0x35e2 <LCD_displayCharacter+0x8ac>
    35c4:	88 ec       	ldi	r24, 0xC8	; 200
    35c6:	90 e0       	ldi	r25, 0x00	; 0
    35c8:	9c 83       	std	Y+4, r25	; 0x04
    35ca:	8b 83       	std	Y+3, r24	; 0x03
    35cc:	8b 81       	ldd	r24, Y+3	; 0x03
    35ce:	9c 81       	ldd	r25, Y+4	; 0x04
    35d0:	01 97       	sbiw	r24, 0x01	; 1
    35d2:	f1 f7       	brne	.-4      	; 0x35d0 <LCD_displayCharacter+0x89a>
    35d4:	9c 83       	std	Y+4, r25	; 0x04
    35d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35d8:	8d 81       	ldd	r24, Y+5	; 0x05
    35da:	9e 81       	ldd	r25, Y+6	; 0x06
    35dc:	01 97       	sbiw	r24, 0x01	; 1
    35de:	9e 83       	std	Y+6, r25	; 0x06
    35e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35e2:	8d 81       	ldd	r24, Y+5	; 0x05
    35e4:	9e 81       	ldd	r25, Y+6	; 0x06
    35e6:	00 97       	sbiw	r24, 0x00	; 0
    35e8:	69 f7       	brne	.-38     	; 0x35c4 <LCD_displayCharacter+0x88e>
    35ea:	14 c0       	rjmp	.+40     	; 0x3614 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35ec:	6f 81       	ldd	r22, Y+7	; 0x07
    35ee:	78 85       	ldd	r23, Y+8	; 0x08
    35f0:	89 85       	ldd	r24, Y+9	; 0x09
    35f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    35f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35f8:	dc 01       	movw	r26, r24
    35fa:	cb 01       	movw	r24, r22
    35fc:	9e 83       	std	Y+6, r25	; 0x06
    35fe:	8d 83       	std	Y+5, r24	; 0x05
    3600:	8d 81       	ldd	r24, Y+5	; 0x05
    3602:	9e 81       	ldd	r25, Y+6	; 0x06
    3604:	9a 83       	std	Y+2, r25	; 0x02
    3606:	89 83       	std	Y+1, r24	; 0x01
    3608:	89 81       	ldd	r24, Y+1	; 0x01
    360a:	9a 81       	ldd	r25, Y+2	; 0x02
    360c:	01 97       	sbiw	r24, 0x01	; 1
    360e:	f1 f7       	brne	.-4      	; 0x360c <LCD_displayCharacter+0x8d6>
    3610:	9a 83       	std	Y+2, r25	; 0x02
    3612:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    3614:	cd 59       	subi	r28, 0x9D	; 157
    3616:	df 4f       	sbci	r29, 0xFF	; 255
    3618:	0f b6       	in	r0, 0x3f	; 63
    361a:	f8 94       	cli
    361c:	de bf       	out	0x3e, r29	; 62
    361e:	0f be       	out	0x3f, r0	; 63
    3620:	cd bf       	out	0x3d, r28	; 61
    3622:	cf 91       	pop	r28
    3624:	df 91       	pop	r29
    3626:	1f 91       	pop	r17
    3628:	0f 91       	pop	r16
    362a:	08 95       	ret

0000362c <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    362c:	df 93       	push	r29
    362e:	cf 93       	push	r28
    3630:	00 d0       	rcall	.+0      	; 0x3632 <LCD_displayString+0x6>
    3632:	0f 92       	push	r0
    3634:	cd b7       	in	r28, 0x3d	; 61
    3636:	de b7       	in	r29, 0x3e	; 62
    3638:	9b 83       	std	Y+3, r25	; 0x03
    363a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    363c:	19 82       	std	Y+1, r1	; 0x01
    363e:	0e c0       	rjmp	.+28     	; 0x365c <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    3640:	89 81       	ldd	r24, Y+1	; 0x01
    3642:	28 2f       	mov	r18, r24
    3644:	30 e0       	ldi	r19, 0x00	; 0
    3646:	8a 81       	ldd	r24, Y+2	; 0x02
    3648:	9b 81       	ldd	r25, Y+3	; 0x03
    364a:	fc 01       	movw	r30, r24
    364c:	e2 0f       	add	r30, r18
    364e:	f3 1f       	adc	r31, r19
    3650:	80 81       	ld	r24, Z
    3652:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <LCD_displayCharacter>
		i++;
    3656:	89 81       	ldd	r24, Y+1	; 0x01
    3658:	8f 5f       	subi	r24, 0xFF	; 255
    365a:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    365c:	89 81       	ldd	r24, Y+1	; 0x01
    365e:	28 2f       	mov	r18, r24
    3660:	30 e0       	ldi	r19, 0x00	; 0
    3662:	8a 81       	ldd	r24, Y+2	; 0x02
    3664:	9b 81       	ldd	r25, Y+3	; 0x03
    3666:	fc 01       	movw	r30, r24
    3668:	e2 0f       	add	r30, r18
    366a:	f3 1f       	adc	r31, r19
    366c:	80 81       	ld	r24, Z
    366e:	88 23       	and	r24, r24
    3670:	39 f7       	brne	.-50     	; 0x3640 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    3672:	0f 90       	pop	r0
    3674:	0f 90       	pop	r0
    3676:	0f 90       	pop	r0
    3678:	cf 91       	pop	r28
    367a:	df 91       	pop	r29
    367c:	08 95       	ret

0000367e <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    367e:	df 93       	push	r29
    3680:	cf 93       	push	r28
    3682:	00 d0       	rcall	.+0      	; 0x3684 <LCD_moveCursor+0x6>
    3684:	00 d0       	rcall	.+0      	; 0x3686 <LCD_moveCursor+0x8>
    3686:	0f 92       	push	r0
    3688:	cd b7       	in	r28, 0x3d	; 61
    368a:	de b7       	in	r29, 0x3e	; 62
    368c:	8a 83       	std	Y+2, r24	; 0x02
    368e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    3690:	8a 81       	ldd	r24, Y+2	; 0x02
    3692:	28 2f       	mov	r18, r24
    3694:	30 e0       	ldi	r19, 0x00	; 0
    3696:	3d 83       	std	Y+5, r19	; 0x05
    3698:	2c 83       	std	Y+4, r18	; 0x04
    369a:	8c 81       	ldd	r24, Y+4	; 0x04
    369c:	9d 81       	ldd	r25, Y+5	; 0x05
    369e:	81 30       	cpi	r24, 0x01	; 1
    36a0:	91 05       	cpc	r25, r1
    36a2:	c1 f0       	breq	.+48     	; 0x36d4 <LCD_moveCursor+0x56>
    36a4:	2c 81       	ldd	r18, Y+4	; 0x04
    36a6:	3d 81       	ldd	r19, Y+5	; 0x05
    36a8:	22 30       	cpi	r18, 0x02	; 2
    36aa:	31 05       	cpc	r19, r1
    36ac:	2c f4       	brge	.+10     	; 0x36b8 <LCD_moveCursor+0x3a>
    36ae:	8c 81       	ldd	r24, Y+4	; 0x04
    36b0:	9d 81       	ldd	r25, Y+5	; 0x05
    36b2:	00 97       	sbiw	r24, 0x00	; 0
    36b4:	61 f0       	breq	.+24     	; 0x36ce <LCD_moveCursor+0x50>
    36b6:	19 c0       	rjmp	.+50     	; 0x36ea <LCD_moveCursor+0x6c>
    36b8:	2c 81       	ldd	r18, Y+4	; 0x04
    36ba:	3d 81       	ldd	r19, Y+5	; 0x05
    36bc:	22 30       	cpi	r18, 0x02	; 2
    36be:	31 05       	cpc	r19, r1
    36c0:	69 f0       	breq	.+26     	; 0x36dc <LCD_moveCursor+0x5e>
    36c2:	8c 81       	ldd	r24, Y+4	; 0x04
    36c4:	9d 81       	ldd	r25, Y+5	; 0x05
    36c6:	83 30       	cpi	r24, 0x03	; 3
    36c8:	91 05       	cpc	r25, r1
    36ca:	61 f0       	breq	.+24     	; 0x36e4 <LCD_moveCursor+0x66>
    36cc:	0e c0       	rjmp	.+28     	; 0x36ea <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    36ce:	8b 81       	ldd	r24, Y+3	; 0x03
    36d0:	89 83       	std	Y+1, r24	; 0x01
    36d2:	0b c0       	rjmp	.+22     	; 0x36ea <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    36d4:	8b 81       	ldd	r24, Y+3	; 0x03
    36d6:	80 5c       	subi	r24, 0xC0	; 192
    36d8:	89 83       	std	Y+1, r24	; 0x01
    36da:	07 c0       	rjmp	.+14     	; 0x36ea <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    36dc:	8b 81       	ldd	r24, Y+3	; 0x03
    36de:	80 5f       	subi	r24, 0xF0	; 240
    36e0:	89 83       	std	Y+1, r24	; 0x01
    36e2:	03 c0       	rjmp	.+6      	; 0x36ea <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    36e4:	8b 81       	ldd	r24, Y+3	; 0x03
    36e6:	80 5b       	subi	r24, 0xB0	; 176
    36e8:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    36ea:	89 81       	ldd	r24, Y+1	; 0x01
    36ec:	80 68       	ori	r24, 0x80	; 128
    36ee:	0e 94 20 12 	call	0x2440	; 0x2440 <LCD_sendCommand>
}
    36f2:	0f 90       	pop	r0
    36f4:	0f 90       	pop	r0
    36f6:	0f 90       	pop	r0
    36f8:	0f 90       	pop	r0
    36fa:	0f 90       	pop	r0
    36fc:	cf 91       	pop	r28
    36fe:	df 91       	pop	r29
    3700:	08 95       	ret

00003702 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    3702:	df 93       	push	r29
    3704:	cf 93       	push	r28
    3706:	00 d0       	rcall	.+0      	; 0x3708 <LCD_displayStringRowColumn+0x6>
    3708:	00 d0       	rcall	.+0      	; 0x370a <LCD_displayStringRowColumn+0x8>
    370a:	cd b7       	in	r28, 0x3d	; 61
    370c:	de b7       	in	r29, 0x3e	; 62
    370e:	89 83       	std	Y+1, r24	; 0x01
    3710:	6a 83       	std	Y+2, r22	; 0x02
    3712:	5c 83       	std	Y+4, r21	; 0x04
    3714:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    3716:	89 81       	ldd	r24, Y+1	; 0x01
    3718:	6a 81       	ldd	r22, Y+2	; 0x02
    371a:	0e 94 3f 1b 	call	0x367e	; 0x367e <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    371e:	8b 81       	ldd	r24, Y+3	; 0x03
    3720:	9c 81       	ldd	r25, Y+4	; 0x04
    3722:	0e 94 16 1b 	call	0x362c	; 0x362c <LCD_displayString>
}
    3726:	0f 90       	pop	r0
    3728:	0f 90       	pop	r0
    372a:	0f 90       	pop	r0
    372c:	0f 90       	pop	r0
    372e:	cf 91       	pop	r28
    3730:	df 91       	pop	r29
    3732:	08 95       	ret

00003734 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    3734:	df 93       	push	r29
    3736:	cf 93       	push	r28
    3738:	cd b7       	in	r28, 0x3d	; 61
    373a:	de b7       	in	r29, 0x3e	; 62
    373c:	62 97       	sbiw	r28, 0x12	; 18
    373e:	0f b6       	in	r0, 0x3f	; 63
    3740:	f8 94       	cli
    3742:	de bf       	out	0x3e, r29	; 62
    3744:	0f be       	out	0x3f, r0	; 63
    3746:	cd bf       	out	0x3d, r28	; 61
    3748:	9a 8b       	std	Y+18, r25	; 0x12
    374a:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    374c:	89 89       	ldd	r24, Y+17	; 0x11
    374e:	9a 89       	ldd	r25, Y+18	; 0x12
    3750:	9e 01       	movw	r18, r28
    3752:	2f 5f       	subi	r18, 0xFF	; 255
    3754:	3f 4f       	sbci	r19, 0xFF	; 255
    3756:	b9 01       	movw	r22, r18
    3758:	4a e0       	ldi	r20, 0x0A	; 10
    375a:	50 e0       	ldi	r21, 0x00	; 0
    375c:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <itoa>
   LCD_displayString(buff); /* Display the string */
    3760:	ce 01       	movw	r24, r28
    3762:	01 96       	adiw	r24, 0x01	; 1
    3764:	0e 94 16 1b 	call	0x362c	; 0x362c <LCD_displayString>
}
    3768:	62 96       	adiw	r28, 0x12	; 18
    376a:	0f b6       	in	r0, 0x3f	; 63
    376c:	f8 94       	cli
    376e:	de bf       	out	0x3e, r29	; 62
    3770:	0f be       	out	0x3f, r0	; 63
    3772:	cd bf       	out	0x3d, r28	; 61
    3774:	cf 91       	pop	r28
    3776:	df 91       	pop	r29
    3778:	08 95       	ret

0000377a <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    377a:	df 93       	push	r29
    377c:	cf 93       	push	r28
    377e:	cd b7       	in	r28, 0x3d	; 61
    3780:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    3782:	81 e0       	ldi	r24, 0x01	; 1
    3784:	0e 94 20 12 	call	0x2440	; 0x2440 <LCD_sendCommand>
}
    3788:	cf 91       	pop	r28
    378a:	df 91       	pop	r29
    378c:	08 95       	ret

0000378e <__vector_7>:
/*******************************************************************************
 *              				     ISRs                                      *
 *******************************************************************************/

ISR(TIMER1_COMPA_vect)
{
    378e:	1f 92       	push	r1
    3790:	0f 92       	push	r0
    3792:	0f b6       	in	r0, 0x3f	; 63
    3794:	0f 92       	push	r0
    3796:	11 24       	eor	r1, r1
    3798:	2f 93       	push	r18
    379a:	3f 93       	push	r19
    379c:	4f 93       	push	r20
    379e:	5f 93       	push	r21
    37a0:	6f 93       	push	r22
    37a2:	7f 93       	push	r23
    37a4:	8f 93       	push	r24
    37a6:	9f 93       	push	r25
    37a8:	af 93       	push	r26
    37aa:	bf 93       	push	r27
    37ac:	ef 93       	push	r30
    37ae:	ff 93       	push	r31
    37b0:	df 93       	push	r29
    37b2:	cf 93       	push	r28
    37b4:	cd b7       	in	r28, 0x3d	; 61
    37b6:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    37b8:	80 91 1a 02 	lds	r24, 0x021A
    37bc:	90 91 1b 02 	lds	r25, 0x021B
    37c0:	00 97       	sbiw	r24, 0x00	; 0
    37c2:	29 f0       	breq	.+10     	; 0x37ce <__vector_7+0x40>
		{
			/* Call the Call Back function in the application after the edge is detected */
			(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    37c4:	e0 91 1a 02 	lds	r30, 0x021A
    37c8:	f0 91 1b 02 	lds	r31, 0x021B
    37cc:	09 95       	icall
		}
}
    37ce:	cf 91       	pop	r28
    37d0:	df 91       	pop	r29
    37d2:	ff 91       	pop	r31
    37d4:	ef 91       	pop	r30
    37d6:	bf 91       	pop	r27
    37d8:	af 91       	pop	r26
    37da:	9f 91       	pop	r25
    37dc:	8f 91       	pop	r24
    37de:	7f 91       	pop	r23
    37e0:	6f 91       	pop	r22
    37e2:	5f 91       	pop	r21
    37e4:	4f 91       	pop	r20
    37e6:	3f 91       	pop	r19
    37e8:	2f 91       	pop	r18
    37ea:	0f 90       	pop	r0
    37ec:	0f be       	out	0x3f, r0	; 63
    37ee:	0f 90       	pop	r0
    37f0:	1f 90       	pop	r1
    37f2:	18 95       	reti

000037f4 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    37f4:	1f 92       	push	r1
    37f6:	0f 92       	push	r0
    37f8:	0f b6       	in	r0, 0x3f	; 63
    37fa:	0f 92       	push	r0
    37fc:	11 24       	eor	r1, r1
    37fe:	2f 93       	push	r18
    3800:	3f 93       	push	r19
    3802:	4f 93       	push	r20
    3804:	5f 93       	push	r21
    3806:	6f 93       	push	r22
    3808:	7f 93       	push	r23
    380a:	8f 93       	push	r24
    380c:	9f 93       	push	r25
    380e:	af 93       	push	r26
    3810:	bf 93       	push	r27
    3812:	ef 93       	push	r30
    3814:	ff 93       	push	r31
    3816:	df 93       	push	r29
    3818:	cf 93       	push	r28
    381a:	cd b7       	in	r28, 0x3d	; 61
    381c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    381e:	80 91 1a 02 	lds	r24, 0x021A
    3822:	90 91 1b 02 	lds	r25, 0x021B
    3826:	00 97       	sbiw	r24, 0x00	; 0
    3828:	29 f0       	breq	.+10     	; 0x3834 <__vector_9+0x40>
		{
			/* Call the Call Back function in the application after the edge is detected */
			(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    382a:	e0 91 1a 02 	lds	r30, 0x021A
    382e:	f0 91 1b 02 	lds	r31, 0x021B
    3832:	09 95       	icall
		}
}
    3834:	cf 91       	pop	r28
    3836:	df 91       	pop	r29
    3838:	ff 91       	pop	r31
    383a:	ef 91       	pop	r30
    383c:	bf 91       	pop	r27
    383e:	af 91       	pop	r26
    3840:	9f 91       	pop	r25
    3842:	8f 91       	pop	r24
    3844:	7f 91       	pop	r23
    3846:	6f 91       	pop	r22
    3848:	5f 91       	pop	r21
    384a:	4f 91       	pop	r20
    384c:	3f 91       	pop	r19
    384e:	2f 91       	pop	r18
    3850:	0f 90       	pop	r0
    3852:	0f be       	out	0x3f, r0	; 63
    3854:	0f 90       	pop	r0
    3856:	1f 90       	pop	r1
    3858:	18 95       	reti

0000385a <Timer1_init>:
/*
 * Description:
 * Function to initialize the Timer driver
 */
void Timer1_init(const Timer1_ConfigType * Timer1_Config)
{
    385a:	df 93       	push	r29
    385c:	cf 93       	push	r28
    385e:	00 d0       	rcall	.+0      	; 0x3860 <Timer1_init+0x6>
    3860:	cd b7       	in	r28, 0x3d	; 61
    3862:	de b7       	in	r29, 0x3e	; 62
    3864:	9a 83       	std	Y+2, r25	; 0x02
    3866:	89 83       	std	Y+1, r24	; 0x01
	/* Configure timer control register TCCR1A
	 * 1. Disconnect OC1A and OC1B  COM1A1=0 COM1A0=0 COM1B0=0 COM1B1=0
	 * 2. FOC1A=1 FOC1B=0
	 * 3. Select mode (Timer1_Config->mode)
	 */
	TCCR1A=(1<<FOC1A)|(((Timer1_Config->mode)&0x03)<<WGM10);
    3868:	af e4       	ldi	r26, 0x4F	; 79
    386a:	b0 e0       	ldi	r27, 0x00	; 0
    386c:	e9 81       	ldd	r30, Y+1	; 0x01
    386e:	fa 81       	ldd	r31, Y+2	; 0x02
    3870:	85 81       	ldd	r24, Z+5	; 0x05
    3872:	83 70       	andi	r24, 0x03	; 3
    3874:	88 60       	ori	r24, 0x08	; 8
    3876:	8c 93       	st	X, r24

	/* Configure timer control register TCCR1B
	 * 1. CTC Mode WGM12=1 WGM13=0 (Mode Number 4)
	 * 2. Prescaler = F_CPU/8 CS10=0 CS11=1 CS12=0
	 */
	TCCR1B=((((Timer1_Config->mode)&0x0C)>>2)<<WGM12)|(Timer1_Config->prescaler);
    3878:	ae e4       	ldi	r26, 0x4E	; 78
    387a:	b0 e0       	ldi	r27, 0x00	; 0
    387c:	e9 81       	ldd	r30, Y+1	; 0x01
    387e:	fa 81       	ldd	r31, Y+2	; 0x02
    3880:	85 81       	ldd	r24, Z+5	; 0x05
    3882:	88 2f       	mov	r24, r24
    3884:	90 e0       	ldi	r25, 0x00	; 0
    3886:	8c 70       	andi	r24, 0x0C	; 12
    3888:	90 70       	andi	r25, 0x00	; 0
    388a:	95 95       	asr	r25
    388c:	87 95       	ror	r24
    388e:	95 95       	asr	r25
    3890:	87 95       	ror	r24
    3892:	88 0f       	add	r24, r24
    3894:	99 1f       	adc	r25, r25
    3896:	88 0f       	add	r24, r24
    3898:	99 1f       	adc	r25, r25
    389a:	88 0f       	add	r24, r24
    389c:	99 1f       	adc	r25, r25
    389e:	98 2f       	mov	r25, r24
    38a0:	e9 81       	ldd	r30, Y+1	; 0x01
    38a2:	fa 81       	ldd	r31, Y+2	; 0x02
    38a4:	84 81       	ldd	r24, Z+4	; 0x04
    38a6:	89 2b       	or	r24, r25
    38a8:	8c 93       	st	X, r24

	TCNT1=Timer1_Config->initial_value;
    38aa:	ac e4       	ldi	r26, 0x4C	; 76
    38ac:	b0 e0       	ldi	r27, 0x00	; 0
    38ae:	e9 81       	ldd	r30, Y+1	; 0x01
    38b0:	fa 81       	ldd	r31, Y+2	; 0x02
    38b2:	80 81       	ld	r24, Z
    38b4:	91 81       	ldd	r25, Z+1	; 0x01
    38b6:	11 96       	adiw	r26, 0x01	; 1
    38b8:	9c 93       	st	X, r25
    38ba:	8e 93       	st	-X, r24

	OCR1A=Timer1_Config->compare_value;
    38bc:	aa e4       	ldi	r26, 0x4A	; 74
    38be:	b0 e0       	ldi	r27, 0x00	; 0
    38c0:	e9 81       	ldd	r30, Y+1	; 0x01
    38c2:	fa 81       	ldd	r31, Y+2	; 0x02
    38c4:	82 81       	ldd	r24, Z+2	; 0x02
    38c6:	93 81       	ldd	r25, Z+3	; 0x03
    38c8:	11 96       	adiw	r26, 0x01	; 1
    38ca:	9c 93       	st	X, r25
    38cc:	8e 93       	st	-X, r24

	TIMSK |= (1<<OCIE1A);
    38ce:	a9 e5       	ldi	r26, 0x59	; 89
    38d0:	b0 e0       	ldi	r27, 0x00	; 0
    38d2:	e9 e5       	ldi	r30, 0x59	; 89
    38d4:	f0 e0       	ldi	r31, 0x00	; 0
    38d6:	80 81       	ld	r24, Z
    38d8:	80 61       	ori	r24, 0x10	; 16
    38da:	8c 93       	st	X, r24

	SREG|=(1<<7);
    38dc:	af e5       	ldi	r26, 0x5F	; 95
    38de:	b0 e0       	ldi	r27, 0x00	; 0
    38e0:	ef e5       	ldi	r30, 0x5F	; 95
    38e2:	f0 e0       	ldi	r31, 0x00	; 0
    38e4:	80 81       	ld	r24, Z
    38e6:	80 68       	ori	r24, 0x80	; 128
    38e8:	8c 93       	st	X, r24
}
    38ea:	0f 90       	pop	r0
    38ec:	0f 90       	pop	r0
    38ee:	cf 91       	pop	r28
    38f0:	df 91       	pop	r29
    38f2:	08 95       	ret

000038f4 <Timer1_deInit>:
/*
 * Description:
 * Function to de-initialize the Timer driver
 */
void Timer1_deInit(void)
{
    38f4:	df 93       	push	r29
    38f6:	cf 93       	push	r28
    38f8:	cd b7       	in	r28, 0x3d	; 61
    38fa:	de b7       	in	r29, 0x3e	; 62
	TIMSK&=~(1<<OCIE1A);
    38fc:	a9 e5       	ldi	r26, 0x59	; 89
    38fe:	b0 e0       	ldi	r27, 0x00	; 0
    3900:	e9 e5       	ldi	r30, 0x59	; 89
    3902:	f0 e0       	ldi	r31, 0x00	; 0
    3904:	80 81       	ld	r24, Z
    3906:	8f 7e       	andi	r24, 0xEF	; 239
    3908:	8c 93       	st	X, r24
	SREG&=~(1<<7);
    390a:	af e5       	ldi	r26, 0x5F	; 95
    390c:	b0 e0       	ldi	r27, 0x00	; 0
    390e:	ef e5       	ldi	r30, 0x5F	; 95
    3910:	f0 e0       	ldi	r31, 0x00	; 0
    3912:	80 81       	ld	r24, Z
    3914:	8f 77       	andi	r24, 0x7F	; 127
    3916:	8c 93       	st	X, r24
	TCCR1A=0;
    3918:	ef e4       	ldi	r30, 0x4F	; 79
    391a:	f0 e0       	ldi	r31, 0x00	; 0
    391c:	10 82       	st	Z, r1
	TCCR1B=0;
    391e:	ee e4       	ldi	r30, 0x4E	; 78
    3920:	f0 e0       	ldi	r31, 0x00	; 0
    3922:	10 82       	st	Z, r1
	TCNT1=0;
    3924:	ec e4       	ldi	r30, 0x4C	; 76
    3926:	f0 e0       	ldi	r31, 0x00	; 0
    3928:	11 82       	std	Z+1, r1	; 0x01
    392a:	10 82       	st	Z, r1
	OCR1A=0;
    392c:	ea e4       	ldi	r30, 0x4A	; 74
    392e:	f0 e0       	ldi	r31, 0x00	; 0
    3930:	11 82       	std	Z+1, r1	; 0x01
    3932:	10 82       	st	Z, r1
	g_callBackPtr = NULL_PTR;
    3934:	10 92 1b 02 	sts	0x021B, r1
    3938:	10 92 1a 02 	sts	0x021A, r1

}
    393c:	cf 91       	pop	r28
    393e:	df 91       	pop	r29
    3940:	08 95       	ret

00003942 <Timer1_setCallBack>:
/*
 * Description:
 * Function to set the Call Back function address
 */
void Timer1_setCallBack(void(*a_ptr)(void))
{
    3942:	df 93       	push	r29
    3944:	cf 93       	push	r28
    3946:	00 d0       	rcall	.+0      	; 0x3948 <Timer1_setCallBack+0x6>
    3948:	cd b7       	in	r28, 0x3d	; 61
    394a:	de b7       	in	r29, 0x3e	; 62
    394c:	9a 83       	std	Y+2, r25	; 0x02
    394e:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
    3950:	89 81       	ldd	r24, Y+1	; 0x01
    3952:	9a 81       	ldd	r25, Y+2	; 0x02
    3954:	90 93 1b 02 	sts	0x021B, r25
    3958:	80 93 1a 02 	sts	0x021A, r24
}
    395c:	0f 90       	pop	r0
    395e:	0f 90       	pop	r0
    3960:	cf 91       	pop	r28
    3962:	df 91       	pop	r29
    3964:	08 95       	ret

00003966 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(UART_ConfigType* UART_Config)
{
    3966:	df 93       	push	r29
    3968:	cf 93       	push	r28
    396a:	00 d0       	rcall	.+0      	; 0x396c <UART_init+0x6>
    396c:	00 d0       	rcall	.+0      	; 0x396e <UART_init+0x8>
    396e:	cd b7       	in	r28, 0x3d	; 61
    3970:	de b7       	in	r29, 0x3e	; 62
    3972:	9c 83       	std	Y+4, r25	; 0x04
    3974:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    3976:	1a 82       	std	Y+2, r1	; 0x02
    3978:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    397a:	eb e2       	ldi	r30, 0x2B	; 43
    397c:	f0 e0       	ldi	r31, 0x00	; 0
    397e:	82 e0       	ldi	r24, 0x02	; 2
    3980:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    3982:	ea e2       	ldi	r30, 0x2A	; 42
    3984:	f0 e0       	ldi	r31, 0x00	; 0
    3986:	88 e1       	ldi	r24, 0x18	; 24
    3988:	80 83       	st	Z, r24
	 * UPM1:0  = UART_Config->parity
	 * USBS    = UART_Config->stop_bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | ((UART_Config->bit_data)<<UCSZ0) | ((UART_Config->parity)<<UPM0)| ((UART_Config->stop_bit)<<USBS);
    398a:	a0 e4       	ldi	r26, 0x40	; 64
    398c:	b0 e0       	ldi	r27, 0x00	; 0
    398e:	eb 81       	ldd	r30, Y+3	; 0x03
    3990:	fc 81       	ldd	r31, Y+4	; 0x04
    3992:	80 81       	ld	r24, Z
    3994:	88 2f       	mov	r24, r24
    3996:	90 e0       	ldi	r25, 0x00	; 0
    3998:	88 0f       	add	r24, r24
    399a:	99 1f       	adc	r25, r25
    399c:	28 2f       	mov	r18, r24
    399e:	20 68       	ori	r18, 0x80	; 128
    39a0:	eb 81       	ldd	r30, Y+3	; 0x03
    39a2:	fc 81       	ldd	r31, Y+4	; 0x04
    39a4:	81 81       	ldd	r24, Z+1	; 0x01
    39a6:	88 2f       	mov	r24, r24
    39a8:	90 e0       	ldi	r25, 0x00	; 0
    39aa:	82 95       	swap	r24
    39ac:	92 95       	swap	r25
    39ae:	90 7f       	andi	r25, 0xF0	; 240
    39b0:	98 27       	eor	r25, r24
    39b2:	80 7f       	andi	r24, 0xF0	; 240
    39b4:	98 27       	eor	r25, r24
    39b6:	28 2b       	or	r18, r24
    39b8:	eb 81       	ldd	r30, Y+3	; 0x03
    39ba:	fc 81       	ldd	r31, Y+4	; 0x04
    39bc:	82 81       	ldd	r24, Z+2	; 0x02
    39be:	88 2f       	mov	r24, r24
    39c0:	90 e0       	ldi	r25, 0x00	; 0
    39c2:	88 0f       	add	r24, r24
    39c4:	99 1f       	adc	r25, r25
    39c6:	88 0f       	add	r24, r24
    39c8:	99 1f       	adc	r25, r25
    39ca:	88 0f       	add	r24, r24
    39cc:	99 1f       	adc	r25, r25
    39ce:	82 2b       	or	r24, r18
    39d0:	8c 93       	st	X, r24
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((UART_Config->baud_rate) * 8UL))) - 1);
    39d2:	eb 81       	ldd	r30, Y+3	; 0x03
    39d4:	fc 81       	ldd	r31, Y+4	; 0x04
    39d6:	83 81       	ldd	r24, Z+3	; 0x03
    39d8:	94 81       	ldd	r25, Z+4	; 0x04
    39da:	a5 81       	ldd	r26, Z+5	; 0x05
    39dc:	b6 81       	ldd	r27, Z+6	; 0x06
    39de:	88 0f       	add	r24, r24
    39e0:	99 1f       	adc	r25, r25
    39e2:	aa 1f       	adc	r26, r26
    39e4:	bb 1f       	adc	r27, r27
    39e6:	88 0f       	add	r24, r24
    39e8:	99 1f       	adc	r25, r25
    39ea:	aa 1f       	adc	r26, r26
    39ec:	bb 1f       	adc	r27, r27
    39ee:	88 0f       	add	r24, r24
    39f0:	99 1f       	adc	r25, r25
    39f2:	aa 1f       	adc	r26, r26
    39f4:	bb 1f       	adc	r27, r27
    39f6:	9c 01       	movw	r18, r24
    39f8:	ad 01       	movw	r20, r26
    39fa:	80 e0       	ldi	r24, 0x00	; 0
    39fc:	92 e1       	ldi	r25, 0x12	; 18
    39fe:	aa e7       	ldi	r26, 0x7A	; 122
    3a00:	b0 e0       	ldi	r27, 0x00	; 0
    3a02:	bc 01       	movw	r22, r24
    3a04:	cd 01       	movw	r24, r26
    3a06:	0e 94 ae 1d 	call	0x3b5c	; 0x3b5c <__udivmodsi4>
    3a0a:	da 01       	movw	r26, r20
    3a0c:	c9 01       	movw	r24, r18
    3a0e:	01 97       	sbiw	r24, 0x01	; 1
    3a10:	9a 83       	std	Y+2, r25	; 0x02
    3a12:	89 83       	std	Y+1, r24	; 0x01
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    3a14:	e0 e4       	ldi	r30, 0x40	; 64
    3a16:	f0 e0       	ldi	r31, 0x00	; 0
    3a18:	89 81       	ldd	r24, Y+1	; 0x01
    3a1a:	9a 81       	ldd	r25, Y+2	; 0x02
    3a1c:	89 2f       	mov	r24, r25
    3a1e:	99 27       	eor	r25, r25
    3a20:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3a22:	e9 e2       	ldi	r30, 0x29	; 41
    3a24:	f0 e0       	ldi	r31, 0x00	; 0
    3a26:	89 81       	ldd	r24, Y+1	; 0x01
    3a28:	80 83       	st	Z, r24
}
    3a2a:	0f 90       	pop	r0
    3a2c:	0f 90       	pop	r0
    3a2e:	0f 90       	pop	r0
    3a30:	0f 90       	pop	r0
    3a32:	cf 91       	pop	r28
    3a34:	df 91       	pop	r29
    3a36:	08 95       	ret

00003a38 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    3a38:	df 93       	push	r29
    3a3a:	cf 93       	push	r28
    3a3c:	0f 92       	push	r0
    3a3e:	cd b7       	in	r28, 0x3d	; 61
    3a40:	de b7       	in	r29, 0x3e	; 62
    3a42:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3a44:	eb e2       	ldi	r30, 0x2B	; 43
    3a46:	f0 e0       	ldi	r31, 0x00	; 0
    3a48:	80 81       	ld	r24, Z
    3a4a:	88 2f       	mov	r24, r24
    3a4c:	90 e0       	ldi	r25, 0x00	; 0
    3a4e:	80 72       	andi	r24, 0x20	; 32
    3a50:	90 70       	andi	r25, 0x00	; 0
    3a52:	00 97       	sbiw	r24, 0x00	; 0
    3a54:	b9 f3       	breq	.-18     	; 0x3a44 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    3a56:	ec e2       	ldi	r30, 0x2C	; 44
    3a58:	f0 e0       	ldi	r31, 0x00	; 0
    3a5a:	89 81       	ldd	r24, Y+1	; 0x01
    3a5c:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    3a5e:	0f 90       	pop	r0
    3a60:	cf 91       	pop	r28
    3a62:	df 91       	pop	r29
    3a64:	08 95       	ret

00003a66 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    3a66:	df 93       	push	r29
    3a68:	cf 93       	push	r28
    3a6a:	cd b7       	in	r28, 0x3d	; 61
    3a6c:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3a6e:	eb e2       	ldi	r30, 0x2B	; 43
    3a70:	f0 e0       	ldi	r31, 0x00	; 0
    3a72:	80 81       	ld	r24, Z
    3a74:	88 23       	and	r24, r24
    3a76:	dc f7       	brge	.-10     	; 0x3a6e <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    3a78:	ec e2       	ldi	r30, 0x2C	; 44
    3a7a:	f0 e0       	ldi	r31, 0x00	; 0
    3a7c:	80 81       	ld	r24, Z
}
    3a7e:	cf 91       	pop	r28
    3a80:	df 91       	pop	r29
    3a82:	08 95       	ret

00003a84 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3a84:	df 93       	push	r29
    3a86:	cf 93       	push	r28
    3a88:	00 d0       	rcall	.+0      	; 0x3a8a <UART_sendString+0x6>
    3a8a:	0f 92       	push	r0
    3a8c:	cd b7       	in	r28, 0x3d	; 61
    3a8e:	de b7       	in	r29, 0x3e	; 62
    3a90:	9b 83       	std	Y+3, r25	; 0x03
    3a92:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3a94:	19 82       	std	Y+1, r1	; 0x01
    3a96:	0e c0       	rjmp	.+28     	; 0x3ab4 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3a98:	89 81       	ldd	r24, Y+1	; 0x01
    3a9a:	28 2f       	mov	r18, r24
    3a9c:	30 e0       	ldi	r19, 0x00	; 0
    3a9e:	8a 81       	ldd	r24, Y+2	; 0x02
    3aa0:	9b 81       	ldd	r25, Y+3	; 0x03
    3aa2:	fc 01       	movw	r30, r24
    3aa4:	e2 0f       	add	r30, r18
    3aa6:	f3 1f       	adc	r31, r19
    3aa8:	80 81       	ld	r24, Z
    3aaa:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <UART_sendByte>
		i++;
    3aae:	89 81       	ldd	r24, Y+1	; 0x01
    3ab0:	8f 5f       	subi	r24, 0xFF	; 255
    3ab2:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3ab4:	89 81       	ldd	r24, Y+1	; 0x01
    3ab6:	28 2f       	mov	r18, r24
    3ab8:	30 e0       	ldi	r19, 0x00	; 0
    3aba:	8a 81       	ldd	r24, Y+2	; 0x02
    3abc:	9b 81       	ldd	r25, Y+3	; 0x03
    3abe:	fc 01       	movw	r30, r24
    3ac0:	e2 0f       	add	r30, r18
    3ac2:	f3 1f       	adc	r31, r19
    3ac4:	80 81       	ld	r24, Z
    3ac6:	88 23       	and	r24, r24
    3ac8:	39 f7       	brne	.-50     	; 0x3a98 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    3aca:	0f 90       	pop	r0
    3acc:	0f 90       	pop	r0
    3ace:	0f 90       	pop	r0
    3ad0:	cf 91       	pop	r28
    3ad2:	df 91       	pop	r29
    3ad4:	08 95       	ret

00003ad6 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3ad6:	0f 93       	push	r16
    3ad8:	1f 93       	push	r17
    3ada:	df 93       	push	r29
    3adc:	cf 93       	push	r28
    3ade:	00 d0       	rcall	.+0      	; 0x3ae0 <UART_receiveString+0xa>
    3ae0:	0f 92       	push	r0
    3ae2:	cd b7       	in	r28, 0x3d	; 61
    3ae4:	de b7       	in	r29, 0x3e	; 62
    3ae6:	9b 83       	std	Y+3, r25	; 0x03
    3ae8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3aea:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3aec:	89 81       	ldd	r24, Y+1	; 0x01
    3aee:	28 2f       	mov	r18, r24
    3af0:	30 e0       	ldi	r19, 0x00	; 0
    3af2:	8a 81       	ldd	r24, Y+2	; 0x02
    3af4:	9b 81       	ldd	r25, Y+3	; 0x03
    3af6:	8c 01       	movw	r16, r24
    3af8:	02 0f       	add	r16, r18
    3afa:	13 1f       	adc	r17, r19
    3afc:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <UART_recieveByte>
    3b00:	f8 01       	movw	r30, r16
    3b02:	80 83       	st	Z, r24
    3b04:	0f c0       	rjmp	.+30     	; 0x3b24 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    3b06:	89 81       	ldd	r24, Y+1	; 0x01
    3b08:	8f 5f       	subi	r24, 0xFF	; 255
    3b0a:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3b0c:	89 81       	ldd	r24, Y+1	; 0x01
    3b0e:	28 2f       	mov	r18, r24
    3b10:	30 e0       	ldi	r19, 0x00	; 0
    3b12:	8a 81       	ldd	r24, Y+2	; 0x02
    3b14:	9b 81       	ldd	r25, Y+3	; 0x03
    3b16:	8c 01       	movw	r16, r24
    3b18:	02 0f       	add	r16, r18
    3b1a:	13 1f       	adc	r17, r19
    3b1c:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <UART_recieveByte>
    3b20:	f8 01       	movw	r30, r16
    3b22:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3b24:	89 81       	ldd	r24, Y+1	; 0x01
    3b26:	28 2f       	mov	r18, r24
    3b28:	30 e0       	ldi	r19, 0x00	; 0
    3b2a:	8a 81       	ldd	r24, Y+2	; 0x02
    3b2c:	9b 81       	ldd	r25, Y+3	; 0x03
    3b2e:	fc 01       	movw	r30, r24
    3b30:	e2 0f       	add	r30, r18
    3b32:	f3 1f       	adc	r31, r19
    3b34:	80 81       	ld	r24, Z
    3b36:	83 32       	cpi	r24, 0x23	; 35
    3b38:	31 f7       	brne	.-52     	; 0x3b06 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3b3a:	89 81       	ldd	r24, Y+1	; 0x01
    3b3c:	28 2f       	mov	r18, r24
    3b3e:	30 e0       	ldi	r19, 0x00	; 0
    3b40:	8a 81       	ldd	r24, Y+2	; 0x02
    3b42:	9b 81       	ldd	r25, Y+3	; 0x03
    3b44:	fc 01       	movw	r30, r24
    3b46:	e2 0f       	add	r30, r18
    3b48:	f3 1f       	adc	r31, r19
    3b4a:	10 82       	st	Z, r1
}
    3b4c:	0f 90       	pop	r0
    3b4e:	0f 90       	pop	r0
    3b50:	0f 90       	pop	r0
    3b52:	cf 91       	pop	r28
    3b54:	df 91       	pop	r29
    3b56:	1f 91       	pop	r17
    3b58:	0f 91       	pop	r16
    3b5a:	08 95       	ret

00003b5c <__udivmodsi4>:
    3b5c:	a1 e2       	ldi	r26, 0x21	; 33
    3b5e:	1a 2e       	mov	r1, r26
    3b60:	aa 1b       	sub	r26, r26
    3b62:	bb 1b       	sub	r27, r27
    3b64:	fd 01       	movw	r30, r26
    3b66:	0d c0       	rjmp	.+26     	; 0x3b82 <__udivmodsi4_ep>

00003b68 <__udivmodsi4_loop>:
    3b68:	aa 1f       	adc	r26, r26
    3b6a:	bb 1f       	adc	r27, r27
    3b6c:	ee 1f       	adc	r30, r30
    3b6e:	ff 1f       	adc	r31, r31
    3b70:	a2 17       	cp	r26, r18
    3b72:	b3 07       	cpc	r27, r19
    3b74:	e4 07       	cpc	r30, r20
    3b76:	f5 07       	cpc	r31, r21
    3b78:	20 f0       	brcs	.+8      	; 0x3b82 <__udivmodsi4_ep>
    3b7a:	a2 1b       	sub	r26, r18
    3b7c:	b3 0b       	sbc	r27, r19
    3b7e:	e4 0b       	sbc	r30, r20
    3b80:	f5 0b       	sbc	r31, r21

00003b82 <__udivmodsi4_ep>:
    3b82:	66 1f       	adc	r22, r22
    3b84:	77 1f       	adc	r23, r23
    3b86:	88 1f       	adc	r24, r24
    3b88:	99 1f       	adc	r25, r25
    3b8a:	1a 94       	dec	r1
    3b8c:	69 f7       	brne	.-38     	; 0x3b68 <__udivmodsi4_loop>
    3b8e:	60 95       	com	r22
    3b90:	70 95       	com	r23
    3b92:	80 95       	com	r24
    3b94:	90 95       	com	r25
    3b96:	9b 01       	movw	r18, r22
    3b98:	ac 01       	movw	r20, r24
    3b9a:	bd 01       	movw	r22, r26
    3b9c:	cf 01       	movw	r24, r30
    3b9e:	08 95       	ret

00003ba0 <__prologue_saves__>:
    3ba0:	2f 92       	push	r2
    3ba2:	3f 92       	push	r3
    3ba4:	4f 92       	push	r4
    3ba6:	5f 92       	push	r5
    3ba8:	6f 92       	push	r6
    3baa:	7f 92       	push	r7
    3bac:	8f 92       	push	r8
    3bae:	9f 92       	push	r9
    3bb0:	af 92       	push	r10
    3bb2:	bf 92       	push	r11
    3bb4:	cf 92       	push	r12
    3bb6:	df 92       	push	r13
    3bb8:	ef 92       	push	r14
    3bba:	ff 92       	push	r15
    3bbc:	0f 93       	push	r16
    3bbe:	1f 93       	push	r17
    3bc0:	cf 93       	push	r28
    3bc2:	df 93       	push	r29
    3bc4:	cd b7       	in	r28, 0x3d	; 61
    3bc6:	de b7       	in	r29, 0x3e	; 62
    3bc8:	ca 1b       	sub	r28, r26
    3bca:	db 0b       	sbc	r29, r27
    3bcc:	0f b6       	in	r0, 0x3f	; 63
    3bce:	f8 94       	cli
    3bd0:	de bf       	out	0x3e, r29	; 62
    3bd2:	0f be       	out	0x3f, r0	; 63
    3bd4:	cd bf       	out	0x3d, r28	; 61
    3bd6:	09 94       	ijmp

00003bd8 <__epilogue_restores__>:
    3bd8:	2a 88       	ldd	r2, Y+18	; 0x12
    3bda:	39 88       	ldd	r3, Y+17	; 0x11
    3bdc:	48 88       	ldd	r4, Y+16	; 0x10
    3bde:	5f 84       	ldd	r5, Y+15	; 0x0f
    3be0:	6e 84       	ldd	r6, Y+14	; 0x0e
    3be2:	7d 84       	ldd	r7, Y+13	; 0x0d
    3be4:	8c 84       	ldd	r8, Y+12	; 0x0c
    3be6:	9b 84       	ldd	r9, Y+11	; 0x0b
    3be8:	aa 84       	ldd	r10, Y+10	; 0x0a
    3bea:	b9 84       	ldd	r11, Y+9	; 0x09
    3bec:	c8 84       	ldd	r12, Y+8	; 0x08
    3bee:	df 80       	ldd	r13, Y+7	; 0x07
    3bf0:	ee 80       	ldd	r14, Y+6	; 0x06
    3bf2:	fd 80       	ldd	r15, Y+5	; 0x05
    3bf4:	0c 81       	ldd	r16, Y+4	; 0x04
    3bf6:	1b 81       	ldd	r17, Y+3	; 0x03
    3bf8:	aa 81       	ldd	r26, Y+2	; 0x02
    3bfa:	b9 81       	ldd	r27, Y+1	; 0x01
    3bfc:	ce 0f       	add	r28, r30
    3bfe:	d1 1d       	adc	r29, r1
    3c00:	0f b6       	in	r0, 0x3f	; 63
    3c02:	f8 94       	cli
    3c04:	de bf       	out	0x3e, r29	; 62
    3c06:	0f be       	out	0x3f, r0	; 63
    3c08:	cd bf       	out	0x3d, r28	; 61
    3c0a:	ed 01       	movw	r28, r26
    3c0c:	08 95       	ret

00003c0e <itoa>:
    3c0e:	fb 01       	movw	r30, r22
    3c10:	9f 01       	movw	r18, r30
    3c12:	e8 94       	clt
    3c14:	42 30       	cpi	r20, 0x02	; 2
    3c16:	c4 f0       	brlt	.+48     	; 0x3c48 <itoa+0x3a>
    3c18:	45 32       	cpi	r20, 0x25	; 37
    3c1a:	b4 f4       	brge	.+44     	; 0x3c48 <itoa+0x3a>
    3c1c:	4a 30       	cpi	r20, 0x0A	; 10
    3c1e:	29 f4       	brne	.+10     	; 0x3c2a <itoa+0x1c>
    3c20:	97 fb       	bst	r25, 7
    3c22:	1e f4       	brtc	.+6      	; 0x3c2a <itoa+0x1c>
    3c24:	90 95       	com	r25
    3c26:	81 95       	neg	r24
    3c28:	9f 4f       	sbci	r25, 0xFF	; 255
    3c2a:	64 2f       	mov	r22, r20
    3c2c:	77 27       	eor	r23, r23
    3c2e:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <__udivmodhi4>
    3c32:	80 5d       	subi	r24, 0xD0	; 208
    3c34:	8a 33       	cpi	r24, 0x3A	; 58
    3c36:	0c f0       	brlt	.+2      	; 0x3c3a <itoa+0x2c>
    3c38:	89 5d       	subi	r24, 0xD9	; 217
    3c3a:	81 93       	st	Z+, r24
    3c3c:	cb 01       	movw	r24, r22
    3c3e:	00 97       	sbiw	r24, 0x00	; 0
    3c40:	a1 f7       	brne	.-24     	; 0x3c2a <itoa+0x1c>
    3c42:	16 f4       	brtc	.+4      	; 0x3c48 <itoa+0x3a>
    3c44:	5d e2       	ldi	r21, 0x2D	; 45
    3c46:	51 93       	st	Z+, r21
    3c48:	10 82       	st	Z, r1
    3c4a:	c9 01       	movw	r24, r18
    3c4c:	0c 94 28 1e 	jmp	0x3c50	; 0x3c50 <strrev>

00003c50 <strrev>:
    3c50:	dc 01       	movw	r26, r24
    3c52:	fc 01       	movw	r30, r24
    3c54:	67 2f       	mov	r22, r23
    3c56:	71 91       	ld	r23, Z+
    3c58:	77 23       	and	r23, r23
    3c5a:	e1 f7       	brne	.-8      	; 0x3c54 <strrev+0x4>
    3c5c:	32 97       	sbiw	r30, 0x02	; 2
    3c5e:	04 c0       	rjmp	.+8      	; 0x3c68 <strrev+0x18>
    3c60:	7c 91       	ld	r23, X
    3c62:	6d 93       	st	X+, r22
    3c64:	70 83       	st	Z, r23
    3c66:	62 91       	ld	r22, -Z
    3c68:	ae 17       	cp	r26, r30
    3c6a:	bf 07       	cpc	r27, r31
    3c6c:	c8 f3       	brcs	.-14     	; 0x3c60 <strrev+0x10>
    3c6e:	08 95       	ret

00003c70 <__udivmodhi4>:
    3c70:	aa 1b       	sub	r26, r26
    3c72:	bb 1b       	sub	r27, r27
    3c74:	51 e1       	ldi	r21, 0x11	; 17
    3c76:	07 c0       	rjmp	.+14     	; 0x3c86 <__udivmodhi4_ep>

00003c78 <__udivmodhi4_loop>:
    3c78:	aa 1f       	adc	r26, r26
    3c7a:	bb 1f       	adc	r27, r27
    3c7c:	a6 17       	cp	r26, r22
    3c7e:	b7 07       	cpc	r27, r23
    3c80:	10 f0       	brcs	.+4      	; 0x3c86 <__udivmodhi4_ep>
    3c82:	a6 1b       	sub	r26, r22
    3c84:	b7 0b       	sbc	r27, r23

00003c86 <__udivmodhi4_ep>:
    3c86:	88 1f       	adc	r24, r24
    3c88:	99 1f       	adc	r25, r25
    3c8a:	5a 95       	dec	r21
    3c8c:	a9 f7       	brne	.-22     	; 0x3c78 <__udivmodhi4_loop>
    3c8e:	80 95       	com	r24
    3c90:	90 95       	com	r25
    3c92:	bc 01       	movw	r22, r24
    3c94:	cd 01       	movw	r24, r26
    3c96:	08 95       	ret

00003c98 <_exit>:
    3c98:	f8 94       	cli

00003c9a <__stop_program>:
    3c9a:	ff cf       	rjmp	.-2      	; 0x3c9a <__stop_program>
